{
	"id": "4e97d4378058b488e1a9c3071c3f6249",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.7",
	"solcLongVersion": "0.8.7+commit.e28d00a7",
	"input": {
		"language": "Solidity",
		"sources": {
			"Openzepellin/OwnableOpZ.sol": {
				"content": "// SPDX-License-Identifier: SEE LICENSE IN LICENSE\r\npragma solidity >=0.8.0;\r\n\r\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\";\r\n\r\ncontract OwnableOpZ is AccessControl{\r\n\r\nbytes32 public constant WRITER_ROL = keccak256(\"ADMI_ROL\");\r\n\r\n\r\nconstructor () {\r\n    _grantRole(DEFAULT_ADMIN_ROLE,msg.sender);\r\n\r\n}\r\n\r\n\r\nfunction soloAdmin(uint a , uint b) public view onlyRole(DEFAULT_ADMIN_ROLE) returns (uint) {\r\n    \r\n    return a+b;\r\n\r\n}\r\n\r\n\r\nfunction soloWriter (uint a, uint b) public view onlyRole(WRITER_ROL) returns(uint) {\r\n\r\n    return a*b;\r\n}\r\n\r\n\r\n}"
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/ERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/IAccessControl.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/Math.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"Openzepellin/OwnableOpZ.sol": {
				"OwnableOpZ": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "previousAdminRole",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "newAdminRole",
									"type": "bytes32"
								}
							],
							"name": "RoleAdminChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleGranted",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleRevoked",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DEFAULT_ADMIN_ROLE",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "WRITER_ROL",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								}
							],
							"name": "getRoleAdmin",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "grantRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "hasRole",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "renounceRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "revokeRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "a",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "b",
									"type": "uint256"
								}
							],
							"name": "soloAdmin",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "a",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "b",
									"type": "uint256"
								}
							],
							"name": "soloWriter",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"getRoleAdmin(bytes32)": {
								"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
							},
							"grantRole(bytes32,address)": {
								"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
							},
							"hasRole(bytes32,address)": {
								"details": "Returns `true` if `account` has been granted `role`."
							},
							"renounceRole(bytes32,address)": {
								"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
							},
							"revokeRole(bytes32,address)": {
								"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
							},
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"Openzepellin/OwnableOpZ.sol\":195:617  contract OwnableOpZ is AccessControl{\r... */\n  mstore(0x40, 0x80)\n    /* \"Openzepellin/OwnableOpZ.sol\":301:370  constructor () {\r... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n    /* \"Openzepellin/OwnableOpZ.sol\":323:364  _grantRole(DEFAULT_ADMIN_ROLE,msg.sender) */\n  tag_4\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":2072:2076  0x00 */\n  0x00\n    /* \"Openzepellin/OwnableOpZ.sol\":334:352  DEFAULT_ADMIN_ROLE */\n  dup1\n  shl\n    /* \"Openzepellin/OwnableOpZ.sol\":353:363  msg.sender */\n  caller\n    /* \"Openzepellin/OwnableOpZ.sol\":323:333  _grantRole */\n  shl(0x20, tag_5)\n    /* \"Openzepellin/OwnableOpZ.sol\":323:364  _grantRole(DEFAULT_ADMIN_ROLE,msg.sender) */\n  0x20\n  shr\n  jump\t// in\ntag_4:\n    /* \"Openzepellin/OwnableOpZ.sol\":195:617  contract OwnableOpZ is AccessControl{\r... */\n  jump(tag_6)\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7461:7694  function _grantRole(bytes32 role, address account) internal virtual {... */\ntag_5:\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7544:7566  hasRole(role, account) */\n  tag_8\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7552:7556  role */\n  dup3\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7558:7565  account */\n  dup3\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7544:7551  hasRole */\n  shl(0x20, tag_9)\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7544:7566  hasRole(role, account) */\n  0x20\n  shr\n  jump\t// in\ntag_8:\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7539:7688  if (!hasRole(role, account)) {... */\n  tag_10\n  jumpi\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7614:7618  true */\n  0x01\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7582:7588  _roles */\n  0x00\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7582:7594  _roles[role] */\n  dup1\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7589:7593  role */\n  dup5\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7582:7594  _roles[role] */\n  dup2\n  mstore\n  0x20\n  add\n  swap1\n  dup2\n  mstore\n  0x20\n  add\n  0x00\n  keccak256\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7582:7602  _roles[role].members */\n  0x00\n  add\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7582:7611  _roles[role].members[account] */\n  0x00\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7603:7610  account */\n  dup4\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7582:7611  _roles[role].members[account] */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  dup2\n  mstore\n  0x20\n  add\n  swap1\n  dup2\n  mstore\n  0x20\n  add\n  0x00\n  keccak256\n  0x00\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7582:7618  _roles[role].members[account] = true */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xff\n  mul\n  not\n  and\n  swap1\n  dup4\n  iszero\n  iszero\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7664:7676  _msgSender() */\n  tag_11\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7664:7674  _msgSender */\n  shl(0x20, tag_12)\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7664:7676  _msgSender() */\n  0x20\n  shr\n  jump\t// in\ntag_11:\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7637:7677  RoleGranted(role, account, _msgSender()) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7655:7662  account */\n  dup2\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7637:7677  RoleGranted(role, account, _msgSender()) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7649:7653  role */\n  dup4\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7637:7677  RoleGranted(role, account, _msgSender()) */\n  0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d\n  mload(0x40)\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  log4\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7539:7688  if (!hasRole(role, account)) {... */\ntag_10:\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7461:7694  function _grantRole(bytes32 role, address account) internal virtual {... */\n  pop\n  pop\n  jump\t// out\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":2895:3040  function hasRole(bytes32 role, address account) public view virtual override returns (bool) {... */\ntag_9:\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":2981:2985  bool */\n  0x00\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":3004:3010  _roles */\n  dup1\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":3004:3016  _roles[role] */\n  0x00\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":3011:3015  role */\n  dup5\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":3004:3016  _roles[role] */\n  dup2\n  mstore\n  0x20\n  add\n  swap1\n  dup2\n  mstore\n  0x20\n  add\n  0x00\n  keccak256\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":3004:3024  _roles[role].members */\n  0x00\n  add\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":3004:3033  _roles[role].members[account] */\n  0x00\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":3025:3032  account */\n  dup4\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":3004:3033  _roles[role].members[account] */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  dup2\n  mstore\n  0x20\n  add\n  swap1\n  dup2\n  mstore\n  0x20\n  add\n  0x00\n  keccak256\n  0x00\n  swap1\n  sload\n  swap1\n  0x0100\n  exp\n  swap1\n  div\n  0xff\n  and\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":2997:3033  return _roles[role].members[account] */\n  swap1\n  pop\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":2895:3040  function hasRole(bytes32 role, address account) public view virtual override returns (bool) {... */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\ntag_12:\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\":693:700  address */\n  0x00\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\":719:729  msg.sender */\n  caller\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\":712:729  return msg.sender */\n  swap1\n  pop\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n  swap1\n  jump\t// out\n    /* \"Openzepellin/OwnableOpZ.sol\":195:617  contract OwnableOpZ is AccessControl{\r... */\ntag_6:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"Openzepellin/OwnableOpZ.sol\":195:617  contract OwnableOpZ is AccessControl{\r... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x91d14854\n      gt\n      tag_13\n      jumpi\n      dup1\n      0x91d14854\n      eq\n      tag_8\n      jumpi\n      dup1\n      0xa217fddf\n      eq\n      tag_9\n      jumpi\n      dup1\n      0xb137050d\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xd547741f\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xe01c3119\n      eq\n      tag_12\n      jumpi\n      jump(tag_2)\n    tag_13:\n      dup1\n      0x01ffc9a7\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x248a9ca3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x2f2ff15d\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x36568abe\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x426dbd9c\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":2606:2808  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {... */\n    tag_3:\n      tag_14\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_15\n      swap2\n      swap1\n      tag_16\n      jump\t// in\n    tag_15:\n      tag_17\n      jump\t// in\n    tag_14:\n      mload(0x40)\n      tag_18\n      swap2\n      swap1\n      tag_19\n      jump\t// in\n    tag_18:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":4378:4507  function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {... */\n    tag_4:\n      tag_20\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_21\n      swap2\n      swap1\n      tag_22\n      jump\t// in\n    tag_21:\n      tag_23\n      jump\t// in\n    tag_20:\n      mload(0x40)\n      tag_24\n      swap2\n      swap1\n      tag_25\n      jump\t// in\n    tag_24:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":4803:4948  function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {... */\n    tag_5:\n      tag_26\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_27\n      swap2\n      swap1\n      tag_28\n      jump\t// in\n    tag_27:\n      tag_29\n      jump\t// in\n    tag_26:\n      stop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":5912:6126  function renounceRole(bytes32 role, address account) public virtual override {... */\n    tag_6:\n      tag_30\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_31\n      swap2\n      swap1\n      tag_28\n      jump\t// in\n    tag_31:\n      tag_32\n      jump\t// in\n    tag_30:\n      stop\n        /* \"Openzepellin/OwnableOpZ.sol\":236:294  bytes32 public constant WRITER_ROL = keccak256(\"ADMI_ROL\") */\n    tag_7:\n      tag_33\n      tag_34\n      jump\t// in\n    tag_33:\n      mload(0x40)\n      tag_35\n      swap2\n      swap1\n      tag_25\n      jump\t// in\n    tag_35:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":2895:3040  function hasRole(bytes32 role, address account) public view virtual override returns (bool) {... */\n    tag_8:\n      tag_36\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_37\n      swap2\n      swap1\n      tag_28\n      jump\t// in\n    tag_37:\n      tag_38\n      jump\t// in\n    tag_36:\n      mload(0x40)\n      tag_39\n      swap2\n      swap1\n      tag_19\n      jump\t// in\n    tag_39:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":2027:2076  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00 */\n    tag_9:\n      tag_40\n      tag_41\n      jump\t// in\n    tag_40:\n      mload(0x40)\n      tag_42\n      swap2\n      swap1\n      tag_25\n      jump\t// in\n    tag_42:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"Openzepellin/OwnableOpZ.sol\":376:497  function soloAdmin(uint a , uint b) public view onlyRole(DEFAULT_ADMIN_ROLE) returns (uint) {\r... */\n    tag_10:\n      tag_43\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_44\n      swap2\n      swap1\n      tag_45\n      jump\t// in\n    tag_44:\n      tag_46\n      jump\t// in\n    tag_43:\n      mload(0x40)\n      tag_47\n      swap2\n      swap1\n      tag_48\n      jump\t// in\n    tag_47:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":5228:5375  function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {... */\n    tag_11:\n      tag_49\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_50\n      swap2\n      swap1\n      tag_28\n      jump\t// in\n    tag_50:\n      tag_51\n      jump\t// in\n    tag_49:\n      stop\n        /* \"Openzepellin/OwnableOpZ.sol\":503:610  function soloWriter (uint a, uint b) public view onlyRole(WRITER_ROL) returns(uint) {\r... */\n    tag_12:\n      tag_52\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_53\n      swap2\n      swap1\n      tag_45\n      jump\t// in\n    tag_53:\n      tag_54\n      jump\t// in\n    tag_52:\n      mload(0x40)\n      tag_55\n      swap2\n      swap1\n      tag_48\n      jump\t// in\n    tag_55:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":2606:2808  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {... */\n    tag_17:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":2691:2695  bool */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":2729:2761  type(IAccessControl).interfaceId */\n      0x7965db0b00000000000000000000000000000000000000000000000000000000\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":2714:2761  interfaceId == type(IAccessControl).interfaceId */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":2714:2725  interfaceId */\n      dup3\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":2714:2761  interfaceId == type(IAccessControl).interfaceId */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      eq\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":2714:2801  interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId) */\n      dup1\n      tag_57\n      jumpi\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":2765:2801  super.supportsInterface(interfaceId) */\n      tag_58\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":2789:2800  interfaceId */\n      dup3\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":2765:2788  super.supportsInterface */\n      tag_59\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":2765:2801  super.supportsInterface(interfaceId) */\n      jump\t// in\n    tag_58:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":2714:2801  interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId) */\n    tag_57:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":2707:2801  return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId) */\n      swap1\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":2606:2808  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":4378:4507  function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {... */\n    tag_23:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":4452:4459  bytes32 */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":4478:4484  _roles */\n      dup1\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":4478:4490  _roles[role] */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":4485:4489  role */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":4478:4490  _roles[role] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":4478:4500  _roles[role].adminRole */\n      0x01\n      add\n      sload\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":4471:4500  return _roles[role].adminRole */\n      swap1\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":4378:4507  function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":4803:4948  function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {... */\n    tag_29:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":4886:4904  getRoleAdmin(role) */\n      tag_61\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":4899:4903  role */\n      dup3\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":4886:4898  getRoleAdmin */\n      tag_23\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":4886:4904  getRoleAdmin(role) */\n      jump\t// in\n    tag_61:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      tag_63\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":2516:2520  role */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":2505:2515  _checkRole */\n      tag_64\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      jump\t// in\n    tag_63:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":4916:4941  _grantRole(role, account) */\n      tag_66\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":4927:4931  role */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":4933:4940  account */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":4916:4926  _grantRole */\n      tag_67\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":4916:4941  _grantRole(role, account) */\n      jump\t// in\n    tag_66:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":4803:4948  function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":5912:6126  function renounceRole(bytes32 role, address account) public virtual override {... */\n    tag_32:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":6018:6030  _msgSender() */\n      tag_69\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":6018:6028  _msgSender */\n      tag_70\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":6018:6030  _msgSender() */\n      jump\t// in\n    tag_69:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":6007:6030  account == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":6007:6014  account */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":6007:6030  account == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":5999:6082  require(account == _msgSender(), \"AccessControl: can only renounce roles for self\") */\n      tag_71\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_72\n      swap1\n      tag_73\n      jump\t// in\n    tag_72:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_71:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":6093:6119  _revokeRole(role, account) */\n      tag_74\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":6105:6109  role */\n      dup3\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":6111:6118  account */\n      dup3\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":6093:6104  _revokeRole */\n      tag_75\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":6093:6119  _revokeRole(role, account) */\n      jump\t// in\n    tag_74:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":5912:6126  function renounceRole(bytes32 role, address account) public virtual override {... */\n      pop\n      pop\n      jump\t// out\n        /* \"Openzepellin/OwnableOpZ.sol\":236:294  bytes32 public constant WRITER_ROL = keccak256(\"ADMI_ROL\") */\n    tag_34:\n        /* \"Openzepellin/OwnableOpZ.sol\":273:294  keccak256(\"ADMI_ROL\") */\n      0x0d08ba49c85b8f4efedcab2f953c61f86e8944d3d6185fd4fa77665e1274cfc4\n        /* \"Openzepellin/OwnableOpZ.sol\":236:294  bytes32 public constant WRITER_ROL = keccak256(\"ADMI_ROL\") */\n      dup2\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":2895:3040  function hasRole(bytes32 role, address account) public view virtual override returns (bool) {... */\n    tag_38:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":2981:2985  bool */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":3004:3010  _roles */\n      dup1\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":3004:3016  _roles[role] */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":3011:3015  role */\n      dup5\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":3004:3016  _roles[role] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":3004:3024  _roles[role].members */\n      0x00\n      add\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":3004:3033  _roles[role].members[account] */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":3025:3032  account */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":3004:3033  _roles[role].members[account] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":2997:3033  return _roles[role].members[account] */\n      swap1\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":2895:3040  function hasRole(bytes32 role, address account) public view virtual override returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":2027:2076  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00 */\n    tag_41:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":2072:2076  0x00 */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":2027:2076  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00 */\n      dup1\n      shl\n      dup2\n      jump\t// out\n        /* \"Openzepellin/OwnableOpZ.sol\":376:497  function soloAdmin(uint a , uint b) public view onlyRole(DEFAULT_ADMIN_ROLE) returns (uint) {\r... */\n    tag_46:\n        /* \"Openzepellin/OwnableOpZ.sol\":462:466  uint */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":2072:2076  0x00 */\n      dup1\n        /* \"Openzepellin/OwnableOpZ.sol\":433:451  DEFAULT_ADMIN_ROLE */\n      0x00\n      shl\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      tag_78\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":2516:2520  role */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":2505:2515  _checkRole */\n      tag_64\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      jump\t// in\n    tag_78:\n        /* \"Openzepellin/OwnableOpZ.sol\":490:491  b */\n      dup3\n        /* \"Openzepellin/OwnableOpZ.sol\":488:489  a */\n      dup5\n        /* \"Openzepellin/OwnableOpZ.sol\":488:491  a+b */\n      tag_80\n      swap2\n      swap1\n      tag_81\n      jump\t// in\n    tag_80:\n        /* \"Openzepellin/OwnableOpZ.sol\":481:491  return a+b */\n      swap2\n      pop\n        /* \"Openzepellin/OwnableOpZ.sol\":376:497  function soloAdmin(uint a , uint b) public view onlyRole(DEFAULT_ADMIN_ROLE) returns (uint) {\r... */\n      pop\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":5228:5375  function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {... */\n    tag_51:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":5312:5330  getRoleAdmin(role) */\n      tag_82\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":5325:5329  role */\n      dup3\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":5312:5324  getRoleAdmin */\n      tag_23\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":5312:5330  getRoleAdmin(role) */\n      jump\t// in\n    tag_82:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      tag_84\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":2516:2520  role */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":2505:2515  _checkRole */\n      tag_64\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      jump\t// in\n    tag_84:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":5342:5368  _revokeRole(role, account) */\n      tag_86\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":5354:5358  role */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":5360:5367  account */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":5342:5353  _revokeRole */\n      tag_75\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":5342:5368  _revokeRole(role, account) */\n      jump\t// in\n    tag_86:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":5228:5375  function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"Openzepellin/OwnableOpZ.sol\":503:610  function soloWriter (uint a, uint b) public view onlyRole(WRITER_ROL) returns(uint) {\r... */\n    tag_54:\n        /* \"Openzepellin/OwnableOpZ.sol\":581:585  uint */\n      0x00\n        /* \"Openzepellin/OwnableOpZ.sol\":273:294  keccak256(\"ADMI_ROL\") */\n      0x0d08ba49c85b8f4efedcab2f953c61f86e8944d3d6185fd4fa77665e1274cfc4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      tag_88\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":2516:2520  role */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":2505:2515  _checkRole */\n      tag_64\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      jump\t// in\n    tag_88:\n        /* \"Openzepellin/OwnableOpZ.sol\":605:606  b */\n      dup3\n        /* \"Openzepellin/OwnableOpZ.sol\":603:604  a */\n      dup5\n        /* \"Openzepellin/OwnableOpZ.sol\":603:606  a*b */\n      tag_90\n      swap2\n      swap1\n      tag_91\n      jump\t// in\n    tag_90:\n        /* \"Openzepellin/OwnableOpZ.sol\":596:606  return a*b */\n      swap2\n      pop\n        /* \"Openzepellin/OwnableOpZ.sol\":503:610  function soloWriter (uint a, uint b) public view onlyRole(WRITER_ROL) returns(uint) {\r... */\n      pop\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/ERC165.sol\":829:984  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {... */\n    tag_59:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/ERC165.sol\":914:918  bool */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/ERC165.sol\":952:977  type(IERC165).interfaceId */\n      0x01ffc9a700000000000000000000000000000000000000000000000000000000\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/ERC165.sol\":937:977  interfaceId == type(IERC165).interfaceId */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/ERC165.sol\":937:948  interfaceId */\n      dup3\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/ERC165.sol\":937:977  interfaceId == type(IERC165).interfaceId */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      eq\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/ERC165.sol\":930:977  return interfaceId == type(IERC165).interfaceId */\n      swap1\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/ERC165.sol\":829:984  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":3334:3437  function _checkRole(bytes32 role) internal view virtual {... */\n    tag_64:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":3400:3430  _checkRole(role, _msgSender()) */\n      tag_94\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":3411:3415  role */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":3417:3429  _msgSender() */\n      tag_95\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":3417:3427  _msgSender */\n      tag_70\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":3417:3429  _msgSender() */\n      jump\t// in\n    tag_95:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":3400:3410  _checkRole */\n      tag_96\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":3400:3430  _checkRole(role, _msgSender()) */\n      jump\t// in\n    tag_94:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":3334:3437  function _checkRole(bytes32 role) internal view virtual {... */\n      pop\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7461:7694  function _grantRole(bytes32 role, address account) internal virtual {... */\n    tag_67:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7544:7566  hasRole(role, account) */\n      tag_98\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7552:7556  role */\n      dup3\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7558:7565  account */\n      dup3\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7544:7551  hasRole */\n      tag_38\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7544:7566  hasRole(role, account) */\n      jump\t// in\n    tag_98:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7539:7688  if (!hasRole(role, account)) {... */\n      tag_99\n      jumpi\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7614:7618  true */\n      0x01\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7582:7588  _roles */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7582:7594  _roles[role] */\n      dup1\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7589:7593  role */\n      dup5\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7582:7594  _roles[role] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7582:7602  _roles[role].members */\n      0x00\n      add\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7582:7611  _roles[role].members[account] */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7603:7610  account */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7582:7611  _roles[role].members[account] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7582:7618  _roles[role].members[account] = true */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7664:7676  _msgSender() */\n      tag_100\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7664:7674  _msgSender */\n      tag_70\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7664:7676  _msgSender() */\n      jump\t// in\n    tag_100:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7637:7677  RoleGranted(role, account, _msgSender()) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7655:7662  account */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7637:7677  RoleGranted(role, account, _msgSender()) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7649:7653  role */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7637:7677  RoleGranted(role, account, _msgSender()) */\n      0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7539:7688  if (!hasRole(role, account)) {... */\n    tag_99:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7461:7694  function _grantRole(bytes32 role, address account) internal virtual {... */\n      pop\n      pop\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n    tag_70:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\":693:700  address */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\":712:729  return msg.sender */\n      swap1\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7865:8099  function _revokeRole(bytes32 role, address account) internal virtual {... */\n    tag_75:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7948:7970  hasRole(role, account) */\n      tag_103\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7956:7960  role */\n      dup3\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7962:7969  account */\n      dup3\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7948:7955  hasRole */\n      tag_38\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7948:7970  hasRole(role, account) */\n      jump\t// in\n    tag_103:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7944:8093  if (hasRole(role, account)) {... */\n      iszero\n      tag_104\n      jumpi\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":8018:8023  false */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7986:7992  _roles */\n      dup1\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7986:7998  _roles[role] */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7993:7997  role */\n      dup5\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7986:7998  _roles[role] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7986:8006  _roles[role].members */\n      0x00\n      add\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7986:8015  _roles[role].members[account] */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":8007:8014  account */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7986:8015  _roles[role].members[account] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7986:8023  _roles[role].members[account] = false */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":8069:8081  _msgSender() */\n      tag_105\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":8069:8079  _msgSender */\n      tag_70\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":8069:8081  _msgSender() */\n      jump\t// in\n    tag_105:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":8042:8082  RoleRevoked(role, account, _msgSender()) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":8060:8067  account */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":8042:8082  RoleRevoked(role, account, _msgSender()) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":8054:8058  role */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":8042:8082  RoleRevoked(role, account, _msgSender()) */\n      0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7944:8093  if (hasRole(role, account)) {... */\n    tag_104:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":7865:8099  function _revokeRole(bytes32 role, address account) internal virtual {... */\n      pop\n      pop\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":3718:4197  function _checkRole(bytes32 role, address account) internal view virtual {... */\n    tag_96:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":3806:3828  hasRole(role, account) */\n      tag_107\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":3814:3818  role */\n      dup3\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":3820:3827  account */\n      dup3\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":3806:3813  hasRole */\n      tag_38\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":3806:3828  hasRole(role, account) */\n      jump\t// in\n    tag_107:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":3801:4191  if (!hasRole(role, account)) {... */\n      tag_108\n      jumpi\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":3989:4017  Strings.toHexString(account) */\n      tag_109\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":4009:4016  account */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":3989:4008  Strings.toHexString */\n      tag_110\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":3989:4017  Strings.toHexString(account) */\n      jump\t// in\n    tag_109:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":4088:4126  Strings.toHexString(uint256(role), 32) */\n      tag_111\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":4116:4120  role */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":4108:4121  uint256(role) */\n      0x00\n      shr\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":4123:4125  32 */\n      0x20\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":4088:4107  Strings.toHexString */\n      tag_112\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":4088:4126  Strings.toHexString(uint256(role), 32) */\n      jump\t// in\n    tag_111:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":3896:4148  abi.encodePacked(... */\n      add(0x20, mload(0x40))\n      tag_113\n      swap3\n      swap2\n      swap1\n      tag_114\n      jump\t// in\n    tag_113:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":3844:4180  revert(... */\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_115\n      swap2\n      swap1\n      tag_116\n      jump\t// in\n    tag_115:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":3801:4191  if (!hasRole(role, account)) {... */\n    tag_108:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":3718:4197  function _checkRole(bytes32 role, address account) internal view virtual {... */\n      pop\n      pop\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":2102:2251  function toHexString(address addr) internal pure returns (string memory) {... */\n    tag_110:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":2160:2173  string memory */\n      0x60\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":2192:2244  toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH) */\n      tag_118\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":2220:2224  addr */\n      dup3\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":2204:2226  uint256(uint160(addr)) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":311:313  20 */\n      0x14\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":2192:2244  toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH) */\n      0xff\n      and\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":2192:2203  toHexString */\n      tag_112\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":2192:2244  toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH) */\n      jump\t// in\n    tag_118:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":2185:2244  return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH) */\n      swap1\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":2102:2251  function toHexString(address addr) internal pure returns (string memory) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1513:1950  function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {... */\n    tag_112:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1588:1601  string memory */\n      0x60\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1613:1632  bytes memory buffer */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1658:1659  2 */\n      0x02\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1649:1655  length */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1645:1646  2 */\n      0x02\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1645:1655  2 * length */\n      tag_120\n      swap2\n      swap1\n      tag_91\n      jump\t// in\n    tag_120:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1645:1659  2 * length + 2 */\n      tag_121\n      swap2\n      swap1\n      tag_81\n      jump\t// in\n    tag_121:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1635:1660  new bytes(2 * length + 2) */\n      0xffffffffffffffff\n      dup2\n      gt\n      iszero\n      tag_122\n      jumpi\n      tag_123\n      tag_124\n      jump\t// in\n    tag_123:\n    tag_122:\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x1f\n      add\n      not(0x1f)\n      and\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_125\n      jumpi\n      dup2\n      0x20\n      add\n      0x01\n      dup3\n      mul\n      dup1\n      calldatasize\n      dup4\n      calldatacopy\n      dup1\n      dup3\n      add\n      swap2\n      pop\n      pop\n      swap1\n      pop\n    tag_125:\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1613:1660  bytes memory buffer = new bytes(2 * length + 2) */\n      swap1\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1670:1685  buffer[0] = \"0\" */\n      0x3000000000000000000000000000000000000000000000000000000000000000\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1670:1676  buffer */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1677:1678  0 */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1670:1679  buffer[0] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_126\n      jumpi\n      tag_127\n      tag_128\n      jump\t// in\n    tag_127:\n    tag_126:\n      0x20\n      add\n      add\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1670:1685  buffer[0] = \"0\" */\n      swap1\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      swap1\n      dup2\n      0x00\n      byte\n      swap1\n      mstore8\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1695:1710  buffer[1] = \"x\" */\n      0x7800000000000000000000000000000000000000000000000000000000000000\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1695:1701  buffer */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1702:1703  1 */\n      0x01\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1695:1704  buffer[1] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_129\n      jumpi\n      tag_130\n      tag_128\n      jump\t// in\n    tag_130:\n    tag_129:\n      0x20\n      add\n      add\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1695:1710  buffer[1] = \"x\" */\n      swap1\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      swap1\n      dup2\n      0x00\n      byte\n      swap1\n      mstore8\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1725:1734  uint256 i */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1750:1751  1 */\n      0x01\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1741:1747  length */\n      dup5\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1737:1738  2 */\n      0x02\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1737:1747  2 * length */\n      tag_134\n      swap2\n      swap1\n      tag_91\n      jump\t// in\n    tag_134:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1737:1751  2 * length + 1 */\n      tag_135\n      swap2\n      swap1\n      tag_81\n      jump\t// in\n    tag_135:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1725:1751  uint256 i = 2 * length + 1 */\n      swap1\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1720:1848  for (uint256 i = 2 * length + 1; i > 1; --i) {... */\n    tag_131:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1757:1758  1 */\n      0x01\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1753:1754  i */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1753:1758  i > 1 */\n      gt\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1720:1848  for (uint256 i = 2 * length + 1; i > 1; --i) {... */\n      iszero\n      tag_132\n      jumpi\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1791:1799  _SYMBOLS */\n      0x3031323334353637383961626364656600000000000000000000000000000000\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1808:1811  0xf */\n      0x0f\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1800:1805  value */\n      dup7\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1800:1811  value & 0xf */\n      and\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1791:1812  _SYMBOLS[value & 0xf] */\n      0x10\n      dup2\n      lt\n      tag_136\n      jumpi\n      tag_137\n      tag_128\n      jump\t// in\n    tag_137:\n    tag_136:\n      byte\n      0xf8\n      shl\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1779:1785  buffer */\n      dup3\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1786:1787  i */\n      dup3\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1779:1788  buffer[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_138\n      jumpi\n      tag_139\n      tag_128\n      jump\t// in\n    tag_139:\n    tag_138:\n      0x20\n      add\n      add\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1779:1812  buffer[i] = _SYMBOLS[value & 0xf] */\n      swap1\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      swap1\n      dup2\n      0x00\n      byte\n      swap1\n      mstore8\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1836:1837  4 */\n      0x04\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1826:1837  value >>= 4 */\n      dup6\n      swap1\n      shr\n      swap5\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1760:1763  --i */\n      dup1\n      tag_140\n      swap1\n      tag_141\n      jump\t// in\n    tag_140:\n      swap1\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1720:1848  for (uint256 i = 2 * length + 1; i > 1; --i) {... */\n      jump(tag_131)\n    tag_132:\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1874:1875  0 */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1865:1870  value */\n      dup5\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1865:1875  value == 0 */\n      eq\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1857:1912  require(value == 0, \"Strings: hex length insufficient\") */\n      tag_142\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_143\n      swap1\n      tag_144\n      jump\t// in\n    tag_143:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_142:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1936:1942  buffer */\n      dup1\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1922:1943  return string(buffer) */\n      swap2\n      pop\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":1513:1950  function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7:146   */\n    tag_146:\n        /* \"#utility.yul\":53:58   */\n      0x00\n        /* \"#utility.yul\":91:97   */\n      dup2\n        /* \"#utility.yul\":78:98   */\n      calldataload\n        /* \"#utility.yul\":69:98   */\n      swap1\n      pop\n        /* \"#utility.yul\":107:140   */\n      tag_148\n        /* \"#utility.yul\":134:139   */\n      dup2\n        /* \"#utility.yul\":107:140   */\n      tag_149\n      jump\t// in\n    tag_148:\n        /* \"#utility.yul\":7:146   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":152:291   */\n    tag_150:\n        /* \"#utility.yul\":198:203   */\n      0x00\n        /* \"#utility.yul\":236:242   */\n      dup2\n        /* \"#utility.yul\":223:243   */\n      calldataload\n        /* \"#utility.yul\":214:243   */\n      swap1\n      pop\n        /* \"#utility.yul\":252:285   */\n      tag_152\n        /* \"#utility.yul\":279:284   */\n      dup2\n        /* \"#utility.yul\":252:285   */\n      tag_153\n      jump\t// in\n    tag_152:\n        /* \"#utility.yul\":152:291   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":297:434   */\n    tag_154:\n        /* \"#utility.yul\":342:347   */\n      0x00\n        /* \"#utility.yul\":380:386   */\n      dup2\n        /* \"#utility.yul\":367:387   */\n      calldataload\n        /* \"#utility.yul\":358:387   */\n      swap1\n      pop\n        /* \"#utility.yul\":396:428   */\n      tag_156\n        /* \"#utility.yul\":422:427   */\n      dup2\n        /* \"#utility.yul\":396:428   */\n      tag_157\n      jump\t// in\n    tag_156:\n        /* \"#utility.yul\":297:434   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":440:579   */\n    tag_158:\n        /* \"#utility.yul\":486:491   */\n      0x00\n        /* \"#utility.yul\":524:530   */\n      dup2\n        /* \"#utility.yul\":511:531   */\n      calldataload\n        /* \"#utility.yul\":502:531   */\n      swap1\n      pop\n        /* \"#utility.yul\":540:573   */\n      tag_160\n        /* \"#utility.yul\":567:572   */\n      dup2\n        /* \"#utility.yul\":540:573   */\n      tag_161\n      jump\t// in\n    tag_160:\n        /* \"#utility.yul\":440:579   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":585:914   */\n    tag_22:\n        /* \"#utility.yul\":644:650   */\n      0x00\n        /* \"#utility.yul\":693:695   */\n      0x20\n        /* \"#utility.yul\":681:690   */\n      dup3\n        /* \"#utility.yul\":672:679   */\n      dup5\n        /* \"#utility.yul\":668:691   */\n      sub\n        /* \"#utility.yul\":664:696   */\n      slt\n        /* \"#utility.yul\":661:780   */\n      iszero\n      tag_163\n      jumpi\n        /* \"#utility.yul\":699:778   */\n      tag_164\n      tag_165\n      jump\t// in\n    tag_164:\n        /* \"#utility.yul\":661:780   */\n    tag_163:\n        /* \"#utility.yul\":819:820   */\n      0x00\n        /* \"#utility.yul\":844:897   */\n      tag_166\n        /* \"#utility.yul\":889:896   */\n      dup5\n        /* \"#utility.yul\":880:886   */\n      dup3\n        /* \"#utility.yul\":869:878   */\n      dup6\n        /* \"#utility.yul\":865:887   */\n      add\n        /* \"#utility.yul\":844:897   */\n      tag_150\n      jump\t// in\n    tag_166:\n        /* \"#utility.yul\":834:897   */\n      swap2\n      pop\n        /* \"#utility.yul\":790:907   */\n      pop\n        /* \"#utility.yul\":585:914   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":920:1394   */\n    tag_28:\n        /* \"#utility.yul\":988:994   */\n      0x00\n        /* \"#utility.yul\":996:1002   */\n      dup1\n        /* \"#utility.yul\":1045:1047   */\n      0x40\n        /* \"#utility.yul\":1033:1042   */\n      dup4\n        /* \"#utility.yul\":1024:1031   */\n      dup6\n        /* \"#utility.yul\":1020:1043   */\n      sub\n        /* \"#utility.yul\":1016:1048   */\n      slt\n        /* \"#utility.yul\":1013:1132   */\n      iszero\n      tag_168\n      jumpi\n        /* \"#utility.yul\":1051:1130   */\n      tag_169\n      tag_165\n      jump\t// in\n    tag_169:\n        /* \"#utility.yul\":1013:1132   */\n    tag_168:\n        /* \"#utility.yul\":1171:1172   */\n      0x00\n        /* \"#utility.yul\":1196:1249   */\n      tag_170\n        /* \"#utility.yul\":1241:1248   */\n      dup6\n        /* \"#utility.yul\":1232:1238   */\n      dup3\n        /* \"#utility.yul\":1221:1230   */\n      dup7\n        /* \"#utility.yul\":1217:1239   */\n      add\n        /* \"#utility.yul\":1196:1249   */\n      tag_150\n      jump\t// in\n    tag_170:\n        /* \"#utility.yul\":1186:1249   */\n      swap3\n      pop\n        /* \"#utility.yul\":1142:1259   */\n      pop\n        /* \"#utility.yul\":1298:1300   */\n      0x20\n        /* \"#utility.yul\":1324:1377   */\n      tag_171\n        /* \"#utility.yul\":1369:1376   */\n      dup6\n        /* \"#utility.yul\":1360:1366   */\n      dup3\n        /* \"#utility.yul\":1349:1358   */\n      dup7\n        /* \"#utility.yul\":1345:1367   */\n      add\n        /* \"#utility.yul\":1324:1377   */\n      tag_146\n      jump\t// in\n    tag_171:\n        /* \"#utility.yul\":1314:1377   */\n      swap2\n      pop\n        /* \"#utility.yul\":1269:1387   */\n      pop\n        /* \"#utility.yul\":920:1394   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1400:1727   */\n    tag_16:\n        /* \"#utility.yul\":1458:1464   */\n      0x00\n        /* \"#utility.yul\":1507:1509   */\n      0x20\n        /* \"#utility.yul\":1495:1504   */\n      dup3\n        /* \"#utility.yul\":1486:1493   */\n      dup5\n        /* \"#utility.yul\":1482:1505   */\n      sub\n        /* \"#utility.yul\":1478:1510   */\n      slt\n        /* \"#utility.yul\":1475:1594   */\n      iszero\n      tag_173\n      jumpi\n        /* \"#utility.yul\":1513:1592   */\n      tag_174\n      tag_165\n      jump\t// in\n    tag_174:\n        /* \"#utility.yul\":1475:1594   */\n    tag_173:\n        /* \"#utility.yul\":1633:1634   */\n      0x00\n        /* \"#utility.yul\":1658:1710   */\n      tag_175\n        /* \"#utility.yul\":1702:1709   */\n      dup5\n        /* \"#utility.yul\":1693:1699   */\n      dup3\n        /* \"#utility.yul\":1682:1691   */\n      dup6\n        /* \"#utility.yul\":1678:1700   */\n      add\n        /* \"#utility.yul\":1658:1710   */\n      tag_154\n      jump\t// in\n    tag_175:\n        /* \"#utility.yul\":1648:1710   */\n      swap2\n      pop\n        /* \"#utility.yul\":1604:1720   */\n      pop\n        /* \"#utility.yul\":1400:1727   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1733:2207   */\n    tag_45:\n        /* \"#utility.yul\":1801:1807   */\n      0x00\n        /* \"#utility.yul\":1809:1815   */\n      dup1\n        /* \"#utility.yul\":1858:1860   */\n      0x40\n        /* \"#utility.yul\":1846:1855   */\n      dup4\n        /* \"#utility.yul\":1837:1844   */\n      dup6\n        /* \"#utility.yul\":1833:1856   */\n      sub\n        /* \"#utility.yul\":1829:1861   */\n      slt\n        /* \"#utility.yul\":1826:1945   */\n      iszero\n      tag_177\n      jumpi\n        /* \"#utility.yul\":1864:1943   */\n      tag_178\n      tag_165\n      jump\t// in\n    tag_178:\n        /* \"#utility.yul\":1826:1945   */\n    tag_177:\n        /* \"#utility.yul\":1984:1985   */\n      0x00\n        /* \"#utility.yul\":2009:2062   */\n      tag_179\n        /* \"#utility.yul\":2054:2061   */\n      dup6\n        /* \"#utility.yul\":2045:2051   */\n      dup3\n        /* \"#utility.yul\":2034:2043   */\n      dup7\n        /* \"#utility.yul\":2030:2052   */\n      add\n        /* \"#utility.yul\":2009:2062   */\n      tag_158\n      jump\t// in\n    tag_179:\n        /* \"#utility.yul\":1999:2062   */\n      swap3\n      pop\n        /* \"#utility.yul\":1955:2072   */\n      pop\n        /* \"#utility.yul\":2111:2113   */\n      0x20\n        /* \"#utility.yul\":2137:2190   */\n      tag_180\n        /* \"#utility.yul\":2182:2189   */\n      dup6\n        /* \"#utility.yul\":2173:2179   */\n      dup3\n        /* \"#utility.yul\":2162:2171   */\n      dup7\n        /* \"#utility.yul\":2158:2180   */\n      add\n        /* \"#utility.yul\":2137:2190   */\n      tag_158\n      jump\t// in\n    tag_180:\n        /* \"#utility.yul\":2127:2190   */\n      swap2\n      pop\n        /* \"#utility.yul\":2082:2200   */\n      pop\n        /* \"#utility.yul\":1733:2207   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2213:2322   */\n    tag_181:\n        /* \"#utility.yul\":2294:2315   */\n      tag_183\n        /* \"#utility.yul\":2309:2314   */\n      dup2\n        /* \"#utility.yul\":2294:2315   */\n      tag_184\n      jump\t// in\n    tag_183:\n        /* \"#utility.yul\":2289:2292   */\n      dup3\n        /* \"#utility.yul\":2282:2316   */\n      mstore\n        /* \"#utility.yul\":2213:2322   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2328:2446   */\n    tag_185:\n        /* \"#utility.yul\":2415:2439   */\n      tag_187\n        /* \"#utility.yul\":2433:2438   */\n      dup2\n        /* \"#utility.yul\":2415:2439   */\n      tag_188\n      jump\t// in\n    tag_187:\n        /* \"#utility.yul\":2410:2413   */\n      dup3\n        /* \"#utility.yul\":2403:2440   */\n      mstore\n        /* \"#utility.yul\":2328:2446   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2452:2816   */\n    tag_189:\n        /* \"#utility.yul\":2540:2543   */\n      0x00\n        /* \"#utility.yul\":2568:2607   */\n      tag_191\n        /* \"#utility.yul\":2601:2606   */\n      dup3\n        /* \"#utility.yul\":2568:2607   */\n      tag_192\n      jump\t// in\n    tag_191:\n        /* \"#utility.yul\":2623:2694   */\n      tag_193\n        /* \"#utility.yul\":2687:2693   */\n      dup2\n        /* \"#utility.yul\":2682:2685   */\n      dup6\n        /* \"#utility.yul\":2623:2694   */\n      tag_194\n      jump\t// in\n    tag_193:\n        /* \"#utility.yul\":2616:2694   */\n      swap4\n      pop\n        /* \"#utility.yul\":2703:2755   */\n      tag_195\n        /* \"#utility.yul\":2748:2754   */\n      dup2\n        /* \"#utility.yul\":2743:2746   */\n      dup6\n        /* \"#utility.yul\":2736:2740   */\n      0x20\n        /* \"#utility.yul\":2729:2734   */\n      dup7\n        /* \"#utility.yul\":2725:2741   */\n      add\n        /* \"#utility.yul\":2703:2755   */\n      tag_196\n      jump\t// in\n    tag_195:\n        /* \"#utility.yul\":2780:2809   */\n      tag_197\n        /* \"#utility.yul\":2802:2808   */\n      dup2\n        /* \"#utility.yul\":2780:2809   */\n      tag_198\n      jump\t// in\n    tag_197:\n        /* \"#utility.yul\":2775:2778   */\n      dup5\n        /* \"#utility.yul\":2771:2810   */\n      add\n        /* \"#utility.yul\":2764:2810   */\n      swap2\n      pop\n        /* \"#utility.yul\":2544:2816   */\n      pop\n        /* \"#utility.yul\":2452:2816   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2822:3199   */\n    tag_199:\n        /* \"#utility.yul\":2928:2931   */\n      0x00\n        /* \"#utility.yul\":2956:2995   */\n      tag_201\n        /* \"#utility.yul\":2989:2994   */\n      dup3\n        /* \"#utility.yul\":2956:2995   */\n      tag_192\n      jump\t// in\n    tag_201:\n        /* \"#utility.yul\":3011:3100   */\n      tag_202\n        /* \"#utility.yul\":3093:3099   */\n      dup2\n        /* \"#utility.yul\":3088:3091   */\n      dup6\n        /* \"#utility.yul\":3011:3100   */\n      tag_203\n      jump\t// in\n    tag_202:\n        /* \"#utility.yul\":3004:3100   */\n      swap4\n      pop\n        /* \"#utility.yul\":3109:3161   */\n      tag_204\n        /* \"#utility.yul\":3154:3160   */\n      dup2\n        /* \"#utility.yul\":3149:3152   */\n      dup6\n        /* \"#utility.yul\":3142:3146   */\n      0x20\n        /* \"#utility.yul\":3135:3140   */\n      dup7\n        /* \"#utility.yul\":3131:3147   */\n      add\n        /* \"#utility.yul\":3109:3161   */\n      tag_196\n      jump\t// in\n    tag_204:\n        /* \"#utility.yul\":3186:3192   */\n      dup1\n        /* \"#utility.yul\":3181:3184   */\n      dup5\n        /* \"#utility.yul\":3177:3193   */\n      add\n        /* \"#utility.yul\":3170:3193   */\n      swap2\n      pop\n        /* \"#utility.yul\":2932:3199   */\n      pop\n        /* \"#utility.yul\":2822:3199   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3205:3571   */\n    tag_205:\n        /* \"#utility.yul\":3347:3350   */\n      0x00\n        /* \"#utility.yul\":3368:3435   */\n      tag_207\n        /* \"#utility.yul\":3432:3434   */\n      0x20\n        /* \"#utility.yul\":3427:3430   */\n      dup4\n        /* \"#utility.yul\":3368:3435   */\n      tag_194\n      jump\t// in\n    tag_207:\n        /* \"#utility.yul\":3361:3435   */\n      swap2\n      pop\n        /* \"#utility.yul\":3444:3537   */\n      tag_208\n        /* \"#utility.yul\":3533:3536   */\n      dup3\n        /* \"#utility.yul\":3444:3537   */\n      tag_209\n      jump\t// in\n    tag_208:\n        /* \"#utility.yul\":3562:3564   */\n      0x20\n        /* \"#utility.yul\":3557:3560   */\n      dup3\n        /* \"#utility.yul\":3553:3565   */\n      add\n        /* \"#utility.yul\":3546:3565   */\n      swap1\n      pop\n        /* \"#utility.yul\":3205:3571   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3577:3979   */\n    tag_210:\n        /* \"#utility.yul\":3737:3740   */\n      0x00\n        /* \"#utility.yul\":3758:3843   */\n      tag_212\n        /* \"#utility.yul\":3840:3842   */\n      0x17\n        /* \"#utility.yul\":3835:3838   */\n      dup4\n        /* \"#utility.yul\":3758:3843   */\n      tag_203\n      jump\t// in\n    tag_212:\n        /* \"#utility.yul\":3751:3843   */\n      swap2\n      pop\n        /* \"#utility.yul\":3852:3945   */\n      tag_213\n        /* \"#utility.yul\":3941:3944   */\n      dup3\n        /* \"#utility.yul\":3852:3945   */\n      tag_214\n      jump\t// in\n    tag_213:\n        /* \"#utility.yul\":3970:3972   */\n      0x17\n        /* \"#utility.yul\":3965:3968   */\n      dup3\n        /* \"#utility.yul\":3961:3973   */\n      add\n        /* \"#utility.yul\":3954:3973   */\n      swap1\n      pop\n        /* \"#utility.yul\":3577:3979   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3985:4387   */\n    tag_215:\n        /* \"#utility.yul\":4145:4148   */\n      0x00\n        /* \"#utility.yul\":4166:4251   */\n      tag_217\n        /* \"#utility.yul\":4248:4250   */\n      0x11\n        /* \"#utility.yul\":4243:4246   */\n      dup4\n        /* \"#utility.yul\":4166:4251   */\n      tag_203\n      jump\t// in\n    tag_217:\n        /* \"#utility.yul\":4159:4251   */\n      swap2\n      pop\n        /* \"#utility.yul\":4260:4353   */\n      tag_218\n        /* \"#utility.yul\":4349:4352   */\n      dup3\n        /* \"#utility.yul\":4260:4353   */\n      tag_219\n      jump\t// in\n    tag_218:\n        /* \"#utility.yul\":4378:4380   */\n      0x11\n        /* \"#utility.yul\":4373:4376   */\n      dup3\n        /* \"#utility.yul\":4369:4381   */\n      add\n        /* \"#utility.yul\":4362:4381   */\n      swap1\n      pop\n        /* \"#utility.yul\":3985:4387   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4393:4759   */\n    tag_220:\n        /* \"#utility.yul\":4535:4538   */\n      0x00\n        /* \"#utility.yul\":4556:4623   */\n      tag_222\n        /* \"#utility.yul\":4620:4622   */\n      0x2f\n        /* \"#utility.yul\":4615:4618   */\n      dup4\n        /* \"#utility.yul\":4556:4623   */\n      tag_194\n      jump\t// in\n    tag_222:\n        /* \"#utility.yul\":4549:4623   */\n      swap2\n      pop\n        /* \"#utility.yul\":4632:4725   */\n      tag_223\n        /* \"#utility.yul\":4721:4724   */\n      dup3\n        /* \"#utility.yul\":4632:4725   */\n      tag_224\n      jump\t// in\n    tag_223:\n        /* \"#utility.yul\":4750:4752   */\n      0x40\n        /* \"#utility.yul\":4745:4748   */\n      dup3\n        /* \"#utility.yul\":4741:4753   */\n      add\n        /* \"#utility.yul\":4734:4753   */\n      swap1\n      pop\n        /* \"#utility.yul\":4393:4759   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4765:4883   */\n    tag_225:\n        /* \"#utility.yul\":4852:4876   */\n      tag_227\n        /* \"#utility.yul\":4870:4875   */\n      dup2\n        /* \"#utility.yul\":4852:4876   */\n      tag_228\n      jump\t// in\n    tag_227:\n        /* \"#utility.yul\":4847:4850   */\n      dup3\n        /* \"#utility.yul\":4840:4877   */\n      mstore\n        /* \"#utility.yul\":4765:4883   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4889:5856   */\n    tag_114:\n        /* \"#utility.yul\":5271:5274   */\n      0x00\n        /* \"#utility.yul\":5293:5441   */\n      tag_230\n        /* \"#utility.yul\":5437:5440   */\n      dup3\n        /* \"#utility.yul\":5293:5441   */\n      tag_210\n      jump\t// in\n    tag_230:\n        /* \"#utility.yul\":5286:5441   */\n      swap2\n      pop\n        /* \"#utility.yul\":5458:5553   */\n      tag_231\n        /* \"#utility.yul\":5549:5552   */\n      dup3\n        /* \"#utility.yul\":5540:5546   */\n      dup6\n        /* \"#utility.yul\":5458:5553   */\n      tag_199\n      jump\t// in\n    tag_231:\n        /* \"#utility.yul\":5451:5553   */\n      swap2\n      pop\n        /* \"#utility.yul\":5570:5718   */\n      tag_232\n        /* \"#utility.yul\":5714:5717   */\n      dup3\n        /* \"#utility.yul\":5570:5718   */\n      tag_215\n      jump\t// in\n    tag_232:\n        /* \"#utility.yul\":5563:5718   */\n      swap2\n      pop\n        /* \"#utility.yul\":5735:5830   */\n      tag_233\n        /* \"#utility.yul\":5826:5829   */\n      dup3\n        /* \"#utility.yul\":5817:5823   */\n      dup5\n        /* \"#utility.yul\":5735:5830   */\n      tag_199\n      jump\t// in\n    tag_233:\n        /* \"#utility.yul\":5728:5830   */\n      swap2\n      pop\n        /* \"#utility.yul\":5847:5850   */\n      dup2\n        /* \"#utility.yul\":5840:5850   */\n      swap1\n      pop\n        /* \"#utility.yul\":4889:5856   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5862:6072   */\n    tag_19:\n        /* \"#utility.yul\":5949:5953   */\n      0x00\n        /* \"#utility.yul\":5987:5989   */\n      0x20\n        /* \"#utility.yul\":5976:5985   */\n      dup3\n        /* \"#utility.yul\":5972:5990   */\n      add\n        /* \"#utility.yul\":5964:5990   */\n      swap1\n      pop\n        /* \"#utility.yul\":6000:6065   */\n      tag_235\n        /* \"#utility.yul\":6062:6063   */\n      0x00\n        /* \"#utility.yul\":6051:6060   */\n      dup4\n        /* \"#utility.yul\":6047:6064   */\n      add\n        /* \"#utility.yul\":6038:6044   */\n      dup5\n        /* \"#utility.yul\":6000:6065   */\n      tag_181\n      jump\t// in\n    tag_235:\n        /* \"#utility.yul\":5862:6072   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6078:6300   */\n    tag_25:\n        /* \"#utility.yul\":6171:6175   */\n      0x00\n        /* \"#utility.yul\":6209:6211   */\n      0x20\n        /* \"#utility.yul\":6198:6207   */\n      dup3\n        /* \"#utility.yul\":6194:6212   */\n      add\n        /* \"#utility.yul\":6186:6212   */\n      swap1\n      pop\n        /* \"#utility.yul\":6222:6293   */\n      tag_237\n        /* \"#utility.yul\":6290:6291   */\n      0x00\n        /* \"#utility.yul\":6279:6288   */\n      dup4\n        /* \"#utility.yul\":6275:6292   */\n      add\n        /* \"#utility.yul\":6266:6272   */\n      dup5\n        /* \"#utility.yul\":6222:6293   */\n      tag_185\n      jump\t// in\n    tag_237:\n        /* \"#utility.yul\":6078:6300   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6306:6619   */\n    tag_116:\n        /* \"#utility.yul\":6419:6423   */\n      0x00\n        /* \"#utility.yul\":6457:6459   */\n      0x20\n        /* \"#utility.yul\":6446:6455   */\n      dup3\n        /* \"#utility.yul\":6442:6460   */\n      add\n        /* \"#utility.yul\":6434:6460   */\n      swap1\n      pop\n        /* \"#utility.yul\":6506:6515   */\n      dup2\n        /* \"#utility.yul\":6500:6504   */\n      dup2\n        /* \"#utility.yul\":6496:6516   */\n      sub\n        /* \"#utility.yul\":6492:6493   */\n      0x00\n        /* \"#utility.yul\":6481:6490   */\n      dup4\n        /* \"#utility.yul\":6477:6494   */\n      add\n        /* \"#utility.yul\":6470:6517   */\n      mstore\n        /* \"#utility.yul\":6534:6612   */\n      tag_239\n        /* \"#utility.yul\":6607:6611   */\n      dup2\n        /* \"#utility.yul\":6598:6604   */\n      dup5\n        /* \"#utility.yul\":6534:6612   */\n      tag_189\n      jump\t// in\n    tag_239:\n        /* \"#utility.yul\":6526:6612   */\n      swap1\n      pop\n        /* \"#utility.yul\":6306:6619   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6625:7044   */\n    tag_144:\n        /* \"#utility.yul\":6791:6795   */\n      0x00\n        /* \"#utility.yul\":6829:6831   */\n      0x20\n        /* \"#utility.yul\":6818:6827   */\n      dup3\n        /* \"#utility.yul\":6814:6832   */\n      add\n        /* \"#utility.yul\":6806:6832   */\n      swap1\n      pop\n        /* \"#utility.yul\":6878:6887   */\n      dup2\n        /* \"#utility.yul\":6872:6876   */\n      dup2\n        /* \"#utility.yul\":6868:6888   */\n      sub\n        /* \"#utility.yul\":6864:6865   */\n      0x00\n        /* \"#utility.yul\":6853:6862   */\n      dup4\n        /* \"#utility.yul\":6849:6866   */\n      add\n        /* \"#utility.yul\":6842:6889   */\n      mstore\n        /* \"#utility.yul\":6906:7037   */\n      tag_241\n        /* \"#utility.yul\":7032:7036   */\n      dup2\n        /* \"#utility.yul\":6906:7037   */\n      tag_205\n      jump\t// in\n    tag_241:\n        /* \"#utility.yul\":6898:7037   */\n      swap1\n      pop\n        /* \"#utility.yul\":6625:7044   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7050:7469   */\n    tag_73:\n        /* \"#utility.yul\":7216:7220   */\n      0x00\n        /* \"#utility.yul\":7254:7256   */\n      0x20\n        /* \"#utility.yul\":7243:7252   */\n      dup3\n        /* \"#utility.yul\":7239:7257   */\n      add\n        /* \"#utility.yul\":7231:7257   */\n      swap1\n      pop\n        /* \"#utility.yul\":7303:7312   */\n      dup2\n        /* \"#utility.yul\":7297:7301   */\n      dup2\n        /* \"#utility.yul\":7293:7313   */\n      sub\n        /* \"#utility.yul\":7289:7290   */\n      0x00\n        /* \"#utility.yul\":7278:7287   */\n      dup4\n        /* \"#utility.yul\":7274:7291   */\n      add\n        /* \"#utility.yul\":7267:7314   */\n      mstore\n        /* \"#utility.yul\":7331:7462   */\n      tag_243\n        /* \"#utility.yul\":7457:7461   */\n      dup2\n        /* \"#utility.yul\":7331:7462   */\n      tag_220\n      jump\t// in\n    tag_243:\n        /* \"#utility.yul\":7323:7462   */\n      swap1\n      pop\n        /* \"#utility.yul\":7050:7469   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7475:7697   */\n    tag_48:\n        /* \"#utility.yul\":7568:7572   */\n      0x00\n        /* \"#utility.yul\":7606:7608   */\n      0x20\n        /* \"#utility.yul\":7595:7604   */\n      dup3\n        /* \"#utility.yul\":7591:7609   */\n      add\n        /* \"#utility.yul\":7583:7609   */\n      swap1\n      pop\n        /* \"#utility.yul\":7619:7690   */\n      tag_245\n        /* \"#utility.yul\":7687:7688   */\n      0x00\n        /* \"#utility.yul\":7676:7685   */\n      dup4\n        /* \"#utility.yul\":7672:7689   */\n      add\n        /* \"#utility.yul\":7663:7669   */\n      dup5\n        /* \"#utility.yul\":7619:7690   */\n      tag_225\n      jump\t// in\n    tag_245:\n        /* \"#utility.yul\":7475:7697   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7784:7883   */\n    tag_192:\n        /* \"#utility.yul\":7836:7842   */\n      0x00\n        /* \"#utility.yul\":7870:7875   */\n      dup2\n        /* \"#utility.yul\":7864:7876   */\n      mload\n        /* \"#utility.yul\":7854:7876   */\n      swap1\n      pop\n        /* \"#utility.yul\":7784:7883   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7889:8058   */\n    tag_194:\n        /* \"#utility.yul\":7973:7984   */\n      0x00\n        /* \"#utility.yul\":8007:8013   */\n      dup3\n        /* \"#utility.yul\":8002:8005   */\n      dup3\n        /* \"#utility.yul\":7995:8014   */\n      mstore\n        /* \"#utility.yul\":8047:8051   */\n      0x20\n        /* \"#utility.yul\":8042:8045   */\n      dup3\n        /* \"#utility.yul\":8038:8052   */\n      add\n        /* \"#utility.yul\":8023:8052   */\n      swap1\n      pop\n        /* \"#utility.yul\":7889:8058   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8064:8212   */\n    tag_203:\n        /* \"#utility.yul\":8166:8177   */\n      0x00\n        /* \"#utility.yul\":8203:8206   */\n      dup2\n        /* \"#utility.yul\":8188:8206   */\n      swap1\n      pop\n        /* \"#utility.yul\":8064:8212   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8218:8523   */\n    tag_81:\n        /* \"#utility.yul\":8258:8261   */\n      0x00\n        /* \"#utility.yul\":8277:8297   */\n      tag_252\n        /* \"#utility.yul\":8295:8296   */\n      dup3\n        /* \"#utility.yul\":8277:8297   */\n      tag_228\n      jump\t// in\n    tag_252:\n        /* \"#utility.yul\":8272:8297   */\n      swap2\n      pop\n        /* \"#utility.yul\":8311:8331   */\n      tag_253\n        /* \"#utility.yul\":8329:8330   */\n      dup4\n        /* \"#utility.yul\":8311:8331   */\n      tag_228\n      jump\t// in\n    tag_253:\n        /* \"#utility.yul\":8306:8331   */\n      swap3\n      pop\n        /* \"#utility.yul\":8465:8466   */\n      dup3\n        /* \"#utility.yul\":8397:8463   */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":8393:8467   */\n      sub\n        /* \"#utility.yul\":8390:8391   */\n      dup3\n        /* \"#utility.yul\":8387:8468   */\n      gt\n        /* \"#utility.yul\":8384:8491   */\n      iszero\n      tag_254\n      jumpi\n        /* \"#utility.yul\":8471:8489   */\n      tag_255\n      tag_256\n      jump\t// in\n    tag_255:\n        /* \"#utility.yul\":8384:8491   */\n    tag_254:\n        /* \"#utility.yul\":8515:8516   */\n      dup3\n        /* \"#utility.yul\":8512:8513   */\n      dup3\n        /* \"#utility.yul\":8508:8517   */\n      add\n        /* \"#utility.yul\":8501:8517   */\n      swap1\n      pop\n        /* \"#utility.yul\":8218:8523   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8529:8877   */\n    tag_91:\n        /* \"#utility.yul\":8569:8576   */\n      0x00\n        /* \"#utility.yul\":8592:8612   */\n      tag_258\n        /* \"#utility.yul\":8610:8611   */\n      dup3\n        /* \"#utility.yul\":8592:8612   */\n      tag_228\n      jump\t// in\n    tag_258:\n        /* \"#utility.yul\":8587:8612   */\n      swap2\n      pop\n        /* \"#utility.yul\":8626:8646   */\n      tag_259\n        /* \"#utility.yul\":8644:8645   */\n      dup4\n        /* \"#utility.yul\":8626:8646   */\n      tag_228\n      jump\t// in\n    tag_259:\n        /* \"#utility.yul\":8621:8646   */\n      swap3\n      pop\n        /* \"#utility.yul\":8814:8815   */\n      dup2\n        /* \"#utility.yul\":8746:8812   */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":8742:8816   */\n      div\n        /* \"#utility.yul\":8739:8740   */\n      dup4\n        /* \"#utility.yul\":8736:8817   */\n      gt\n        /* \"#utility.yul\":8731:8732   */\n      dup3\n        /* \"#utility.yul\":8724:8733   */\n      iszero\n        /* \"#utility.yul\":8717:8734   */\n      iszero\n        /* \"#utility.yul\":8713:8818   */\n      and\n        /* \"#utility.yul\":8710:8841   */\n      iszero\n      tag_260\n      jumpi\n        /* \"#utility.yul\":8821:8839   */\n      tag_261\n      tag_256\n      jump\t// in\n    tag_261:\n        /* \"#utility.yul\":8710:8841   */\n    tag_260:\n        /* \"#utility.yul\":8869:8870   */\n      dup3\n        /* \"#utility.yul\":8866:8867   */\n      dup3\n        /* \"#utility.yul\":8862:8871   */\n      mul\n        /* \"#utility.yul\":8851:8871   */\n      swap1\n      pop\n        /* \"#utility.yul\":8529:8877   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8883:8979   */\n    tag_262:\n        /* \"#utility.yul\":8920:8927   */\n      0x00\n        /* \"#utility.yul\":8949:8973   */\n      tag_264\n        /* \"#utility.yul\":8967:8972   */\n      dup3\n        /* \"#utility.yul\":8949:8973   */\n      tag_265\n      jump\t// in\n    tag_264:\n        /* \"#utility.yul\":8938:8973   */\n      swap1\n      pop\n        /* \"#utility.yul\":8883:8979   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8985:9075   */\n    tag_184:\n        /* \"#utility.yul\":9019:9026   */\n      0x00\n        /* \"#utility.yul\":9062:9067   */\n      dup2\n        /* \"#utility.yul\":9055:9068   */\n      iszero\n        /* \"#utility.yul\":9048:9069   */\n      iszero\n        /* \"#utility.yul\":9037:9069   */\n      swap1\n      pop\n        /* \"#utility.yul\":8985:9075   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9081:9158   */\n    tag_188:\n        /* \"#utility.yul\":9118:9125   */\n      0x00\n        /* \"#utility.yul\":9147:9152   */\n      dup2\n        /* \"#utility.yul\":9136:9152   */\n      swap1\n      pop\n        /* \"#utility.yul\":9081:9158   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9164:9313   */\n    tag_268:\n        /* \"#utility.yul\":9200:9207   */\n      0x00\n        /* \"#utility.yul\":9240:9306   */\n      0xffffffff00000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":9233:9238   */\n      dup3\n        /* \"#utility.yul\":9229:9307   */\n      and\n        /* \"#utility.yul\":9218:9307   */\n      swap1\n      pop\n        /* \"#utility.yul\":9164:9313   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9319:9445   */\n    tag_265:\n        /* \"#utility.yul\":9356:9363   */\n      0x00\n        /* \"#utility.yul\":9396:9438   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":9389:9394   */\n      dup3\n        /* \"#utility.yul\":9385:9439   */\n      and\n        /* \"#utility.yul\":9374:9439   */\n      swap1\n      pop\n        /* \"#utility.yul\":9319:9445   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9451:9528   */\n    tag_228:\n        /* \"#utility.yul\":9488:9495   */\n      0x00\n        /* \"#utility.yul\":9517:9522   */\n      dup2\n        /* \"#utility.yul\":9506:9522   */\n      swap1\n      pop\n        /* \"#utility.yul\":9451:9528   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9534:9841   */\n    tag_196:\n        /* \"#utility.yul\":9602:9603   */\n      0x00\n        /* \"#utility.yul\":9612:9725   */\n    tag_273:\n        /* \"#utility.yul\":9626:9632   */\n      dup4\n        /* \"#utility.yul\":9623:9624   */\n      dup2\n        /* \"#utility.yul\":9620:9633   */\n      lt\n        /* \"#utility.yul\":9612:9725   */\n      iszero\n      tag_275\n      jumpi\n        /* \"#utility.yul\":9711:9712   */\n      dup1\n        /* \"#utility.yul\":9706:9709   */\n      dup3\n        /* \"#utility.yul\":9702:9713   */\n      add\n        /* \"#utility.yul\":9696:9714   */\n      mload\n        /* \"#utility.yul\":9692:9693   */\n      dup2\n        /* \"#utility.yul\":9687:9690   */\n      dup5\n        /* \"#utility.yul\":9683:9694   */\n      add\n        /* \"#utility.yul\":9676:9715   */\n      mstore\n        /* \"#utility.yul\":9648:9650   */\n      0x20\n        /* \"#utility.yul\":9645:9646   */\n      dup2\n        /* \"#utility.yul\":9641:9651   */\n      add\n        /* \"#utility.yul\":9636:9651   */\n      swap1\n      pop\n        /* \"#utility.yul\":9612:9725   */\n      jump(tag_273)\n    tag_275:\n        /* \"#utility.yul\":9743:9749   */\n      dup4\n        /* \"#utility.yul\":9740:9741   */\n      dup2\n        /* \"#utility.yul\":9737:9750   */\n      gt\n        /* \"#utility.yul\":9734:9835   */\n      iszero\n      tag_276\n      jumpi\n        /* \"#utility.yul\":9823:9824   */\n      0x00\n        /* \"#utility.yul\":9814:9820   */\n      dup5\n        /* \"#utility.yul\":9809:9812   */\n      dup5\n        /* \"#utility.yul\":9805:9821   */\n      add\n        /* \"#utility.yul\":9798:9825   */\n      mstore\n        /* \"#utility.yul\":9734:9835   */\n    tag_276:\n        /* \"#utility.yul\":9583:9841   */\n      pop\n        /* \"#utility.yul\":9534:9841   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9847:10018   */\n    tag_141:\n        /* \"#utility.yul\":9886:9889   */\n      0x00\n        /* \"#utility.yul\":9909:9933   */\n      tag_278\n        /* \"#utility.yul\":9927:9932   */\n      dup3\n        /* \"#utility.yul\":9909:9933   */\n      tag_228\n      jump\t// in\n    tag_278:\n        /* \"#utility.yul\":9900:9933   */\n      swap2\n      pop\n        /* \"#utility.yul\":9955:9959   */\n      0x00\n        /* \"#utility.yul\":9948:9953   */\n      dup3\n        /* \"#utility.yul\":9945:9960   */\n      eq\n        /* \"#utility.yul\":9942:9983   */\n      iszero\n      tag_279\n      jumpi\n        /* \"#utility.yul\":9963:9981   */\n      tag_280\n      tag_256\n      jump\t// in\n    tag_280:\n        /* \"#utility.yul\":9942:9983   */\n    tag_279:\n        /* \"#utility.yul\":10010:10011   */\n      0x01\n        /* \"#utility.yul\":10003:10008   */\n      dup3\n        /* \"#utility.yul\":9999:10012   */\n      sub\n        /* \"#utility.yul\":9992:10012   */\n      swap1\n      pop\n        /* \"#utility.yul\":9847:10018   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10024:10204   */\n    tag_256:\n        /* \"#utility.yul\":10072:10149   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":10069:10070   */\n      0x00\n        /* \"#utility.yul\":10062:10150   */\n      mstore\n        /* \"#utility.yul\":10169:10173   */\n      0x11\n        /* \"#utility.yul\":10166:10167   */\n      0x04\n        /* \"#utility.yul\":10159:10174   */\n      mstore\n        /* \"#utility.yul\":10193:10197   */\n      0x24\n        /* \"#utility.yul\":10190:10191   */\n      0x00\n        /* \"#utility.yul\":10183:10198   */\n      revert\n        /* \"#utility.yul\":10210:10390   */\n    tag_128:\n        /* \"#utility.yul\":10258:10335   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":10255:10256   */\n      0x00\n        /* \"#utility.yul\":10248:10336   */\n      mstore\n        /* \"#utility.yul\":10355:10359   */\n      0x32\n        /* \"#utility.yul\":10352:10353   */\n      0x04\n        /* \"#utility.yul\":10345:10360   */\n      mstore\n        /* \"#utility.yul\":10379:10383   */\n      0x24\n        /* \"#utility.yul\":10376:10377   */\n      0x00\n        /* \"#utility.yul\":10369:10384   */\n      revert\n        /* \"#utility.yul\":10396:10576   */\n    tag_124:\n        /* \"#utility.yul\":10444:10521   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":10441:10442   */\n      0x00\n        /* \"#utility.yul\":10434:10522   */\n      mstore\n        /* \"#utility.yul\":10541:10545   */\n      0x41\n        /* \"#utility.yul\":10538:10539   */\n      0x04\n        /* \"#utility.yul\":10531:10546   */\n      mstore\n        /* \"#utility.yul\":10565:10569   */\n      0x24\n        /* \"#utility.yul\":10562:10563   */\n      0x00\n        /* \"#utility.yul\":10555:10570   */\n      revert\n        /* \"#utility.yul\":10705:10822   */\n    tag_165:\n        /* \"#utility.yul\":10814:10815   */\n      0x00\n        /* \"#utility.yul\":10811:10812   */\n      dup1\n        /* \"#utility.yul\":10804:10816   */\n      revert\n        /* \"#utility.yul\":10828:10930   */\n    tag_198:\n        /* \"#utility.yul\":10869:10875   */\n      0x00\n        /* \"#utility.yul\":10920:10922   */\n      0x1f\n        /* \"#utility.yul\":10916:10923   */\n      not\n        /* \"#utility.yul\":10911:10913   */\n      0x1f\n        /* \"#utility.yul\":10904:10909   */\n      dup4\n        /* \"#utility.yul\":10900:10914   */\n      add\n        /* \"#utility.yul\":10896:10924   */\n      and\n        /* \"#utility.yul\":10886:10924   */\n      swap1\n      pop\n        /* \"#utility.yul\":10828:10930   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10936:11118   */\n    tag_209:\n        /* \"#utility.yul\":11076:11110   */\n      0x537472696e67733a20686578206c656e67746820696e73756666696369656e74\n        /* \"#utility.yul\":11072:11073   */\n      0x00\n        /* \"#utility.yul\":11064:11070   */\n      dup3\n        /* \"#utility.yul\":11060:11074   */\n      add\n        /* \"#utility.yul\":11053:11111   */\n      mstore\n        /* \"#utility.yul\":10936:11118   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11124:11297   */\n    tag_214:\n        /* \"#utility.yul\":11264:11289   */\n      0x416363657373436f6e74726f6c3a206163636f756e7420000000000000000000\n        /* \"#utility.yul\":11260:11261   */\n      0x00\n        /* \"#utility.yul\":11252:11258   */\n      dup3\n        /* \"#utility.yul\":11248:11262   */\n      add\n        /* \"#utility.yul\":11241:11290   */\n      mstore\n        /* \"#utility.yul\":11124:11297   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11303:11470   */\n    tag_219:\n        /* \"#utility.yul\":11443:11462   */\n      0x206973206d697373696e6720726f6c6520000000000000000000000000000000\n        /* \"#utility.yul\":11439:11440   */\n      0x00\n        /* \"#utility.yul\":11431:11437   */\n      dup3\n        /* \"#utility.yul\":11427:11441   */\n      add\n        /* \"#utility.yul\":11420:11463   */\n      mstore\n        /* \"#utility.yul\":11303:11470   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11476:11710   */\n    tag_224:\n        /* \"#utility.yul\":11616:11650   */\n      0x416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e6365\n        /* \"#utility.yul\":11612:11613   */\n      0x00\n        /* \"#utility.yul\":11604:11610   */\n      dup3\n        /* \"#utility.yul\":11600:11614   */\n      add\n        /* \"#utility.yul\":11593:11651   */\n      mstore\n        /* \"#utility.yul\":11685:11702   */\n      0x20726f6c657320666f722073656c660000000000000000000000000000000000\n        /* \"#utility.yul\":11680:11682   */\n      0x20\n        /* \"#utility.yul\":11672:11678   */\n      dup3\n        /* \"#utility.yul\":11668:11683   */\n      add\n        /* \"#utility.yul\":11661:11703   */\n      mstore\n        /* \"#utility.yul\":11476:11710   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11716:11838   */\n    tag_149:\n        /* \"#utility.yul\":11789:11813   */\n      tag_293\n        /* \"#utility.yul\":11807:11812   */\n      dup2\n        /* \"#utility.yul\":11789:11813   */\n      tag_262\n      jump\t// in\n    tag_293:\n        /* \"#utility.yul\":11782:11787   */\n      dup2\n        /* \"#utility.yul\":11779:11814   */\n      eq\n        /* \"#utility.yul\":11769:11832   */\n      tag_294\n      jumpi\n        /* \"#utility.yul\":11828:11829   */\n      0x00\n        /* \"#utility.yul\":11825:11826   */\n      dup1\n        /* \"#utility.yul\":11818:11830   */\n      revert\n        /* \"#utility.yul\":11769:11832   */\n    tag_294:\n        /* \"#utility.yul\":11716:11838   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11844:11966   */\n    tag_153:\n        /* \"#utility.yul\":11917:11941   */\n      tag_296\n        /* \"#utility.yul\":11935:11940   */\n      dup2\n        /* \"#utility.yul\":11917:11941   */\n      tag_188\n      jump\t// in\n    tag_296:\n        /* \"#utility.yul\":11910:11915   */\n      dup2\n        /* \"#utility.yul\":11907:11942   */\n      eq\n        /* \"#utility.yul\":11897:11960   */\n      tag_297\n      jumpi\n        /* \"#utility.yul\":11956:11957   */\n      0x00\n        /* \"#utility.yul\":11953:11954   */\n      dup1\n        /* \"#utility.yul\":11946:11958   */\n      revert\n        /* \"#utility.yul\":11897:11960   */\n    tag_297:\n        /* \"#utility.yul\":11844:11966   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11972:12092   */\n    tag_157:\n        /* \"#utility.yul\":12044:12067   */\n      tag_299\n        /* \"#utility.yul\":12061:12066   */\n      dup2\n        /* \"#utility.yul\":12044:12067   */\n      tag_268\n      jump\t// in\n    tag_299:\n        /* \"#utility.yul\":12037:12042   */\n      dup2\n        /* \"#utility.yul\":12034:12068   */\n      eq\n        /* \"#utility.yul\":12024:12086   */\n      tag_300\n      jumpi\n        /* \"#utility.yul\":12082:12083   */\n      0x00\n        /* \"#utility.yul\":12079:12080   */\n      dup1\n        /* \"#utility.yul\":12072:12084   */\n      revert\n        /* \"#utility.yul\":12024:12086   */\n    tag_300:\n        /* \"#utility.yul\":11972:12092   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12098:12220   */\n    tag_161:\n        /* \"#utility.yul\":12171:12195   */\n      tag_302\n        /* \"#utility.yul\":12189:12194   */\n      dup2\n        /* \"#utility.yul\":12171:12195   */\n      tag_228\n      jump\t// in\n    tag_302:\n        /* \"#utility.yul\":12164:12169   */\n      dup2\n        /* \"#utility.yul\":12161:12196   */\n      eq\n        /* \"#utility.yul\":12151:12214   */\n      tag_303\n      jumpi\n        /* \"#utility.yul\":12210:12211   */\n      0x00\n        /* \"#utility.yul\":12207:12208   */\n      dup1\n        /* \"#utility.yul\":12200:12212   */\n      revert\n        /* \"#utility.yul\":12151:12214   */\n    tag_303:\n        /* \"#utility.yul\":12098:12220   */\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220b94fca4e4406cf71f361b15d40c817cb89e8862953026473bae9bcfd2ca76a3464736f6c63430008070033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_19": {
									"entryPoint": null,
									"id": 19,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_grantRole_338": {
									"entryPoint": 41,
									"id": 338,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_msgSender_455": {
									"entryPoint": 383,
									"id": 455,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@hasRole_134": {
									"entryPoint": 277,
									"id": 134,
									"parameterSlots": 2,
									"returnSlots": 1
								}
							},
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b506100246000801b3361002960201b60201c565b610187565b610039828261011560201b60201c565b61011157600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506100b661017f60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b61109f806101966000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806391d148541161006657806391d1485414610159578063a217fddf14610189578063b137050d146101a7578063d547741f146101d7578063e01c3119146101f35761009e565b806301ffc9a7146100a3578063248a9ca3146100d35780632f2ff15d1461010357806336568abe1461011f578063426dbd9c1461013b575b600080fd5b6100bd60048036038101906100b89190610a71565b610223565b6040516100ca9190610c3b565b60405180910390f35b6100ed60048036038101906100e89190610a04565b61029d565b6040516100fa9190610c56565b60405180910390f35b61011d60048036038101906101189190610a31565b6102bc565b005b61013960048036038101906101349190610a31565b6102dd565b005b610143610360565b6040516101509190610c56565b60405180910390f35b610173600480360381019061016e9190610a31565b610384565b6040516101809190610c3b565b60405180910390f35b6101916103ee565b60405161019e9190610c56565b60405180910390f35b6101c160048036038101906101bc9190610a9e565b6103f5565b6040516101ce9190610cd3565b60405180910390f35b6101f160048036038101906101ec9190610a31565b610419565b005b61020d60048036038101906102089190610a9e565b61043a565b60405161021a9190610cd3565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061029657506102958261047b565b5b9050919050565b6000806000838152602001908152602001600020600101549050919050565b6102c58261029d565b6102ce816104e5565b6102d883836104f9565b505050565b6102e56105d9565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610352576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034990610cb3565b60405180910390fd5b61035c82826105e1565b5050565b7f0d08ba49c85b8f4efedcab2f953c61f86e8944d3d6185fd4fa77665e1274cfc481565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b60008060001b610404816104e5565b82846104109190610d15565b91505092915050565b6104228261029d565b61042b816104e5565b61043583836105e1565b505050565b60007f0d08ba49c85b8f4efedcab2f953c61f86e8944d3d6185fd4fa77665e1274cfc4610466816104e5565b82846104729190610d6b565b91505092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6104f6816104f16105d9565b6106c2565b50565b6105038282610384565b6105d557600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061057a6105d9565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600033905090565b6105eb8282610384565b156106be57600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506106636105d9565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6106cc8282610384565b610743576106d981610747565b6106e78360001c6020610774565b6040516020016106f8929190610c01565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073a9190610c71565b60405180910390fd5b5050565b606061076d8273ffffffffffffffffffffffffffffffffffffffff16601460ff16610774565b9050919050565b6060600060028360026107879190610d6b565b6107919190610d15565b67ffffffffffffffff8111156107aa576107a9610efe565b5b6040519080825280601f01601f1916602001820160405280156107dc5781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061081457610813610ecf565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061087857610877610ecf565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026108b89190610d6b565b6108c29190610d15565b90505b6001811115610962577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061090457610903610ecf565b5b1a60f81b82828151811061091b5761091a610ecf565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061095b90610e76565b90506108c5565b50600084146109a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099d90610c93565b60405180910390fd5b8091505092915050565b6000813590506109bf8161100d565b92915050565b6000813590506109d481611024565b92915050565b6000813590506109e98161103b565b92915050565b6000813590506109fe81611052565b92915050565b600060208284031215610a1a57610a19610f2d565b5b6000610a28848285016109c5565b91505092915050565b60008060408385031215610a4857610a47610f2d565b5b6000610a56858286016109c5565b9250506020610a67858286016109b0565b9150509250929050565b600060208284031215610a8757610a86610f2d565b5b6000610a95848285016109da565b91505092915050565b60008060408385031215610ab557610ab4610f2d565b5b6000610ac3858286016109ef565b9250506020610ad4858286016109ef565b9150509250929050565b610ae781610dd7565b82525050565b610af681610de3565b82525050565b6000610b0782610cee565b610b118185610cf9565b9350610b21818560208601610e43565b610b2a81610f32565b840191505092915050565b6000610b4082610cee565b610b4a8185610d0a565b9350610b5a818560208601610e43565b80840191505092915050565b6000610b73602083610cf9565b9150610b7e82610f43565b602082019050919050565b6000610b96601783610d0a565b9150610ba182610f6c565b601782019050919050565b6000610bb9601183610d0a565b9150610bc482610f95565b601182019050919050565b6000610bdc602f83610cf9565b9150610be782610fbe565b604082019050919050565b610bfb81610e39565b82525050565b6000610c0c82610b89565b9150610c188285610b35565b9150610c2382610bac565b9150610c2f8284610b35565b91508190509392505050565b6000602082019050610c506000830184610ade565b92915050565b6000602082019050610c6b6000830184610aed565b92915050565b60006020820190508181036000830152610c8b8184610afc565b905092915050565b60006020820190508181036000830152610cac81610b66565b9050919050565b60006020820190508181036000830152610ccc81610bcf565b9050919050565b6000602082019050610ce86000830184610bf2565b92915050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000610d2082610e39565b9150610d2b83610e39565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d6057610d5f610ea0565b5b828201905092915050565b6000610d7682610e39565b9150610d8183610e39565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610dba57610db9610ea0565b5b828202905092915050565b6000610dd082610e19565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015610e61578082015181840152602081019050610e46565b83811115610e70576000848401525b50505050565b6000610e8182610e39565b91506000821415610e9557610e94610ea0565b5b600182039050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b61101681610dc5565b811461102157600080fd5b50565b61102d81610de3565b811461103857600080fd5b50565b61104481610ded565b811461104f57600080fd5b50565b61105b81610e39565b811461106657600080fd5b5056fea2646970667358221220b94fca4e4406cf71f361b15d40c817cb89e8862953026473bae9bcfd2ca76a3464736f6c63430008070033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24 PUSH1 0x0 DUP1 SHL CALLER PUSH2 0x29 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH2 0x187 JUMP JUMPDEST PUSH2 0x39 DUP3 DUP3 PUSH2 0x115 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH2 0x111 JUMPI PUSH1 0x1 PUSH1 0x0 DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0xB6 PUSH2 0x17F PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x109F DUP1 PUSH2 0x196 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x91D14854 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x159 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x189 JUMPI DUP1 PUSH4 0xB137050D EQ PUSH2 0x1A7 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x1D7 JUMPI DUP1 PUSH4 0xE01C3119 EQ PUSH2 0x1F3 JUMPI PUSH2 0x9E JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xA3 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0xD3 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x103 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x11F JUMPI DUP1 PUSH4 0x426DBD9C EQ PUSH2 0x13B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0xA71 JUMP JUMPDEST PUSH2 0x223 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCA SWAP2 SWAP1 PUSH2 0xC3B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xED PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE8 SWAP2 SWAP1 PUSH2 0xA04 JUMP JUMPDEST PUSH2 0x29D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFA SWAP2 SWAP1 PUSH2 0xC56 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x11D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x118 SWAP2 SWAP1 PUSH2 0xA31 JUMP JUMPDEST PUSH2 0x2BC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x139 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x134 SWAP2 SWAP1 PUSH2 0xA31 JUMP JUMPDEST PUSH2 0x2DD JUMP JUMPDEST STOP JUMPDEST PUSH2 0x143 PUSH2 0x360 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x150 SWAP2 SWAP1 PUSH2 0xC56 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x173 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x16E SWAP2 SWAP1 PUSH2 0xA31 JUMP JUMPDEST PUSH2 0x384 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x180 SWAP2 SWAP1 PUSH2 0xC3B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x191 PUSH2 0x3EE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x19E SWAP2 SWAP1 PUSH2 0xC56 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1C1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BC SWAP2 SWAP1 PUSH2 0xA9E JUMP JUMPDEST PUSH2 0x3F5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CE SWAP2 SWAP1 PUSH2 0xCD3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EC SWAP2 SWAP1 PUSH2 0xA31 JUMP JUMPDEST PUSH2 0x419 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x20D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x208 SWAP2 SWAP1 PUSH2 0xA9E JUMP JUMPDEST PUSH2 0x43A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21A SWAP2 SWAP1 PUSH2 0xCD3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x7965DB0B00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x296 JUMPI POP PUSH2 0x295 DUP3 PUSH2 0x47B JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2C5 DUP3 PUSH2 0x29D JUMP JUMPDEST PUSH2 0x2CE DUP2 PUSH2 0x4E5 JUMP JUMPDEST PUSH2 0x2D8 DUP4 DUP4 PUSH2 0x4F9 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x2E5 PUSH2 0x5D9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x352 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x349 SWAP1 PUSH2 0xCB3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x35C DUP3 DUP3 PUSH2 0x5E1 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH32 0xD08BA49C85B8F4EFEDCAB2F953C61F86E8944D3D6185FD4FA77665E1274CFC4 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SHL DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SHL PUSH2 0x404 DUP2 PUSH2 0x4E5 JUMP JUMPDEST DUP3 DUP5 PUSH2 0x410 SWAP2 SWAP1 PUSH2 0xD15 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x422 DUP3 PUSH2 0x29D JUMP JUMPDEST PUSH2 0x42B DUP2 PUSH2 0x4E5 JUMP JUMPDEST PUSH2 0x435 DUP4 DUP4 PUSH2 0x5E1 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xD08BA49C85B8F4EFEDCAB2F953C61F86E8944D3D6185FD4FA77665E1274CFC4 PUSH2 0x466 DUP2 PUSH2 0x4E5 JUMP JUMPDEST DUP3 DUP5 PUSH2 0x472 SWAP2 SWAP1 PUSH2 0xD6B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4F6 DUP2 PUSH2 0x4F1 PUSH2 0x5D9 JUMP JUMPDEST PUSH2 0x6C2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x503 DUP3 DUP3 PUSH2 0x384 JUMP JUMPDEST PUSH2 0x5D5 JUMPI PUSH1 0x1 PUSH1 0x0 DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x57A PUSH2 0x5D9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x5EB DUP3 DUP3 PUSH2 0x384 JUMP JUMPDEST ISZERO PUSH2 0x6BE JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x663 PUSH2 0x5D9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x6CC DUP3 DUP3 PUSH2 0x384 JUMP JUMPDEST PUSH2 0x743 JUMPI PUSH2 0x6D9 DUP2 PUSH2 0x747 JUMP JUMPDEST PUSH2 0x6E7 DUP4 PUSH1 0x0 SHR PUSH1 0x20 PUSH2 0x774 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x6F8 SWAP3 SWAP2 SWAP1 PUSH2 0xC01 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x73A SWAP2 SWAP1 PUSH2 0xC71 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x76D DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x14 PUSH1 0xFF AND PUSH2 0x774 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x2 DUP4 PUSH1 0x2 PUSH2 0x787 SWAP2 SWAP1 PUSH2 0xD6B JUMP JUMPDEST PUSH2 0x791 SWAP2 SWAP1 PUSH2 0xD15 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x7AA JUMPI PUSH2 0x7A9 PUSH2 0xEFE JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x7DC JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x814 JUMPI PUSH2 0x813 PUSH2 0xECF JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH32 0x7800000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x878 JUMPI PUSH2 0x877 PUSH2 0xECF JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH1 0x1 DUP5 PUSH1 0x2 PUSH2 0x8B8 SWAP2 SWAP1 PUSH2 0xD6B JUMP JUMPDEST PUSH2 0x8C2 SWAP2 SWAP1 PUSH2 0xD15 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x962 JUMPI PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xF DUP7 AND PUSH1 0x10 DUP2 LT PUSH2 0x904 JUMPI PUSH2 0x903 PUSH2 0xECF JUMP JUMPDEST JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x91B JUMPI PUSH2 0x91A PUSH2 0xECF JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 DUP6 SWAP1 SHR SWAP5 POP DUP1 PUSH2 0x95B SWAP1 PUSH2 0xE76 JUMP JUMPDEST SWAP1 POP PUSH2 0x8C5 JUMP JUMPDEST POP PUSH1 0x0 DUP5 EQ PUSH2 0x9A6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x99D SWAP1 PUSH2 0xC93 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x9BF DUP2 PUSH2 0x100D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x9D4 DUP2 PUSH2 0x1024 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x9E9 DUP2 PUSH2 0x103B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x9FE DUP2 PUSH2 0x1052 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA1A JUMPI PUSH2 0xA19 PUSH2 0xF2D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xA28 DUP5 DUP3 DUP6 ADD PUSH2 0x9C5 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA48 JUMPI PUSH2 0xA47 PUSH2 0xF2D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xA56 DUP6 DUP3 DUP7 ADD PUSH2 0x9C5 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xA67 DUP6 DUP3 DUP7 ADD PUSH2 0x9B0 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA87 JUMPI PUSH2 0xA86 PUSH2 0xF2D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xA95 DUP5 DUP3 DUP6 ADD PUSH2 0x9DA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xAB5 JUMPI PUSH2 0xAB4 PUSH2 0xF2D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xAC3 DUP6 DUP3 DUP7 ADD PUSH2 0x9EF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xAD4 DUP6 DUP3 DUP7 ADD PUSH2 0x9EF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0xAE7 DUP2 PUSH2 0xDD7 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xAF6 DUP2 PUSH2 0xDE3 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB07 DUP3 PUSH2 0xCEE JUMP JUMPDEST PUSH2 0xB11 DUP2 DUP6 PUSH2 0xCF9 JUMP JUMPDEST SWAP4 POP PUSH2 0xB21 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xE43 JUMP JUMPDEST PUSH2 0xB2A DUP2 PUSH2 0xF32 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB40 DUP3 PUSH2 0xCEE JUMP JUMPDEST PUSH2 0xB4A DUP2 DUP6 PUSH2 0xD0A JUMP JUMPDEST SWAP4 POP PUSH2 0xB5A DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xE43 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB73 PUSH1 0x20 DUP4 PUSH2 0xCF9 JUMP JUMPDEST SWAP2 POP PUSH2 0xB7E DUP3 PUSH2 0xF43 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB96 PUSH1 0x17 DUP4 PUSH2 0xD0A JUMP JUMPDEST SWAP2 POP PUSH2 0xBA1 DUP3 PUSH2 0xF6C JUMP JUMPDEST PUSH1 0x17 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBB9 PUSH1 0x11 DUP4 PUSH2 0xD0A JUMP JUMPDEST SWAP2 POP PUSH2 0xBC4 DUP3 PUSH2 0xF95 JUMP JUMPDEST PUSH1 0x11 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBDC PUSH1 0x2F DUP4 PUSH2 0xCF9 JUMP JUMPDEST SWAP2 POP PUSH2 0xBE7 DUP3 PUSH2 0xFBE JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xBFB DUP2 PUSH2 0xE39 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC0C DUP3 PUSH2 0xB89 JUMP JUMPDEST SWAP2 POP PUSH2 0xC18 DUP3 DUP6 PUSH2 0xB35 JUMP JUMPDEST SWAP2 POP PUSH2 0xC23 DUP3 PUSH2 0xBAC JUMP JUMPDEST SWAP2 POP PUSH2 0xC2F DUP3 DUP5 PUSH2 0xB35 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC50 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xADE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC6B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xAED JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xC8B DUP2 DUP5 PUSH2 0xAFC JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xCAC DUP2 PUSH2 0xB66 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xCCC DUP2 PUSH2 0xBCF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xCE8 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xBF2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD20 DUP3 PUSH2 0xE39 JUMP JUMPDEST SWAP2 POP PUSH2 0xD2B DUP4 PUSH2 0xE39 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0xD60 JUMPI PUSH2 0xD5F PUSH2 0xEA0 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD76 DUP3 PUSH2 0xE39 JUMP JUMPDEST SWAP2 POP PUSH2 0xD81 DUP4 PUSH2 0xE39 JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0xDBA JUMPI PUSH2 0xDB9 PUSH2 0xEA0 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDD0 DUP3 PUSH2 0xE19 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xE61 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xE46 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xE70 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE81 DUP3 PUSH2 0xE39 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 EQ ISZERO PUSH2 0xE95 JUMPI PUSH2 0xE94 PUSH2 0xEA0 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 SUB SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH2 0x1016 DUP2 PUSH2 0xDC5 JUMP JUMPDEST DUP2 EQ PUSH2 0x1021 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x102D DUP2 PUSH2 0xDE3 JUMP JUMPDEST DUP2 EQ PUSH2 0x1038 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x1044 DUP2 PUSH2 0xDED JUMP JUMPDEST DUP2 EQ PUSH2 0x104F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x105B DUP2 PUSH2 0xE39 JUMP JUMPDEST DUP2 EQ PUSH2 0x1066 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB9 0x4F 0xCA 0x4E DIFFICULTY MOD 0xCF PUSH18 0xF361B15D40C817CB89E8862953026473BAE9 0xBC REVERT 0x2C 0xA7 PUSH11 0x3464736F6C634300080700 CALLER ",
							"sourceMap": "195:422:0:-:0;;;301:69;;;;;;;;;;323:41;2072:4:1;334:18:0;;353:10;323;;;:41;;:::i;:::-;195:422;;7461:233:1;7544:22;7552:4;7558:7;7544;;;:22;;:::i;:::-;7539:149;;7614:4;7582:6;:12;7589:4;7582:12;;;;;;;;;;;:20;;:29;7603:7;7582:29;;;;;;;;;;;;;;;;:36;;;;;;;;;;;;;;;;;;7664:12;:10;;;:12;;:::i;:::-;7637:40;;7655:7;7637:40;;7649:4;7637:40;;;;;;;;;;7539:149;7461:233;;:::o;2895:145::-;2981:4;3004:6;:12;3011:4;3004:12;;;;;;;;;;;:20;;:29;3025:7;3004:29;;;;;;;;;;;;;;;;;;;;;;;;;2997:36;;2895:145;;;;:::o;640:96:3:-;693:7;719:10;712:17;;640:96;:::o;195:422:0:-;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@DEFAULT_ADMIN_ROLE_82": {
									"entryPoint": 1006,
									"id": 82,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@WRITER_ROL_9": {
									"entryPoint": 864,
									"id": 9,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_checkRole_147": {
									"entryPoint": 1253,
									"id": 147,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_checkRole_186": {
									"entryPoint": 1730,
									"id": 186,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_grantRole_338": {
									"entryPoint": 1273,
									"id": 338,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_msgSender_455": {
									"entryPoint": 1497,
									"id": 455,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_revokeRole_369": {
									"entryPoint": 1505,
									"id": 369,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@getRoleAdmin_201": {
									"entryPoint": 669,
									"id": 201,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@grantRole_221": {
									"entryPoint": 700,
									"id": 221,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@hasRole_134": {
									"entryPoint": 900,
									"id": 134,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@renounceRole_264": {
									"entryPoint": 733,
									"id": 264,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@revokeRole_241": {
									"entryPoint": 1049,
									"id": 241,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@soloAdmin_36": {
									"entryPoint": 1013,
									"id": 36,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@soloWriter_53": {
									"entryPoint": 1082,
									"id": 53,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@supportsInterface_115": {
									"entryPoint": 547,
									"id": 115,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@supportsInterface_663": {
									"entryPoint": 1147,
									"id": 663,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@toHexString_619": {
									"entryPoint": 1908,
									"id": 619,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@toHexString_639": {
									"entryPoint": 1863,
									"id": 639,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_t_address": {
									"entryPoint": 2480,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bytes32": {
									"entryPoint": 2501,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bytes4": {
									"entryPoint": 2522,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256": {
									"entryPoint": 2543,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bytes32": {
									"entryPoint": 2564,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bytes32t_address": {
									"entryPoint": 2609,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_bytes4": {
									"entryPoint": 2673,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256t_uint256": {
									"entryPoint": 2718,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_t_bool_to_t_bool_fromStack": {
									"entryPoint": 2782,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bytes32_to_t_bytes32_fromStack": {
									"entryPoint": 2797,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 2812,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 2869,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 2918,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 2953,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 2988,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 3023,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_uint256_to_t_uint256_fromStack": {
									"entryPoint": 3058,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 3073,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": 3131,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
									"entryPoint": 3158,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 3185,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 3219,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 3251,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": 3283,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_length_t_string_memory_ptr": {
									"entryPoint": 3310,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
									"entryPoint": 3321,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 3338,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 3349,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 3435,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 3525,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bool": {
									"entryPoint": 3543,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bytes32": {
									"entryPoint": 3555,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bytes4": {
									"entryPoint": 3565,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 3609,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 3641,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_memory_to_memory": {
									"entryPoint": 3651,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"decrement_t_uint256": {
									"entryPoint": 3702,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 3744,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x32": {
									"entryPoint": 3791,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 3838,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 3885,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"round_up_to_mul_of_32": {
									"entryPoint": 3890,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2": {
									"entryPoint": 3907,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874": {
									"entryPoint": 3948,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69": {
									"entryPoint": 3989,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b": {
									"entryPoint": 4030,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 4109,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_bytes32": {
									"entryPoint": 4132,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_bytes4": {
									"entryPoint": 4155,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint256": {
									"entryPoint": 4178,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:12223:8",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "59:87:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "69:29:8",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "91:6:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "78:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "78:20:8"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "69:5:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "134:5:8"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "107:26:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "107:33:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "107:33:8"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "37:6:8",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "45:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "53:5:8",
														"type": ""
													}
												],
												"src": "7:139:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "204:87:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "214:29:8",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "236:6:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "223:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "223:20:8"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "214:5:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "279:5:8"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bytes32",
																	"nodeType": "YulIdentifier",
																	"src": "252:26:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "252:33:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "252:33:8"
														}
													]
												},
												"name": "abi_decode_t_bytes32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "182:6:8",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "190:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "198:5:8",
														"type": ""
													}
												],
												"src": "152:139:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "348:86:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "358:29:8",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "380:6:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "367:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "367:20:8"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "358:5:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "422:5:8"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bytes4",
																	"nodeType": "YulIdentifier",
																	"src": "396:25:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "396:32:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "396:32:8"
														}
													]
												},
												"name": "abi_decode_t_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "326:6:8",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "334:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "342:5:8",
														"type": ""
													}
												],
												"src": "297:137:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "492:87:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "502:29:8",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "524:6:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "511:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "511:20:8"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "502:5:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "567:5:8"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "540:26:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "540:33:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "540:33:8"
														}
													]
												},
												"name": "abi_decode_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "470:6:8",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "478:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "486:5:8",
														"type": ""
													}
												],
												"src": "440:139:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "651:263:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "697:83:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "699:77:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "699:79:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "699:79:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "672:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "681:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "668:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "668:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "693:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "664:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "664:32:8"
															},
															"nodeType": "YulIf",
															"src": "661:119:8"
														},
														{
															"nodeType": "YulBlock",
															"src": "790:117:8",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "805:15:8",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "819:1:8",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "809:6:8",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "834:63:8",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "869:9:8"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "880:6:8"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "865:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "865:22:8"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "889:7:8"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bytes32",
																			"nodeType": "YulIdentifier",
																			"src": "844:20:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "844:53:8"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "834:6:8"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "621:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "632:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "644:6:8",
														"type": ""
													}
												],
												"src": "585:329:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1003:391:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1049:83:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "1051:77:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1051:79:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1051:79:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1024:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1033:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1020:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1020:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1045:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1016:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1016:32:8"
															},
															"nodeType": "YulIf",
															"src": "1013:119:8"
														},
														{
															"nodeType": "YulBlock",
															"src": "1142:117:8",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1157:15:8",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1171:1:8",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1161:6:8",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1186:63:8",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1221:9:8"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1232:6:8"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1217:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1217:22:8"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1241:7:8"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bytes32",
																			"nodeType": "YulIdentifier",
																			"src": "1196:20:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1196:53:8"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1186:6:8"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1269:118:8",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1284:16:8",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1298:2:8",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1288:6:8",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1314:63:8",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1349:9:8"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1360:6:8"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1345:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1345:22:8"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1369:7:8"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "1324:20:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1324:53:8"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "1314:6:8"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes32t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "965:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "976:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "988:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "996:6:8",
														"type": ""
													}
												],
												"src": "920:474:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1465:262:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1511:83:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "1513:77:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1513:79:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1513:79:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1486:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1495:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1482:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1482:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1507:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1478:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1478:32:8"
															},
															"nodeType": "YulIf",
															"src": "1475:119:8"
														},
														{
															"nodeType": "YulBlock",
															"src": "1604:116:8",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1619:15:8",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1633:1:8",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1623:6:8",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1648:62:8",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1682:9:8"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1693:6:8"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1678:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1678:22:8"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1702:7:8"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bytes4",
																			"nodeType": "YulIdentifier",
																			"src": "1658:19:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1658:52:8"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1648:6:8"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1435:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1446:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1458:6:8",
														"type": ""
													}
												],
												"src": "1400:327:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1816:391:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1862:83:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "1864:77:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1864:79:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1864:79:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1837:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1846:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1833:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1833:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1858:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1829:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1829:32:8"
															},
															"nodeType": "YulIf",
															"src": "1826:119:8"
														},
														{
															"nodeType": "YulBlock",
															"src": "1955:117:8",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1970:15:8",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1984:1:8",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1974:6:8",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1999:63:8",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2034:9:8"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2045:6:8"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2030:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2030:22:8"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2054:7:8"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "2009:20:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2009:53:8"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1999:6:8"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "2082:118:8",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2097:16:8",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2111:2:8",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2101:6:8",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2127:63:8",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2162:9:8"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2173:6:8"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2158:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2158:22:8"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2182:7:8"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "2137:20:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2137:53:8"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "2127:6:8"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1778:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1789:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1801:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1809:6:8",
														"type": ""
													}
												],
												"src": "1733:474:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2272:50:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2289:3:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2309:5:8"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bool",
																			"nodeType": "YulIdentifier",
																			"src": "2294:14:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2294:21:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2282:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2282:34:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2282:34:8"
														}
													]
												},
												"name": "abi_encode_t_bool_to_t_bool_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2260:5:8",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "2267:3:8",
														"type": ""
													}
												],
												"src": "2213:109:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2393:53:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2410:3:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2433:5:8"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bytes32",
																			"nodeType": "YulIdentifier",
																			"src": "2415:17:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2415:24:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2403:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2403:37:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2403:37:8"
														}
													]
												},
												"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2381:5:8",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "2388:3:8",
														"type": ""
													}
												],
												"src": "2328:118:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2544:272:8",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2554:53:8",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2601:5:8"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "2568:32:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2568:39:8"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "2558:6:8",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2616:78:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2682:3:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2687:6:8"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "2623:58:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2623:71:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "2616:3:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2729:5:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2736:4:8",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2725:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2725:16:8"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2743:3:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2748:6:8"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "2703:21:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2703:52:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2703:52:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2764:46:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2775:3:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2802:6:8"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nodeType": "YulIdentifier",
																			"src": "2780:21:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2780:29:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2771:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2771:39:8"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "2764:3:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2525:5:8",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "2532:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "2540:3:8",
														"type": ""
													}
												],
												"src": "2452:364:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2932:267:8",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2942:53:8",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2989:5:8"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "2956:32:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2956:39:8"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "2946:6:8",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3004:96:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3088:3:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "3093:6:8"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "3011:76:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3011:89:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "3004:3:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3135:5:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3142:4:8",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3131:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3131:16:8"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3149:3:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "3154:6:8"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "3109:21:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3109:52:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3109:52:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3170:23:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3181:3:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "3186:6:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3177:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3177:16:8"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "3170:3:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2913:5:8",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "2920:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "2928:3:8",
														"type": ""
													}
												],
												"src": "2822:377:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3351:220:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3361:74:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3427:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3432:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "3368:58:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3368:67:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "3361:3:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3533:3:8"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
																	"nodeType": "YulIdentifier",
																	"src": "3444:88:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3444:93:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3444:93:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3546:19:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3557:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3562:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3553:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3553:12:8"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "3546:3:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3339:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "3347:3:8",
														"type": ""
													}
												],
												"src": "3205:366:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3741:238:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3751:92:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3835:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3840:2:8",
																		"type": "",
																		"value": "23"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "3758:76:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3758:85:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "3751:3:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3941:3:8"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874",
																	"nodeType": "YulIdentifier",
																	"src": "3852:88:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3852:93:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3852:93:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3954:19:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3965:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3970:2:8",
																		"type": "",
																		"value": "23"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3961:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3961:12:8"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "3954:3:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3729:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "3737:3:8",
														"type": ""
													}
												],
												"src": "3577:402:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4149:238:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4159:92:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4243:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4248:2:8",
																		"type": "",
																		"value": "17"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "4166:76:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4166:85:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "4159:3:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4349:3:8"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69",
																	"nodeType": "YulIdentifier",
																	"src": "4260:88:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4260:93:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4260:93:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4362:19:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4373:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4378:2:8",
																		"type": "",
																		"value": "17"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4369:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4369:12:8"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "4362:3:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "4137:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "4145:3:8",
														"type": ""
													}
												],
												"src": "3985:402:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4539:220:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4549:74:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4615:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4620:2:8",
																		"type": "",
																		"value": "47"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "4556:58:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4556:67:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "4549:3:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4721:3:8"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b",
																	"nodeType": "YulIdentifier",
																	"src": "4632:88:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4632:93:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4632:93:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4734:19:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4745:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4750:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4741:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4741:12:8"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "4734:3:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "4527:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "4535:3:8",
														"type": ""
													}
												],
												"src": "4393:366:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4830:53:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4847:3:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "4870:5:8"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "4852:17:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4852:24:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4840:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4840:37:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4840:37:8"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4818:5:8",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "4825:3:8",
														"type": ""
													}
												],
												"src": "4765:118:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5275:581:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5286:155:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5437:3:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "5293:142:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5293:148:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "5286:3:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5451:102:8",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5540:6:8"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5549:3:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "5458:81:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5458:95:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "5451:3:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5563:155:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5714:3:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "5570:142:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5570:148:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "5563:3:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5728:102:8",
															"value": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "5817:6:8"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5826:3:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "5735:81:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5735:95:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "5728:3:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5840:10:8",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "5847:3:8"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "5840:3:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "5246:3:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5252:6:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5260:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "5271:3:8",
														"type": ""
													}
												],
												"src": "4889:967:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5954:118:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5964:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5976:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5987:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5972:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5972:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5964:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "6038:6:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6051:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6062:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6047:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6047:17:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bool_to_t_bool_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6000:37:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6000:65:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6000:65:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5926:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5938:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5949:4:8",
														"type": ""
													}
												],
												"src": "5862:210:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6176:124:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6186:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6198:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6209:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6194:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6194:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6186:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "6266:6:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6279:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6290:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6275:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6275:17:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6222:43:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6222:71:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6222:71:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6148:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6160:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6171:4:8",
														"type": ""
													}
												],
												"src": "6078:222:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6424:195:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6434:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6446:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6457:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6442:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6442:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6434:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6481:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6492:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6477:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6477:17:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "6500:4:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6506:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "6496:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6496:20:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6470:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6470:47:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6470:47:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6526:86:8",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "6598:6:8"
																	},
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "6607:4:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6534:63:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6534:78:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6526:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6396:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6408:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6419:4:8",
														"type": ""
													}
												],
												"src": "6306:313:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6796:248:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6806:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6818:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6829:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6814:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6814:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6806:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6853:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6864:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6849:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6849:17:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "6872:4:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6878:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "6868:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6868:20:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6842:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6842:47:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6842:47:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6898:139:8",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "7032:4:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6906:124:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6906:131:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6898:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6776:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6791:4:8",
														"type": ""
													}
												],
												"src": "6625:419:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7221:248:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7231:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7243:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7254:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7239:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7239:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7231:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7278:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7289:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7274:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7274:17:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "7297:4:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7303:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "7293:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7293:20:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7267:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7267:47:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7267:47:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7323:139:8",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "7457:4:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7331:124:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7331:131:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7323:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7201:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7216:4:8",
														"type": ""
													}
												],
												"src": "7050:419:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7573:124:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7583:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7595:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7606:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7591:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7591:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7583:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "7663:6:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7676:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7687:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7672:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7672:17:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7619:43:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7619:71:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7619:71:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7545:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7557:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7568:4:8",
														"type": ""
													}
												],
												"src": "7475:222:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7743:35:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7753:19:8",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7769:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "7763:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7763:9:8"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "7753:6:8"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "7736:6:8",
														"type": ""
													}
												],
												"src": "7703:75:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7843:40:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7854:22:8",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "7870:5:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "7864:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7864:12:8"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "7854:6:8"
																}
															]
														}
													]
												},
												"name": "array_length_t_string_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "7826:5:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "7836:6:8",
														"type": ""
													}
												],
												"src": "7784:99:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7985:73:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8002:3:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "8007:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7995:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7995:19:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7995:19:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8023:29:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8042:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8047:4:8",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8038:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8038:14:8"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "8023:11:8"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "7957:3:8",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "7962:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "7973:11:8",
														"type": ""
													}
												],
												"src": "7889:169:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8178:34:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8188:18:8",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "8203:3:8"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "8188:11:8"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "8150:3:8",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "8155:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "8166:11:8",
														"type": ""
													}
												],
												"src": "8064:148:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8262:261:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8272:25:8",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "8295:1:8"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "8277:17:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8277:20:8"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "8272:1:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8306:25:8",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "8329:1:8"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "8311:17:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8311:20:8"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "8306:1:8"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8469:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "8471:16:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8471:18:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8471:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "8390:1:8"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8397:66:8",
																				"type": "",
																				"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "8465:1:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "8393:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8393:74:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "8387:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8387:81:8"
															},
															"nodeType": "YulIf",
															"src": "8384:107:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8501:16:8",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "8512:1:8"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "8515:1:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8508:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8508:9:8"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "8501:3:8"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "8249:1:8",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "8252:1:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "8258:3:8",
														"type": ""
													}
												],
												"src": "8218:305:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8577:300:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8587:25:8",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "8610:1:8"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "8592:17:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8592:20:8"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "8587:1:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8621:25:8",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "8644:1:8"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "8626:17:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8626:20:8"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "8621:1:8"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8819:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "8821:16:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8821:18:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8821:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "8731:1:8"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "8724:6:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8724:9:8"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "8717:6:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8717:17:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "8739:1:8"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8746:66:8",
																						"type": "",
																						"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																					},
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "8814:1:8"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "8742:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8742:74:8"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "8736:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8736:81:8"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "8713:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8713:105:8"
															},
															"nodeType": "YulIf",
															"src": "8710:131:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8851:20:8",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "8866:1:8"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "8869:1:8"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "8862:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8862:9:8"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "8851:7:8"
																}
															]
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "8560:1:8",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "8563:1:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "8569:7:8",
														"type": ""
													}
												],
												"src": "8529:348:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8928:51:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8938:35:8",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "8967:5:8"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "8949:17:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8949:24:8"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "8938:7:8"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "8910:5:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "8920:7:8",
														"type": ""
													}
												],
												"src": "8883:96:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9027:48:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9037:32:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "9062:5:8"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "9055:6:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9055:13:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "9048:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9048:21:8"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "9037:7:8"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "9009:5:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "9019:7:8",
														"type": ""
													}
												],
												"src": "8985:90:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9126:32:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9136:16:8",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "9147:5:8"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "9136:7:8"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bytes32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "9108:5:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "9118:7:8",
														"type": ""
													}
												],
												"src": "9081:77:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9208:105:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9218:89:8",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "9233:5:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9240:66:8",
																		"type": "",
																		"value": "0xffffffff00000000000000000000000000000000000000000000000000000000"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "9229:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9229:78:8"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "9218:7:8"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "9190:5:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "9200:7:8",
														"type": ""
													}
												],
												"src": "9164:149:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9364:81:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9374:65:8",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "9389:5:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9396:42:8",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "9385:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9385:54:8"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "9374:7:8"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "9346:5:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "9356:7:8",
														"type": ""
													}
												],
												"src": "9319:126:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9496:32:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9506:16:8",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "9517:5:8"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "9506:7:8"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "9478:5:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "9488:7:8",
														"type": ""
													}
												],
												"src": "9451:77:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9583:258:8",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "9593:10:8",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "9602:1:8",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "9597:1:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9662:63:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "9687:3:8"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "9692:1:8"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "9683:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "9683:11:8"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "9706:3:8"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "9711:1:8"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "9702:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "9702:11:8"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "9696:5:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "9696:18:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "9676:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9676:39:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9676:39:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "9623:1:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "9626:6:8"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "9620:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9620:13:8"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "9634:19:8",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "9636:15:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "9645:1:8"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "9648:2:8",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "9641:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9641:10:8"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "9636:1:8"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "9616:3:8",
																"statements": []
															},
															"src": "9612:113:8"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9759:76:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "9809:3:8"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "9814:6:8"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "9805:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "9805:16:8"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "9823:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "9798:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9798:27:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9798:27:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "9740:1:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "9743:6:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "9737:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9737:13:8"
															},
															"nodeType": "YulIf",
															"src": "9734:101:8"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "9565:3:8",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "9570:3:8",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "9575:6:8",
														"type": ""
													}
												],
												"src": "9534:307:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9890:128:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9900:33:8",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "9927:5:8"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "9909:17:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9909:24:8"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "9900:5:8"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9961:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "9963:16:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9963:18:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9963:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "9948:5:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9955:4:8",
																		"type": "",
																		"value": "0x00"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "9945:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9945:15:8"
															},
															"nodeType": "YulIf",
															"src": "9942:41:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9992:20:8",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "10003:5:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10010:1:8",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "9999:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9999:13:8"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "9992:3:8"
																}
															]
														}
													]
												},
												"name": "decrement_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "9876:5:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "9886:3:8",
														"type": ""
													}
												],
												"src": "9847:171:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10052:152:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10069:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10072:77:8",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10062:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10062:88:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10062:88:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10166:1:8",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10169:4:8",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10159:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10159:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10159:15:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10190:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10193:4:8",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "10183:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10183:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10183:15:8"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "10024:180:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10238:152:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10255:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10258:77:8",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10248:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10248:88:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10248:88:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10352:1:8",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10355:4:8",
																		"type": "",
																		"value": "0x32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10345:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10345:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10345:15:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10376:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10379:4:8",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "10369:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10369:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10369:15:8"
														}
													]
												},
												"name": "panic_error_0x32",
												"nodeType": "YulFunctionDefinition",
												"src": "10210:180:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10424:152:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10441:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10444:77:8",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10434:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10434:88:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10434:88:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10538:1:8",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10541:4:8",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10531:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10531:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10531:15:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10562:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10565:4:8",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "10555:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10555:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10555:15:8"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "10396:180:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10671:28:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10688:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10691:1:8",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "10681:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10681:12:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10681:12:8"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "10582:117:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10794:28:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10811:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10814:1:8",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "10804:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10804:12:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10804:12:8"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "10705:117:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10876:54:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10886:38:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "10904:5:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10911:2:8",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10900:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10900:14:8"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10920:2:8",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "10916:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10916:7:8"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "10896:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10896:28:8"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "10886:6:8"
																}
															]
														}
													]
												},
												"name": "round_up_to_mul_of_32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "10859:5:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nodeType": "YulTypedName",
														"src": "10869:6:8",
														"type": ""
													}
												],
												"src": "10828:102:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11042:76:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "11064:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11072:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11060:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11060:14:8"
																	},
																	{
																		"hexValue": "537472696e67733a20686578206c656e67746820696e73756666696369656e74",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11076:34:8",
																		"type": "",
																		"value": "Strings: hex length insufficient"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11053:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11053:58:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11053:58:8"
														}
													]
												},
												"name": "store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "11034:6:8",
														"type": ""
													}
												],
												"src": "10936:182:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11230:67:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "11252:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11260:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11248:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11248:14:8"
																	},
																	{
																		"hexValue": "416363657373436f6e74726f6c3a206163636f756e7420",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11264:25:8",
																		"type": "",
																		"value": "AccessControl: account "
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11241:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11241:49:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11241:49:8"
														}
													]
												},
												"name": "store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "11222:6:8",
														"type": ""
													}
												],
												"src": "11124:173:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11409:61:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "11431:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11439:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11427:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11427:14:8"
																	},
																	{
																		"hexValue": "206973206d697373696e6720726f6c6520",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11443:19:8",
																		"type": "",
																		"value": " is missing role "
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11420:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11420:43:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11420:43:8"
														}
													]
												},
												"name": "store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "11401:6:8",
														"type": ""
													}
												],
												"src": "11303:167:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11582:128:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "11604:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11612:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11600:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11600:14:8"
																	},
																	{
																		"hexValue": "416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11616:34:8",
																		"type": "",
																		"value": "AccessControl: can only renounce"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11593:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11593:58:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11593:58:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "11672:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11680:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11668:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11668:15:8"
																	},
																	{
																		"hexValue": "20726f6c657320666f722073656c66",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11685:17:8",
																		"type": "",
																		"value": " roles for self"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11661:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11661:42:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11661:42:8"
														}
													]
												},
												"name": "store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "11574:6:8",
														"type": ""
													}
												],
												"src": "11476:234:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11759:79:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "11816:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "11825:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "11828:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "11818:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11818:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "11818:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "11782:5:8"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "11807:5:8"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "11789:17:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "11789:24:8"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "11779:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11779:35:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "11772:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11772:43:8"
															},
															"nodeType": "YulIf",
															"src": "11769:63:8"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "11752:5:8",
														"type": ""
													}
												],
												"src": "11716:122:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11887:79:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "11944:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "11953:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "11956:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "11946:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11946:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "11946:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "11910:5:8"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "11935:5:8"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_bytes32",
																					"nodeType": "YulIdentifier",
																					"src": "11917:17:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "11917:24:8"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "11907:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11907:35:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "11900:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11900:43:8"
															},
															"nodeType": "YulIf",
															"src": "11897:63:8"
														}
													]
												},
												"name": "validator_revert_t_bytes32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "11880:5:8",
														"type": ""
													}
												],
												"src": "11844:122:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12014:78:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "12070:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12079:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12082:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "12072:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12072:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "12072:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "12037:5:8"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "12061:5:8"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_bytes4",
																					"nodeType": "YulIdentifier",
																					"src": "12044:16:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "12044:23:8"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "12034:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12034:34:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "12027:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "12027:42:8"
															},
															"nodeType": "YulIf",
															"src": "12024:62:8"
														}
													]
												},
												"name": "validator_revert_t_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "12007:5:8",
														"type": ""
													}
												],
												"src": "11972:120:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12141:79:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "12198:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12207:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12210:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "12200:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12200:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "12200:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "12164:5:8"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "12189:5:8"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "12171:17:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "12171:24:8"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "12161:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12161:35:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "12154:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "12154:43:8"
															},
															"nodeType": "YulIf",
															"src": "12151:63:8"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "12134:5:8",
														"type": ""
													}
												],
												"src": "12098:122:8"
											}
										]
									},
									"contents": "{\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 23)\n        store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874(pos)\n        end := add(pos, 23)\n    }\n\n    function abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 17)\n        store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69(pos)\n        end := add(pos, 17)\n    }\n\n    function abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 47)\n        store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x > (maxValue - y)\n        if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }\n\n        sum := add(x, y)\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x != 0 and y > (maxValue / x)\n        if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }\n\n        product := mul(x, y)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function decrement_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0x00) { panic_error_0x11() }\n        ret := sub(value, 1)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2(memPtr) {\n\n        mstore(add(memPtr, 0), \"Strings: hex length insufficient\")\n\n    }\n\n    function store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874(memPtr) {\n\n        mstore(add(memPtr, 0), \"AccessControl: account \")\n\n    }\n\n    function store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69(memPtr) {\n\n        mstore(add(memPtr, 0), \" is missing role \")\n\n    }\n\n    function store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b(memPtr) {\n\n        mstore(add(memPtr, 0), \"AccessControl: can only renounce\")\n\n        mstore(add(memPtr, 32), \" roles for self\")\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n",
									"id": 8,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b506004361061009e5760003560e01c806391d148541161006657806391d1485414610159578063a217fddf14610189578063b137050d146101a7578063d547741f146101d7578063e01c3119146101f35761009e565b806301ffc9a7146100a3578063248a9ca3146100d35780632f2ff15d1461010357806336568abe1461011f578063426dbd9c1461013b575b600080fd5b6100bd60048036038101906100b89190610a71565b610223565b6040516100ca9190610c3b565b60405180910390f35b6100ed60048036038101906100e89190610a04565b61029d565b6040516100fa9190610c56565b60405180910390f35b61011d60048036038101906101189190610a31565b6102bc565b005b61013960048036038101906101349190610a31565b6102dd565b005b610143610360565b6040516101509190610c56565b60405180910390f35b610173600480360381019061016e9190610a31565b610384565b6040516101809190610c3b565b60405180910390f35b6101916103ee565b60405161019e9190610c56565b60405180910390f35b6101c160048036038101906101bc9190610a9e565b6103f5565b6040516101ce9190610cd3565b60405180910390f35b6101f160048036038101906101ec9190610a31565b610419565b005b61020d60048036038101906102089190610a9e565b61043a565b60405161021a9190610cd3565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061029657506102958261047b565b5b9050919050565b6000806000838152602001908152602001600020600101549050919050565b6102c58261029d565b6102ce816104e5565b6102d883836104f9565b505050565b6102e56105d9565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610352576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034990610cb3565b60405180910390fd5b61035c82826105e1565b5050565b7f0d08ba49c85b8f4efedcab2f953c61f86e8944d3d6185fd4fa77665e1274cfc481565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b60008060001b610404816104e5565b82846104109190610d15565b91505092915050565b6104228261029d565b61042b816104e5565b61043583836105e1565b505050565b60007f0d08ba49c85b8f4efedcab2f953c61f86e8944d3d6185fd4fa77665e1274cfc4610466816104e5565b82846104729190610d6b565b91505092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6104f6816104f16105d9565b6106c2565b50565b6105038282610384565b6105d557600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061057a6105d9565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600033905090565b6105eb8282610384565b156106be57600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506106636105d9565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6106cc8282610384565b610743576106d981610747565b6106e78360001c6020610774565b6040516020016106f8929190610c01565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073a9190610c71565b60405180910390fd5b5050565b606061076d8273ffffffffffffffffffffffffffffffffffffffff16601460ff16610774565b9050919050565b6060600060028360026107879190610d6b565b6107919190610d15565b67ffffffffffffffff8111156107aa576107a9610efe565b5b6040519080825280601f01601f1916602001820160405280156107dc5781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061081457610813610ecf565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061087857610877610ecf565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026108b89190610d6b565b6108c29190610d15565b90505b6001811115610962577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061090457610903610ecf565b5b1a60f81b82828151811061091b5761091a610ecf565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061095b90610e76565b90506108c5565b50600084146109a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099d90610c93565b60405180910390fd5b8091505092915050565b6000813590506109bf8161100d565b92915050565b6000813590506109d481611024565b92915050565b6000813590506109e98161103b565b92915050565b6000813590506109fe81611052565b92915050565b600060208284031215610a1a57610a19610f2d565b5b6000610a28848285016109c5565b91505092915050565b60008060408385031215610a4857610a47610f2d565b5b6000610a56858286016109c5565b9250506020610a67858286016109b0565b9150509250929050565b600060208284031215610a8757610a86610f2d565b5b6000610a95848285016109da565b91505092915050565b60008060408385031215610ab557610ab4610f2d565b5b6000610ac3858286016109ef565b9250506020610ad4858286016109ef565b9150509250929050565b610ae781610dd7565b82525050565b610af681610de3565b82525050565b6000610b0782610cee565b610b118185610cf9565b9350610b21818560208601610e43565b610b2a81610f32565b840191505092915050565b6000610b4082610cee565b610b4a8185610d0a565b9350610b5a818560208601610e43565b80840191505092915050565b6000610b73602083610cf9565b9150610b7e82610f43565b602082019050919050565b6000610b96601783610d0a565b9150610ba182610f6c565b601782019050919050565b6000610bb9601183610d0a565b9150610bc482610f95565b601182019050919050565b6000610bdc602f83610cf9565b9150610be782610fbe565b604082019050919050565b610bfb81610e39565b82525050565b6000610c0c82610b89565b9150610c188285610b35565b9150610c2382610bac565b9150610c2f8284610b35565b91508190509392505050565b6000602082019050610c506000830184610ade565b92915050565b6000602082019050610c6b6000830184610aed565b92915050565b60006020820190508181036000830152610c8b8184610afc565b905092915050565b60006020820190508181036000830152610cac81610b66565b9050919050565b60006020820190508181036000830152610ccc81610bcf565b9050919050565b6000602082019050610ce86000830184610bf2565b92915050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000610d2082610e39565b9150610d2b83610e39565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d6057610d5f610ea0565b5b828201905092915050565b6000610d7682610e39565b9150610d8183610e39565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610dba57610db9610ea0565b5b828202905092915050565b6000610dd082610e19565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015610e61578082015181840152602081019050610e46565b83811115610e70576000848401525b50505050565b6000610e8182610e39565b91506000821415610e9557610e94610ea0565b5b600182039050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b61101681610dc5565b811461102157600080fd5b50565b61102d81610de3565b811461103857600080fd5b50565b61104481610ded565b811461104f57600080fd5b50565b61105b81610e39565b811461106657600080fd5b5056fea2646970667358221220b94fca4e4406cf71f361b15d40c817cb89e8862953026473bae9bcfd2ca76a3464736f6c63430008070033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x91D14854 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x159 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x189 JUMPI DUP1 PUSH4 0xB137050D EQ PUSH2 0x1A7 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x1D7 JUMPI DUP1 PUSH4 0xE01C3119 EQ PUSH2 0x1F3 JUMPI PUSH2 0x9E JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xA3 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0xD3 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x103 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x11F JUMPI DUP1 PUSH4 0x426DBD9C EQ PUSH2 0x13B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0xA71 JUMP JUMPDEST PUSH2 0x223 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCA SWAP2 SWAP1 PUSH2 0xC3B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xED PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE8 SWAP2 SWAP1 PUSH2 0xA04 JUMP JUMPDEST PUSH2 0x29D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFA SWAP2 SWAP1 PUSH2 0xC56 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x11D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x118 SWAP2 SWAP1 PUSH2 0xA31 JUMP JUMPDEST PUSH2 0x2BC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x139 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x134 SWAP2 SWAP1 PUSH2 0xA31 JUMP JUMPDEST PUSH2 0x2DD JUMP JUMPDEST STOP JUMPDEST PUSH2 0x143 PUSH2 0x360 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x150 SWAP2 SWAP1 PUSH2 0xC56 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x173 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x16E SWAP2 SWAP1 PUSH2 0xA31 JUMP JUMPDEST PUSH2 0x384 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x180 SWAP2 SWAP1 PUSH2 0xC3B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x191 PUSH2 0x3EE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x19E SWAP2 SWAP1 PUSH2 0xC56 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1C1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BC SWAP2 SWAP1 PUSH2 0xA9E JUMP JUMPDEST PUSH2 0x3F5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CE SWAP2 SWAP1 PUSH2 0xCD3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EC SWAP2 SWAP1 PUSH2 0xA31 JUMP JUMPDEST PUSH2 0x419 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x20D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x208 SWAP2 SWAP1 PUSH2 0xA9E JUMP JUMPDEST PUSH2 0x43A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21A SWAP2 SWAP1 PUSH2 0xCD3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x7965DB0B00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x296 JUMPI POP PUSH2 0x295 DUP3 PUSH2 0x47B JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2C5 DUP3 PUSH2 0x29D JUMP JUMPDEST PUSH2 0x2CE DUP2 PUSH2 0x4E5 JUMP JUMPDEST PUSH2 0x2D8 DUP4 DUP4 PUSH2 0x4F9 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x2E5 PUSH2 0x5D9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x352 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x349 SWAP1 PUSH2 0xCB3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x35C DUP3 DUP3 PUSH2 0x5E1 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH32 0xD08BA49C85B8F4EFEDCAB2F953C61F86E8944D3D6185FD4FA77665E1274CFC4 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SHL DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SHL PUSH2 0x404 DUP2 PUSH2 0x4E5 JUMP JUMPDEST DUP3 DUP5 PUSH2 0x410 SWAP2 SWAP1 PUSH2 0xD15 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x422 DUP3 PUSH2 0x29D JUMP JUMPDEST PUSH2 0x42B DUP2 PUSH2 0x4E5 JUMP JUMPDEST PUSH2 0x435 DUP4 DUP4 PUSH2 0x5E1 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xD08BA49C85B8F4EFEDCAB2F953C61F86E8944D3D6185FD4FA77665E1274CFC4 PUSH2 0x466 DUP2 PUSH2 0x4E5 JUMP JUMPDEST DUP3 DUP5 PUSH2 0x472 SWAP2 SWAP1 PUSH2 0xD6B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4F6 DUP2 PUSH2 0x4F1 PUSH2 0x5D9 JUMP JUMPDEST PUSH2 0x6C2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x503 DUP3 DUP3 PUSH2 0x384 JUMP JUMPDEST PUSH2 0x5D5 JUMPI PUSH1 0x1 PUSH1 0x0 DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x57A PUSH2 0x5D9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x5EB DUP3 DUP3 PUSH2 0x384 JUMP JUMPDEST ISZERO PUSH2 0x6BE JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x663 PUSH2 0x5D9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x6CC DUP3 DUP3 PUSH2 0x384 JUMP JUMPDEST PUSH2 0x743 JUMPI PUSH2 0x6D9 DUP2 PUSH2 0x747 JUMP JUMPDEST PUSH2 0x6E7 DUP4 PUSH1 0x0 SHR PUSH1 0x20 PUSH2 0x774 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x6F8 SWAP3 SWAP2 SWAP1 PUSH2 0xC01 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x73A SWAP2 SWAP1 PUSH2 0xC71 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x76D DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x14 PUSH1 0xFF AND PUSH2 0x774 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x2 DUP4 PUSH1 0x2 PUSH2 0x787 SWAP2 SWAP1 PUSH2 0xD6B JUMP JUMPDEST PUSH2 0x791 SWAP2 SWAP1 PUSH2 0xD15 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x7AA JUMPI PUSH2 0x7A9 PUSH2 0xEFE JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x7DC JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x814 JUMPI PUSH2 0x813 PUSH2 0xECF JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH32 0x7800000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x878 JUMPI PUSH2 0x877 PUSH2 0xECF JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH1 0x1 DUP5 PUSH1 0x2 PUSH2 0x8B8 SWAP2 SWAP1 PUSH2 0xD6B JUMP JUMPDEST PUSH2 0x8C2 SWAP2 SWAP1 PUSH2 0xD15 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x962 JUMPI PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xF DUP7 AND PUSH1 0x10 DUP2 LT PUSH2 0x904 JUMPI PUSH2 0x903 PUSH2 0xECF JUMP JUMPDEST JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x91B JUMPI PUSH2 0x91A PUSH2 0xECF JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 DUP6 SWAP1 SHR SWAP5 POP DUP1 PUSH2 0x95B SWAP1 PUSH2 0xE76 JUMP JUMPDEST SWAP1 POP PUSH2 0x8C5 JUMP JUMPDEST POP PUSH1 0x0 DUP5 EQ PUSH2 0x9A6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x99D SWAP1 PUSH2 0xC93 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x9BF DUP2 PUSH2 0x100D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x9D4 DUP2 PUSH2 0x1024 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x9E9 DUP2 PUSH2 0x103B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x9FE DUP2 PUSH2 0x1052 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA1A JUMPI PUSH2 0xA19 PUSH2 0xF2D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xA28 DUP5 DUP3 DUP6 ADD PUSH2 0x9C5 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA48 JUMPI PUSH2 0xA47 PUSH2 0xF2D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xA56 DUP6 DUP3 DUP7 ADD PUSH2 0x9C5 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xA67 DUP6 DUP3 DUP7 ADD PUSH2 0x9B0 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA87 JUMPI PUSH2 0xA86 PUSH2 0xF2D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xA95 DUP5 DUP3 DUP6 ADD PUSH2 0x9DA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xAB5 JUMPI PUSH2 0xAB4 PUSH2 0xF2D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xAC3 DUP6 DUP3 DUP7 ADD PUSH2 0x9EF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xAD4 DUP6 DUP3 DUP7 ADD PUSH2 0x9EF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0xAE7 DUP2 PUSH2 0xDD7 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xAF6 DUP2 PUSH2 0xDE3 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB07 DUP3 PUSH2 0xCEE JUMP JUMPDEST PUSH2 0xB11 DUP2 DUP6 PUSH2 0xCF9 JUMP JUMPDEST SWAP4 POP PUSH2 0xB21 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xE43 JUMP JUMPDEST PUSH2 0xB2A DUP2 PUSH2 0xF32 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB40 DUP3 PUSH2 0xCEE JUMP JUMPDEST PUSH2 0xB4A DUP2 DUP6 PUSH2 0xD0A JUMP JUMPDEST SWAP4 POP PUSH2 0xB5A DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xE43 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB73 PUSH1 0x20 DUP4 PUSH2 0xCF9 JUMP JUMPDEST SWAP2 POP PUSH2 0xB7E DUP3 PUSH2 0xF43 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB96 PUSH1 0x17 DUP4 PUSH2 0xD0A JUMP JUMPDEST SWAP2 POP PUSH2 0xBA1 DUP3 PUSH2 0xF6C JUMP JUMPDEST PUSH1 0x17 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBB9 PUSH1 0x11 DUP4 PUSH2 0xD0A JUMP JUMPDEST SWAP2 POP PUSH2 0xBC4 DUP3 PUSH2 0xF95 JUMP JUMPDEST PUSH1 0x11 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBDC PUSH1 0x2F DUP4 PUSH2 0xCF9 JUMP JUMPDEST SWAP2 POP PUSH2 0xBE7 DUP3 PUSH2 0xFBE JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xBFB DUP2 PUSH2 0xE39 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC0C DUP3 PUSH2 0xB89 JUMP JUMPDEST SWAP2 POP PUSH2 0xC18 DUP3 DUP6 PUSH2 0xB35 JUMP JUMPDEST SWAP2 POP PUSH2 0xC23 DUP3 PUSH2 0xBAC JUMP JUMPDEST SWAP2 POP PUSH2 0xC2F DUP3 DUP5 PUSH2 0xB35 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC50 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xADE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC6B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xAED JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xC8B DUP2 DUP5 PUSH2 0xAFC JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xCAC DUP2 PUSH2 0xB66 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xCCC DUP2 PUSH2 0xBCF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xCE8 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xBF2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD20 DUP3 PUSH2 0xE39 JUMP JUMPDEST SWAP2 POP PUSH2 0xD2B DUP4 PUSH2 0xE39 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0xD60 JUMPI PUSH2 0xD5F PUSH2 0xEA0 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD76 DUP3 PUSH2 0xE39 JUMP JUMPDEST SWAP2 POP PUSH2 0xD81 DUP4 PUSH2 0xE39 JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0xDBA JUMPI PUSH2 0xDB9 PUSH2 0xEA0 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDD0 DUP3 PUSH2 0xE19 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xE61 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xE46 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xE70 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE81 DUP3 PUSH2 0xE39 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 EQ ISZERO PUSH2 0xE95 JUMPI PUSH2 0xE94 PUSH2 0xEA0 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 SUB SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH2 0x1016 DUP2 PUSH2 0xDC5 JUMP JUMPDEST DUP2 EQ PUSH2 0x1021 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x102D DUP2 PUSH2 0xDE3 JUMP JUMPDEST DUP2 EQ PUSH2 0x1038 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x1044 DUP2 PUSH2 0xDED JUMP JUMPDEST DUP2 EQ PUSH2 0x104F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x105B DUP2 PUSH2 0xE39 JUMP JUMPDEST DUP2 EQ PUSH2 0x1066 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB9 0x4F 0xCA 0x4E DIFFICULTY MOD 0xCF PUSH18 0xF361B15D40C817CB89E8862953026473BAE9 0xBC REVERT 0x2C 0xA7 PUSH11 0x3464736F6C634300080700 CALLER ",
							"sourceMap": "195:422:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2606:202:1;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4378:129;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4803:145;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5912:214;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;236:58:0;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2895:145:1;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2027:49;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;376:121:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5228:147:1;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;503:107:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2606:202:1;2691:4;2729:32;2714:47;;;:11;:47;;;;:87;;;;2765:36;2789:11;2765:23;:36::i;:::-;2714:87;2707:94;;2606:202;;;:::o;4378:129::-;4452:7;4478:6;:12;4485:4;4478:12;;;;;;;;;;;:22;;;4471:29;;4378:129;;;:::o;4803:145::-;4886:18;4899:4;4886:12;:18::i;:::-;2505:16;2516:4;2505:10;:16::i;:::-;4916:25:::1;4927:4;4933:7;4916:10;:25::i;:::-;4803:145:::0;;;:::o;5912:214::-;6018:12;:10;:12::i;:::-;6007:23;;:7;:23;;;5999:83;;;;;;;;;;;;:::i;:::-;;;;;;;;;6093:26;6105:4;6111:7;6093:11;:26::i;:::-;5912:214;;:::o;236:58:0:-;273:21;236:58;:::o;2895:145:1:-;2981:4;3004:6;:12;3011:4;3004:12;;;;;;;;;;;:20;;:29;3025:7;3004:29;;;;;;;;;;;;;;;;;;;;;;;;;2997:36;;2895:145;;;;:::o;2027:49::-;2072:4;2027:49;;;:::o;376:121:0:-;462:4;2072::1;433:18:0;;2505:16:1;2516:4;2505:10;:16::i;:::-;490:1:0::1;488;:3;;;;:::i;:::-;481:10;;376:121:::0;;;;;:::o;5228:147:1:-;5312:18;5325:4;5312:12;:18::i;:::-;2505:16;2516:4;2505:10;:16::i;:::-;5342:26:::1;5354:4;5360:7;5342:11;:26::i;:::-;5228:147:::0;;;:::o;503:107:0:-;581:4;273:21;2505:16:1;2516:4;2505:10;:16::i;:::-;605:1:0::1;603;:3;;;;:::i;:::-;596:10;;503:107:::0;;;;;:::o;829:155:5:-;914:4;952:25;937:40;;;:11;:40;;;;930:47;;829:155;;;:::o;3334:103:1:-;3400:30;3411:4;3417:12;:10;:12::i;:::-;3400:10;:30::i;:::-;3334:103;:::o;7461:233::-;7544:22;7552:4;7558:7;7544;:22::i;:::-;7539:149;;7614:4;7582:6;:12;7589:4;7582:12;;;;;;;;;;;:20;;:29;7603:7;7582:29;;;;;;;;;;;;;;;;:36;;;;;;;;;;;;;;;;;;7664:12;:10;:12::i;:::-;7637:40;;7655:7;7637:40;;7649:4;7637:40;;;;;;;;;;7539:149;7461:233;;:::o;640:96:3:-;693:7;719:10;712:17;;640:96;:::o;7865:234:1:-;7948:22;7956:4;7962:7;7948;:22::i;:::-;7944:149;;;8018:5;7986:6;:12;7993:4;7986:12;;;;;;;;;;;:20;;:29;8007:7;7986:29;;;;;;;;;;;;;;;;:37;;;;;;;;;;;;;;;;;;8069:12;:10;:12::i;:::-;8042:40;;8060:7;8042:40;;8054:4;8042:40;;;;;;;;;;7944:149;7865:234;;:::o;3718:479::-;3806:22;3814:4;3820:7;3806;:22::i;:::-;3801:390;;3989:28;4009:7;3989:19;:28::i;:::-;4088:38;4116:4;4108:13;;4123:2;4088:19;:38::i;:::-;3896:252;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3844:336;;;;;;;;;;;:::i;:::-;;;;;;;;3801:390;3718:479;;:::o;2102:149:4:-;2160:13;2192:52;2220:4;2204:22;;311:2;2192:52;;:11;:52::i;:::-;2185:59;;2102:149;;;:::o;1513:437::-;1588:13;1613:19;1658:1;1649:6;1645:1;:10;;;;:::i;:::-;:14;;;;:::i;:::-;1635:25;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1613:47;;1670:15;:6;1677:1;1670:9;;;;;;;;:::i;:::-;;;;;:15;;;;;;;;;;;1695;:6;1702:1;1695:9;;;;;;;;:::i;:::-;;;;;:15;;;;;;;;;;;1725:9;1750:1;1741:6;1737:1;:10;;;;:::i;:::-;:14;;;;:::i;:::-;1725:26;;1720:128;1757:1;1753;:5;1720:128;;;1791:8;1808:3;1800:5;:11;1791:21;;;;;;;:::i;:::-;;;;;1779:6;1786:1;1779:9;;;;;;;;:::i;:::-;;;;;:33;;;;;;;;;;;1836:1;1826:11;;;;;1760:3;;;;:::i;:::-;;;1720:128;;;;1874:1;1865:5;:10;1857:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;1936:6;1922:21;;;1513:437;;;;:::o;7:139:8:-;53:5;91:6;78:20;69:29;;107:33;134:5;107:33;:::i;:::-;7:139;;;;:::o;152:::-;198:5;236:6;223:20;214:29;;252:33;279:5;252:33;:::i;:::-;152:139;;;;:::o;297:137::-;342:5;380:6;367:20;358:29;;396:32;422:5;396:32;:::i;:::-;297:137;;;;:::o;440:139::-;486:5;524:6;511:20;502:29;;540:33;567:5;540:33;:::i;:::-;440:139;;;;:::o;585:329::-;644:6;693:2;681:9;672:7;668:23;664:32;661:119;;;699:79;;:::i;:::-;661:119;819:1;844:53;889:7;880:6;869:9;865:22;844:53;:::i;:::-;834:63;;790:117;585:329;;;;:::o;920:474::-;988:6;996;1045:2;1033:9;1024:7;1020:23;1016:32;1013:119;;;1051:79;;:::i;:::-;1013:119;1171:1;1196:53;1241:7;1232:6;1221:9;1217:22;1196:53;:::i;:::-;1186:63;;1142:117;1298:2;1324:53;1369:7;1360:6;1349:9;1345:22;1324:53;:::i;:::-;1314:63;;1269:118;920:474;;;;;:::o;1400:327::-;1458:6;1507:2;1495:9;1486:7;1482:23;1478:32;1475:119;;;1513:79;;:::i;:::-;1475:119;1633:1;1658:52;1702:7;1693:6;1682:9;1678:22;1658:52;:::i;:::-;1648:62;;1604:116;1400:327;;;;:::o;1733:474::-;1801:6;1809;1858:2;1846:9;1837:7;1833:23;1829:32;1826:119;;;1864:79;;:::i;:::-;1826:119;1984:1;2009:53;2054:7;2045:6;2034:9;2030:22;2009:53;:::i;:::-;1999:63;;1955:117;2111:2;2137:53;2182:7;2173:6;2162:9;2158:22;2137:53;:::i;:::-;2127:63;;2082:118;1733:474;;;;;:::o;2213:109::-;2294:21;2309:5;2294:21;:::i;:::-;2289:3;2282:34;2213:109;;:::o;2328:118::-;2415:24;2433:5;2415:24;:::i;:::-;2410:3;2403:37;2328:118;;:::o;2452:364::-;2540:3;2568:39;2601:5;2568:39;:::i;:::-;2623:71;2687:6;2682:3;2623:71;:::i;:::-;2616:78;;2703:52;2748:6;2743:3;2736:4;2729:5;2725:16;2703:52;:::i;:::-;2780:29;2802:6;2780:29;:::i;:::-;2775:3;2771:39;2764:46;;2544:272;2452:364;;;;:::o;2822:377::-;2928:3;2956:39;2989:5;2956:39;:::i;:::-;3011:89;3093:6;3088:3;3011:89;:::i;:::-;3004:96;;3109:52;3154:6;3149:3;3142:4;3135:5;3131:16;3109:52;:::i;:::-;3186:6;3181:3;3177:16;3170:23;;2932:267;2822:377;;;;:::o;3205:366::-;3347:3;3368:67;3432:2;3427:3;3368:67;:::i;:::-;3361:74;;3444:93;3533:3;3444:93;:::i;:::-;3562:2;3557:3;3553:12;3546:19;;3205:366;;;:::o;3577:402::-;3737:3;3758:85;3840:2;3835:3;3758:85;:::i;:::-;3751:92;;3852:93;3941:3;3852:93;:::i;:::-;3970:2;3965:3;3961:12;3954:19;;3577:402;;;:::o;3985:::-;4145:3;4166:85;4248:2;4243:3;4166:85;:::i;:::-;4159:92;;4260:93;4349:3;4260:93;:::i;:::-;4378:2;4373:3;4369:12;4362:19;;3985:402;;;:::o;4393:366::-;4535:3;4556:67;4620:2;4615:3;4556:67;:::i;:::-;4549:74;;4632:93;4721:3;4632:93;:::i;:::-;4750:2;4745:3;4741:12;4734:19;;4393:366;;;:::o;4765:118::-;4852:24;4870:5;4852:24;:::i;:::-;4847:3;4840:37;4765:118;;:::o;4889:967::-;5271:3;5293:148;5437:3;5293:148;:::i;:::-;5286:155;;5458:95;5549:3;5540:6;5458:95;:::i;:::-;5451:102;;5570:148;5714:3;5570:148;:::i;:::-;5563:155;;5735:95;5826:3;5817:6;5735:95;:::i;:::-;5728:102;;5847:3;5840:10;;4889:967;;;;;:::o;5862:210::-;5949:4;5987:2;5976:9;5972:18;5964:26;;6000:65;6062:1;6051:9;6047:17;6038:6;6000:65;:::i;:::-;5862:210;;;;:::o;6078:222::-;6171:4;6209:2;6198:9;6194:18;6186:26;;6222:71;6290:1;6279:9;6275:17;6266:6;6222:71;:::i;:::-;6078:222;;;;:::o;6306:313::-;6419:4;6457:2;6446:9;6442:18;6434:26;;6506:9;6500:4;6496:20;6492:1;6481:9;6477:17;6470:47;6534:78;6607:4;6598:6;6534:78;:::i;:::-;6526:86;;6306:313;;;;:::o;6625:419::-;6791:4;6829:2;6818:9;6814:18;6806:26;;6878:9;6872:4;6868:20;6864:1;6853:9;6849:17;6842:47;6906:131;7032:4;6906:131;:::i;:::-;6898:139;;6625:419;;;:::o;7050:::-;7216:4;7254:2;7243:9;7239:18;7231:26;;7303:9;7297:4;7293:20;7289:1;7278:9;7274:17;7267:47;7331:131;7457:4;7331:131;:::i;:::-;7323:139;;7050:419;;;:::o;7475:222::-;7568:4;7606:2;7595:9;7591:18;7583:26;;7619:71;7687:1;7676:9;7672:17;7663:6;7619:71;:::i;:::-;7475:222;;;;:::o;7784:99::-;7836:6;7870:5;7864:12;7854:22;;7784:99;;;:::o;7889:169::-;7973:11;8007:6;8002:3;7995:19;8047:4;8042:3;8038:14;8023:29;;7889:169;;;;:::o;8064:148::-;8166:11;8203:3;8188:18;;8064:148;;;;:::o;8218:305::-;8258:3;8277:20;8295:1;8277:20;:::i;:::-;8272:25;;8311:20;8329:1;8311:20;:::i;:::-;8306:25;;8465:1;8397:66;8393:74;8390:1;8387:81;8384:107;;;8471:18;;:::i;:::-;8384:107;8515:1;8512;8508:9;8501:16;;8218:305;;;;:::o;8529:348::-;8569:7;8592:20;8610:1;8592:20;:::i;:::-;8587:25;;8626:20;8644:1;8626:20;:::i;:::-;8621:25;;8814:1;8746:66;8742:74;8739:1;8736:81;8731:1;8724:9;8717:17;8713:105;8710:131;;;8821:18;;:::i;:::-;8710:131;8869:1;8866;8862:9;8851:20;;8529:348;;;;:::o;8883:96::-;8920:7;8949:24;8967:5;8949:24;:::i;:::-;8938:35;;8883:96;;;:::o;8985:90::-;9019:7;9062:5;9055:13;9048:21;9037:32;;8985:90;;;:::o;9081:77::-;9118:7;9147:5;9136:16;;9081:77;;;:::o;9164:149::-;9200:7;9240:66;9233:5;9229:78;9218:89;;9164:149;;;:::o;9319:126::-;9356:7;9396:42;9389:5;9385:54;9374:65;;9319:126;;;:::o;9451:77::-;9488:7;9517:5;9506:16;;9451:77;;;:::o;9534:307::-;9602:1;9612:113;9626:6;9623:1;9620:13;9612:113;;;9711:1;9706:3;9702:11;9696:18;9692:1;9687:3;9683:11;9676:39;9648:2;9645:1;9641:10;9636:15;;9612:113;;;9743:6;9740:1;9737:13;9734:101;;;9823:1;9814:6;9809:3;9805:16;9798:27;9734:101;9583:258;9534:307;;;:::o;9847:171::-;9886:3;9909:24;9927:5;9909:24;:::i;:::-;9900:33;;9955:4;9948:5;9945:15;9942:41;;;9963:18;;:::i;:::-;9942:41;10010:1;10003:5;9999:13;9992:20;;9847:171;;;:::o;10024:180::-;10072:77;10069:1;10062:88;10169:4;10166:1;10159:15;10193:4;10190:1;10183:15;10210:180;10258:77;10255:1;10248:88;10355:4;10352:1;10345:15;10379:4;10376:1;10369:15;10396:180;10444:77;10441:1;10434:88;10541:4;10538:1;10531:15;10565:4;10562:1;10555:15;10705:117;10814:1;10811;10804:12;10828:102;10869:6;10920:2;10916:7;10911:2;10904:5;10900:14;10896:28;10886:38;;10828:102;;;:::o;10936:182::-;11076:34;11072:1;11064:6;11060:14;11053:58;10936:182;:::o;11124:173::-;11264:25;11260:1;11252:6;11248:14;11241:49;11124:173;:::o;11303:167::-;11443:19;11439:1;11431:6;11427:14;11420:43;11303:167;:::o;11476:234::-;11616:34;11612:1;11604:6;11600:14;11593:58;11685:17;11680:2;11672:6;11668:15;11661:42;11476:234;:::o;11716:122::-;11789:24;11807:5;11789:24;:::i;:::-;11782:5;11779:35;11769:63;;11828:1;11825;11818:12;11769:63;11716:122;:::o;11844:::-;11917:24;11935:5;11917:24;:::i;:::-;11910:5;11907:35;11897:63;;11956:1;11953;11946:12;11897:63;11844:122;:::o;11972:120::-;12044:23;12061:5;12044:23;:::i;:::-;12037:5;12034:34;12024:62;;12082:1;12079;12072:12;12024:62;11972:120;:::o;12098:122::-;12171:24;12189:5;12171:24;:::i;:::-;12164:5;12161:35;12151:63;;12210:1;12207;12200:12;12151:63;12098:122;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "851000",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"DEFAULT_ADMIN_ROLE()": "357",
								"WRITER_ROL()": "418",
								"getRoleAdmin(bytes32)": "infinite",
								"grantRole(bytes32,address)": "infinite",
								"hasRole(bytes32,address)": "3140",
								"renounceRole(bytes32,address)": "infinite",
								"revokeRole(bytes32,address)": "infinite",
								"soloAdmin(uint256,uint256)": "infinite",
								"soloWriter(uint256,uint256)": "infinite",
								"supportsInterface(bytes4)": "728"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 195,
									"end": 617,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 195,
									"end": 617,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 195,
									"end": 617,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 301,
									"end": 370,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 301,
									"end": 370,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 301,
									"end": 370,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 301,
									"end": 370,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 301,
									"end": 370,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 301,
									"end": 370,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 301,
									"end": 370,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 301,
									"end": 370,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 301,
									"end": 370,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 301,
									"end": 370,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 301,
									"end": 370,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 323,
									"end": 364,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 2072,
									"end": 2076,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 334,
									"end": 352,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 334,
									"end": 352,
									"name": "SHL",
									"source": 0
								},
								{
									"begin": 353,
									"end": 363,
									"name": "CALLER",
									"source": 0
								},
								{
									"begin": 323,
									"end": 333,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "5"
								},
								{
									"begin": 323,
									"end": 333,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 323,
									"end": 333,
									"name": "SHL",
									"source": 0
								},
								{
									"begin": 323,
									"end": 364,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 323,
									"end": 364,
									"name": "SHR",
									"source": 0
								},
								{
									"begin": 323,
									"end": 364,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 323,
									"end": 364,
									"name": "tag",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 323,
									"end": 364,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 195,
									"end": 617,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "6"
								},
								{
									"begin": 195,
									"end": 617,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 7461,
									"end": 7694,
									"name": "tag",
									"source": 1,
									"value": "5"
								},
								{
									"begin": 7461,
									"end": 7694,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 7544,
									"end": 7566,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "8"
								},
								{
									"begin": 7552,
									"end": 7556,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 7558,
									"end": 7565,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 7544,
									"end": 7551,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "9"
								},
								{
									"begin": 7544,
									"end": 7551,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 7544,
									"end": 7551,
									"name": "SHL",
									"source": 1
								},
								{
									"begin": 7544,
									"end": 7566,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 7544,
									"end": 7566,
									"name": "SHR",
									"source": 1
								},
								{
									"begin": 7544,
									"end": 7566,
									"name": "JUMP",
									"source": 1,
									"value": "[in]"
								},
								{
									"begin": 7544,
									"end": 7566,
									"name": "tag",
									"source": 1,
									"value": "8"
								},
								{
									"begin": 7544,
									"end": 7566,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 7539,
									"end": 7688,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "10"
								},
								{
									"begin": 7539,
									"end": 7688,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 7614,
									"end": 7618,
									"name": "PUSH",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 7582,
									"end": 7588,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 7582,
									"end": 7594,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 7589,
									"end": 7593,
									"name": "DUP5",
									"source": 1
								},
								{
									"begin": 7582,
									"end": 7594,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 7582,
									"end": 7594,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 7582,
									"end": 7594,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 7582,
									"end": 7594,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 7582,
									"end": 7594,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 7582,
									"end": 7594,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 7582,
									"end": 7594,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 7582,
									"end": 7594,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 7582,
									"end": 7594,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 7582,
									"end": 7594,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 7582,
									"end": 7594,
									"name": "KECCAK256",
									"source": 1
								},
								{
									"begin": 7582,
									"end": 7602,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 7582,
									"end": 7602,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 7582,
									"end": 7611,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 7603,
									"end": 7610,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 7582,
									"end": 7611,
									"name": "PUSH",
									"source": 1,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 7582,
									"end": 7611,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 7582,
									"end": 7611,
									"name": "PUSH",
									"source": 1,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 7582,
									"end": 7611,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 7582,
									"end": 7611,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 7582,
									"end": 7611,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 7582,
									"end": 7611,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 7582,
									"end": 7611,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 7582,
									"end": 7611,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 7582,
									"end": 7611,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 7582,
									"end": 7611,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 7582,
									"end": 7611,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 7582,
									"end": 7611,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 7582,
									"end": 7611,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 7582,
									"end": 7611,
									"name": "KECCAK256",
									"source": 1
								},
								{
									"begin": 7582,
									"end": 7611,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 7582,
									"end": 7618,
									"name": "PUSH",
									"source": 1,
									"value": "100"
								},
								{
									"begin": 7582,
									"end": 7618,
									"name": "EXP",
									"source": 1
								},
								{
									"begin": 7582,
									"end": 7618,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 7582,
									"end": 7618,
									"name": "SLOAD",
									"source": 1
								},
								{
									"begin": 7582,
									"end": 7618,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 7582,
									"end": 7618,
									"name": "PUSH",
									"source": 1,
									"value": "FF"
								},
								{
									"begin": 7582,
									"end": 7618,
									"name": "MUL",
									"source": 1
								},
								{
									"begin": 7582,
									"end": 7618,
									"name": "NOT",
									"source": 1
								},
								{
									"begin": 7582,
									"end": 7618,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 7582,
									"end": 7618,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 7582,
									"end": 7618,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 7582,
									"end": 7618,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 7582,
									"end": 7618,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 7582,
									"end": 7618,
									"name": "MUL",
									"source": 1
								},
								{
									"begin": 7582,
									"end": 7618,
									"name": "OR",
									"source": 1
								},
								{
									"begin": 7582,
									"end": 7618,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 7582,
									"end": 7618,
									"name": "SSTORE",
									"source": 1
								},
								{
									"begin": 7582,
									"end": 7618,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 7664,
									"end": 7676,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "11"
								},
								{
									"begin": 7664,
									"end": 7674,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "12"
								},
								{
									"begin": 7664,
									"end": 7674,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 7664,
									"end": 7674,
									"name": "SHL",
									"source": 1
								},
								{
									"begin": 7664,
									"end": 7676,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 7664,
									"end": 7676,
									"name": "SHR",
									"source": 1
								},
								{
									"begin": 7664,
									"end": 7676,
									"name": "JUMP",
									"source": 1,
									"value": "[in]"
								},
								{
									"begin": 7664,
									"end": 7676,
									"name": "tag",
									"source": 1,
									"value": "11"
								},
								{
									"begin": 7664,
									"end": 7676,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 7637,
									"end": 7677,
									"name": "PUSH",
									"source": 1,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 7637,
									"end": 7677,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 7655,
									"end": 7662,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 7637,
									"end": 7677,
									"name": "PUSH",
									"source": 1,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 7637,
									"end": 7677,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 7649,
									"end": 7653,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 7637,
									"end": 7677,
									"name": "PUSH",
									"source": 1,
									"value": "2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D"
								},
								{
									"begin": 7637,
									"end": 7677,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 7637,
									"end": 7677,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 7637,
									"end": 7677,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 7637,
									"end": 7677,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 7637,
									"end": 7677,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 7637,
									"end": 7677,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 7637,
									"end": 7677,
									"name": "SUB",
									"source": 1
								},
								{
									"begin": 7637,
									"end": 7677,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 7637,
									"end": 7677,
									"name": "LOG4",
									"source": 1
								},
								{
									"begin": 7539,
									"end": 7688,
									"name": "tag",
									"source": 1,
									"value": "10"
								},
								{
									"begin": 7539,
									"end": 7688,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 7461,
									"end": 7694,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 7461,
									"end": 7694,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 7461,
									"end": 7694,
									"name": "JUMP",
									"source": 1,
									"value": "[out]"
								},
								{
									"begin": 2895,
									"end": 3040,
									"name": "tag",
									"source": 1,
									"value": "9"
								},
								{
									"begin": 2895,
									"end": 3040,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 2981,
									"end": 2985,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 3011,
									"end": 3015,
									"name": "DUP5",
									"source": 1
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 3004,
									"end": 3016,
									"name": "KECCAK256",
									"source": 1
								},
								{
									"begin": 3004,
									"end": 3024,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 3004,
									"end": 3024,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 3025,
									"end": 3032,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "PUSH",
									"source": 1,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "PUSH",
									"source": 1,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "KECCAK256",
									"source": 1
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "SLOAD",
									"source": 1
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "PUSH",
									"source": 1,
									"value": "100"
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "EXP",
									"source": 1
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "DIV",
									"source": 1
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "PUSH",
									"source": 1,
									"value": "FF"
								},
								{
									"begin": 3004,
									"end": 3033,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 2997,
									"end": 3033,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 2997,
									"end": 3033,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 2895,
									"end": 3040,
									"name": "SWAP3",
									"source": 1
								},
								{
									"begin": 2895,
									"end": 3040,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 2895,
									"end": 3040,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 2895,
									"end": 3040,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 2895,
									"end": 3040,
									"name": "JUMP",
									"source": 1,
									"value": "[out]"
								},
								{
									"begin": 640,
									"end": 736,
									"name": "tag",
									"source": 3,
									"value": "12"
								},
								{
									"begin": 640,
									"end": 736,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 693,
									"end": 700,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 719,
									"end": 729,
									"name": "CALLER",
									"source": 3
								},
								{
									"begin": 712,
									"end": 729,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 712,
									"end": 729,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 640,
									"end": 736,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 640,
									"end": 736,
									"name": "JUMP",
									"source": 3,
									"value": "[out]"
								},
								{
									"begin": 195,
									"end": 617,
									"name": "tag",
									"source": 0,
									"value": "6"
								},
								{
									"begin": 195,
									"end": 617,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 195,
									"end": 617,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 195,
									"end": 617,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 195,
									"end": 617,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 195,
									"end": 617,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 195,
									"end": 617,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 195,
									"end": 617,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 195,
									"end": 617,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220b94fca4e4406cf71f361b15d40c817cb89e8862953026473bae9bcfd2ca76a3464736f6c63430008070033",
									".code": [
										{
											"begin": 195,
											"end": 617,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 195,
											"end": 617,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 195,
											"end": 617,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 195,
											"end": 617,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 195,
											"end": 617,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "tag",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 195,
											"end": 617,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 195,
											"end": 617,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 195,
											"end": 617,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 195,
											"end": 617,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 195,
											"end": 617,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "PUSH",
											"source": 0,
											"value": "91D14854"
										},
										{
											"begin": 195,
											"end": 617,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 195,
											"end": 617,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "PUSH",
											"source": 0,
											"value": "91D14854"
										},
										{
											"begin": 195,
											"end": 617,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 195,
											"end": 617,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "PUSH",
											"source": 0,
											"value": "A217FDDF"
										},
										{
											"begin": 195,
											"end": 617,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 195,
											"end": 617,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "PUSH",
											"source": 0,
											"value": "B137050D"
										},
										{
											"begin": 195,
											"end": 617,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 195,
											"end": 617,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "PUSH",
											"source": 0,
											"value": "D547741F"
										},
										{
											"begin": 195,
											"end": 617,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 195,
											"end": 617,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "PUSH",
											"source": 0,
											"value": "E01C3119"
										},
										{
											"begin": 195,
											"end": 617,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 195,
											"end": 617,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 195,
											"end": 617,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "tag",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 195,
											"end": 617,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "PUSH",
											"source": 0,
											"value": "1FFC9A7"
										},
										{
											"begin": 195,
											"end": 617,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 195,
											"end": 617,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "PUSH",
											"source": 0,
											"value": "248A9CA3"
										},
										{
											"begin": 195,
											"end": 617,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 195,
											"end": 617,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "PUSH",
											"source": 0,
											"value": "2F2FF15D"
										},
										{
											"begin": 195,
											"end": 617,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 195,
											"end": 617,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "PUSH",
											"source": 0,
											"value": "36568ABE"
										},
										{
											"begin": 195,
											"end": 617,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 195,
											"end": 617,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "PUSH",
											"source": 0,
											"value": "426DBD9C"
										},
										{
											"begin": 195,
											"end": 617,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 195,
											"end": 617,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "tag",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 195,
											"end": 617,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 195,
											"end": 617,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 195,
											"end": 617,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "tag",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "14"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "15"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "16"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "tag",
											"source": 1,
											"value": "15"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "tag",
											"source": 1,
											"value": "14"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "18"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "19"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "tag",
											"source": 1,
											"value": "18"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 4378,
											"end": 4507,
											"name": "tag",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 4378,
											"end": 4507,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4378,
											"end": 4507,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4378,
											"end": 4507,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 4378,
											"end": 4507,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4378,
											"end": 4507,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 4378,
											"end": 4507,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 4378,
											"end": 4507,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4378,
											"end": 4507,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4378,
											"end": 4507,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4378,
											"end": 4507,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "21"
										},
										{
											"begin": 4378,
											"end": 4507,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4378,
											"end": 4507,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4378,
											"end": 4507,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "22"
										},
										{
											"begin": 4378,
											"end": 4507,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4378,
											"end": 4507,
											"name": "tag",
											"source": 1,
											"value": "21"
										},
										{
											"begin": 4378,
											"end": 4507,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4378,
											"end": 4507,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "23"
										},
										{
											"begin": 4378,
											"end": 4507,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4378,
											"end": 4507,
											"name": "tag",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4378,
											"end": 4507,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4378,
											"end": 4507,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4378,
											"end": 4507,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 4378,
											"end": 4507,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "24"
										},
										{
											"begin": 4378,
											"end": 4507,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4378,
											"end": 4507,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4378,
											"end": 4507,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "25"
										},
										{
											"begin": 4378,
											"end": 4507,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4378,
											"end": 4507,
											"name": "tag",
											"source": 1,
											"value": "24"
										},
										{
											"begin": 4378,
											"end": 4507,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4378,
											"end": 4507,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4378,
											"end": 4507,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 4378,
											"end": 4507,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4378,
											"end": 4507,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4378,
											"end": 4507,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 4378,
											"end": 4507,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4378,
											"end": 4507,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 4803,
											"end": 4948,
											"name": "tag",
											"source": 1,
											"value": "5"
										},
										{
											"begin": 4803,
											"end": 4948,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4803,
											"end": 4948,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "26"
										},
										{
											"begin": 4803,
											"end": 4948,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 4803,
											"end": 4948,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4803,
											"end": 4948,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 4803,
											"end": 4948,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 4803,
											"end": 4948,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4803,
											"end": 4948,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4803,
											"end": 4948,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4803,
											"end": 4948,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "27"
										},
										{
											"begin": 4803,
											"end": 4948,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4803,
											"end": 4948,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4803,
											"end": 4948,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "28"
										},
										{
											"begin": 4803,
											"end": 4948,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4803,
											"end": 4948,
											"name": "tag",
											"source": 1,
											"value": "27"
										},
										{
											"begin": 4803,
											"end": 4948,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4803,
											"end": 4948,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "29"
										},
										{
											"begin": 4803,
											"end": 4948,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4803,
											"end": 4948,
											"name": "tag",
											"source": 1,
											"value": "26"
										},
										{
											"begin": 4803,
											"end": 4948,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4803,
											"end": 4948,
											"name": "STOP",
											"source": 1
										},
										{
											"begin": 5912,
											"end": 6126,
											"name": "tag",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 5912,
											"end": 6126,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5912,
											"end": 6126,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "30"
										},
										{
											"begin": 5912,
											"end": 6126,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 5912,
											"end": 6126,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5912,
											"end": 6126,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 5912,
											"end": 6126,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 5912,
											"end": 6126,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5912,
											"end": 6126,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5912,
											"end": 6126,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5912,
											"end": 6126,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "31"
										},
										{
											"begin": 5912,
											"end": 6126,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5912,
											"end": 6126,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5912,
											"end": 6126,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "28"
										},
										{
											"begin": 5912,
											"end": 6126,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5912,
											"end": 6126,
											"name": "tag",
											"source": 1,
											"value": "31"
										},
										{
											"begin": 5912,
											"end": 6126,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5912,
											"end": 6126,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "32"
										},
										{
											"begin": 5912,
											"end": 6126,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5912,
											"end": 6126,
											"name": "tag",
											"source": 1,
											"value": "30"
										},
										{
											"begin": 5912,
											"end": 6126,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5912,
											"end": 6126,
											"name": "STOP",
											"source": 1
										},
										{
											"begin": 236,
											"end": 294,
											"name": "tag",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 236,
											"end": 294,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 236,
											"end": 294,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 236,
											"end": 294,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 236,
											"end": 294,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 236,
											"end": 294,
											"name": "tag",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 236,
											"end": 294,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 236,
											"end": 294,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 236,
											"end": 294,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 236,
											"end": 294,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 236,
											"end": 294,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 236,
											"end": 294,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 236,
											"end": 294,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 236,
											"end": 294,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 236,
											"end": 294,
											"name": "tag",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 236,
											"end": 294,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 236,
											"end": 294,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 236,
											"end": 294,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 236,
											"end": 294,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 236,
											"end": 294,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 236,
											"end": 294,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 236,
											"end": 294,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 236,
											"end": 294,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "tag",
											"source": 1,
											"value": "8"
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "36"
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "37"
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "28"
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "tag",
											"source": 1,
											"value": "37"
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "38"
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "tag",
											"source": 1,
											"value": "36"
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "39"
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "19"
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "tag",
											"source": 1,
											"value": "39"
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "tag",
											"source": 1,
											"value": "9"
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "41"
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "tag",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "42"
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "25"
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "tag",
											"source": 1,
											"value": "42"
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 376,
											"end": 497,
											"name": "tag",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 376,
											"end": 497,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 376,
											"end": 497,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "43"
										},
										{
											"begin": 376,
											"end": 497,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 376,
											"end": 497,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 376,
											"end": 497,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 376,
											"end": 497,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 376,
											"end": 497,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 376,
											"end": 497,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 376,
											"end": 497,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 376,
											"end": 497,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 376,
											"end": 497,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 376,
											"end": 497,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 376,
											"end": 497,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 376,
											"end": 497,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 376,
											"end": 497,
											"name": "tag",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 376,
											"end": 497,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 376,
											"end": 497,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "46"
										},
										{
											"begin": 376,
											"end": 497,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 376,
											"end": 497,
											"name": "tag",
											"source": 0,
											"value": "43"
										},
										{
											"begin": 376,
											"end": 497,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 376,
											"end": 497,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 376,
											"end": 497,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 376,
											"end": 497,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 376,
											"end": 497,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 376,
											"end": 497,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 376,
											"end": 497,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 376,
											"end": 497,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 376,
											"end": 497,
											"name": "tag",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 376,
											"end": 497,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 376,
											"end": 497,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 376,
											"end": 497,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 376,
											"end": 497,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 376,
											"end": 497,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 376,
											"end": 497,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 376,
											"end": 497,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 376,
											"end": 497,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 5228,
											"end": 5375,
											"name": "tag",
											"source": 1,
											"value": "11"
										},
										{
											"begin": 5228,
											"end": 5375,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5228,
											"end": 5375,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "49"
										},
										{
											"begin": 5228,
											"end": 5375,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 5228,
											"end": 5375,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5228,
											"end": 5375,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 5228,
											"end": 5375,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 5228,
											"end": 5375,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5228,
											"end": 5375,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5228,
											"end": 5375,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5228,
											"end": 5375,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "50"
										},
										{
											"begin": 5228,
											"end": 5375,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5228,
											"end": 5375,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5228,
											"end": 5375,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "28"
										},
										{
											"begin": 5228,
											"end": 5375,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5228,
											"end": 5375,
											"name": "tag",
											"source": 1,
											"value": "50"
										},
										{
											"begin": 5228,
											"end": 5375,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5228,
											"end": 5375,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "51"
										},
										{
											"begin": 5228,
											"end": 5375,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5228,
											"end": 5375,
											"name": "tag",
											"source": 1,
											"value": "49"
										},
										{
											"begin": 5228,
											"end": 5375,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5228,
											"end": 5375,
											"name": "STOP",
											"source": 1
										},
										{
											"begin": 503,
											"end": 610,
											"name": "tag",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 503,
											"end": 610,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 503,
											"end": 610,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 503,
											"end": 610,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 503,
											"end": 610,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 503,
											"end": 610,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 503,
											"end": 610,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 503,
											"end": 610,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 503,
											"end": 610,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 503,
											"end": 610,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 503,
											"end": 610,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 503,
											"end": 610,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 503,
											"end": 610,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 503,
											"end": 610,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 503,
											"end": 610,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 503,
											"end": 610,
											"name": "tag",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 503,
											"end": 610,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 503,
											"end": 610,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "54"
										},
										{
											"begin": 503,
											"end": 610,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 503,
											"end": 610,
											"name": "tag",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 503,
											"end": 610,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 503,
											"end": 610,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 503,
											"end": 610,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 503,
											"end": 610,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "55"
										},
										{
											"begin": 503,
											"end": 610,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 503,
											"end": 610,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 503,
											"end": 610,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 503,
											"end": 610,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 503,
											"end": 610,
											"name": "tag",
											"source": 0,
											"value": "55"
										},
										{
											"begin": 503,
											"end": 610,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 503,
											"end": 610,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 503,
											"end": 610,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 503,
											"end": 610,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 503,
											"end": 610,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 503,
											"end": 610,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 503,
											"end": 610,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 503,
											"end": 610,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "tag",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2691,
											"end": 2695,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2729,
											"end": 2761,
											"name": "PUSH",
											"source": 1,
											"value": "7965DB0B00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2714,
											"end": 2761,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2714,
											"end": 2761,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 2714,
											"end": 2761,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2714,
											"end": 2725,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2714,
											"end": 2761,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2714,
											"end": 2761,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 2714,
											"end": 2761,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2714,
											"end": 2761,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 2714,
											"end": 2801,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2714,
											"end": 2801,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "57"
										},
										{
											"begin": 2714,
											"end": 2801,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2714,
											"end": 2801,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2765,
											"end": 2801,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "58"
										},
										{
											"begin": 2789,
											"end": 2800,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2765,
											"end": 2788,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "59"
										},
										{
											"begin": 2765,
											"end": 2801,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2765,
											"end": 2801,
											"name": "tag",
											"source": 1,
											"value": "58"
										},
										{
											"begin": 2765,
											"end": 2801,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2714,
											"end": 2801,
											"name": "tag",
											"source": 1,
											"value": "57"
										},
										{
											"begin": 2714,
											"end": 2801,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2707,
											"end": 2801,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2707,
											"end": 2801,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 4378,
											"end": 4507,
											"name": "tag",
											"source": 1,
											"value": "23"
										},
										{
											"begin": 4378,
											"end": 4507,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4452,
											"end": 4459,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4478,
											"end": 4484,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4478,
											"end": 4490,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4485,
											"end": 4489,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 4478,
											"end": 4490,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4478,
											"end": 4490,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4478,
											"end": 4490,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4478,
											"end": 4490,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4478,
											"end": 4490,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4478,
											"end": 4490,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4478,
											"end": 4490,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4478,
											"end": 4490,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4478,
											"end": 4490,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4478,
											"end": 4490,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4478,
											"end": 4490,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 4478,
											"end": 4500,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 4478,
											"end": 4500,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4478,
											"end": 4500,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 4471,
											"end": 4500,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4471,
											"end": 4500,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4378,
											"end": 4507,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4378,
											"end": 4507,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4378,
											"end": 4507,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4378,
											"end": 4507,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 4803,
											"end": 4948,
											"name": "tag",
											"source": 1,
											"value": "29"
										},
										{
											"begin": 4803,
											"end": 4948,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4886,
											"end": 4904,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "61"
										},
										{
											"begin": 4899,
											"end": 4903,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 4886,
											"end": 4898,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "23"
										},
										{
											"begin": 4886,
											"end": 4904,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4886,
											"end": 4904,
											"name": "tag",
											"source": 1,
											"value": "61"
										},
										{
											"begin": 4886,
											"end": 4904,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "63"
										},
										{
											"begin": 2516,
											"end": 2520,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2505,
											"end": 2515,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "64"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "tag",
											"source": 1,
											"value": "63"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4916,
											"end": 4941,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "66"
										},
										{
											"begin": 4927,
											"end": 4931,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 4933,
											"end": 4940,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 4916,
											"end": 4926,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "67"
										},
										{
											"begin": 4916,
											"end": 4941,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4916,
											"end": 4941,
											"name": "tag",
											"source": 1,
											"value": "66"
										},
										{
											"begin": 4916,
											"end": 4941,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4803,
											"end": 4948,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4803,
											"end": 4948,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4803,
											"end": 4948,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4803,
											"end": 4948,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 5912,
											"end": 6126,
											"name": "tag",
											"source": 1,
											"value": "32"
										},
										{
											"begin": 5912,
											"end": 6126,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6018,
											"end": 6030,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "69"
										},
										{
											"begin": 6018,
											"end": 6028,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "70"
										},
										{
											"begin": 6018,
											"end": 6030,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 6018,
											"end": 6030,
											"name": "tag",
											"source": 1,
											"value": "69"
										},
										{
											"begin": 6018,
											"end": 6030,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6007,
											"end": 6030,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6007,
											"end": 6030,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6007,
											"end": 6014,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6007,
											"end": 6030,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6007,
											"end": 6030,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6007,
											"end": 6030,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 5999,
											"end": 6082,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "71"
										},
										{
											"begin": 5999,
											"end": 6082,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5999,
											"end": 6082,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5999,
											"end": 6082,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5999,
											"end": 6082,
											"name": "PUSH",
											"source": 1,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5999,
											"end": 6082,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5999,
											"end": 6082,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5999,
											"end": 6082,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 5999,
											"end": 6082,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5999,
											"end": 6082,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "72"
										},
										{
											"begin": 5999,
											"end": 6082,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5999,
											"end": 6082,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "73"
										},
										{
											"begin": 5999,
											"end": 6082,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5999,
											"end": 6082,
											"name": "tag",
											"source": 1,
											"value": "72"
										},
										{
											"begin": 5999,
											"end": 6082,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5999,
											"end": 6082,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5999,
											"end": 6082,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5999,
											"end": 6082,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5999,
											"end": 6082,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5999,
											"end": 6082,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 5999,
											"end": 6082,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5999,
											"end": 6082,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 5999,
											"end": 6082,
											"name": "tag",
											"source": 1,
											"value": "71"
										},
										{
											"begin": 5999,
											"end": 6082,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6093,
											"end": 6119,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "74"
										},
										{
											"begin": 6105,
											"end": 6109,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 6111,
											"end": 6118,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 6093,
											"end": 6104,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "75"
										},
										{
											"begin": 6093,
											"end": 6119,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 6093,
											"end": 6119,
											"name": "tag",
											"source": 1,
											"value": "74"
										},
										{
											"begin": 6093,
											"end": 6119,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5912,
											"end": 6126,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5912,
											"end": 6126,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5912,
											"end": 6126,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 236,
											"end": 294,
											"name": "tag",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 236,
											"end": 294,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 273,
											"end": 294,
											"name": "PUSH",
											"source": 0,
											"value": "D08BA49C85B8F4EFEDCAB2F953C61F86E8944D3D6185FD4FA77665E1274CFC4"
										},
										{
											"begin": 236,
											"end": 294,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 236,
											"end": 294,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "tag",
											"source": 1,
											"value": "38"
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2981,
											"end": 2985,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3004,
											"end": 3016,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3011,
											"end": 3015,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 3004,
											"end": 3016,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3004,
											"end": 3016,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3004,
											"end": 3016,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3004,
											"end": 3016,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3004,
											"end": 3016,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3004,
											"end": 3016,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3004,
											"end": 3016,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3004,
											"end": 3016,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3004,
											"end": 3016,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3004,
											"end": 3016,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3004,
											"end": 3016,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 3004,
											"end": 3024,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3004,
											"end": 3024,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3025,
											"end": 3032,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2997,
											"end": 3033,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2997,
											"end": 3033,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "tag",
											"source": 1,
											"value": "41"
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2072,
											"end": 2076,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "SHL",
											"source": 1
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 376,
											"end": 497,
											"name": "tag",
											"source": 0,
											"value": "46"
										},
										{
											"begin": 376,
											"end": 497,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 462,
											"end": 466,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2072,
											"end": 2076,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 433,
											"end": 451,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 433,
											"end": 451,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "78"
										},
										{
											"begin": 2516,
											"end": 2520,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2505,
											"end": 2515,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "64"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "tag",
											"source": 1,
											"value": "78"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 490,
											"end": 491,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 488,
											"end": 489,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 488,
											"end": 491,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 488,
											"end": 491,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 488,
											"end": 491,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 488,
											"end": 491,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "81"
										},
										{
											"begin": 488,
											"end": 491,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 488,
											"end": 491,
											"name": "tag",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 488,
											"end": 491,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 481,
											"end": 491,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 481,
											"end": 491,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 376,
											"end": 497,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 376,
											"end": 497,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 376,
											"end": 497,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 376,
											"end": 497,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 376,
											"end": 497,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 376,
											"end": 497,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 5228,
											"end": 5375,
											"name": "tag",
											"source": 1,
											"value": "51"
										},
										{
											"begin": 5228,
											"end": 5375,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5312,
											"end": 5330,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "82"
										},
										{
											"begin": 5325,
											"end": 5329,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5312,
											"end": 5324,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "23"
										},
										{
											"begin": 5312,
											"end": 5330,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5312,
											"end": 5330,
											"name": "tag",
											"source": 1,
											"value": "82"
										},
										{
											"begin": 5312,
											"end": 5330,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "84"
										},
										{
											"begin": 2516,
											"end": 2520,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2505,
											"end": 2515,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "64"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "tag",
											"source": 1,
											"value": "84"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5342,
											"end": 5368,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "86"
										},
										{
											"begin": 5354,
											"end": 5358,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5360,
											"end": 5367,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5342,
											"end": 5353,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "75"
										},
										{
											"begin": 5342,
											"end": 5368,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5342,
											"end": 5368,
											"name": "tag",
											"source": 1,
											"value": "86"
										},
										{
											"begin": 5342,
											"end": 5368,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5228,
											"end": 5375,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5228,
											"end": 5375,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5228,
											"end": 5375,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5228,
											"end": 5375,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 503,
											"end": 610,
											"name": "tag",
											"source": 0,
											"value": "54"
										},
										{
											"begin": 503,
											"end": 610,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 581,
											"end": 585,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 273,
											"end": 294,
											"name": "PUSH",
											"source": 0,
											"value": "D08BA49C85B8F4EFEDCAB2F953C61F86E8944D3D6185FD4FA77665E1274CFC4"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "88"
										},
										{
											"begin": 2516,
											"end": 2520,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2505,
											"end": 2515,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "64"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "tag",
											"source": 1,
											"value": "88"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 605,
											"end": 606,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 603,
											"end": 604,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 603,
											"end": 606,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "90"
										},
										{
											"begin": 603,
											"end": 606,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 603,
											"end": 606,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 603,
											"end": 606,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "91"
										},
										{
											"begin": 603,
											"end": 606,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 603,
											"end": 606,
											"name": "tag",
											"source": 0,
											"value": "90"
										},
										{
											"begin": 603,
											"end": 606,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 596,
											"end": 606,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 596,
											"end": 606,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 503,
											"end": 610,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 503,
											"end": 610,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 503,
											"end": 610,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 503,
											"end": 610,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 503,
											"end": 610,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 503,
											"end": 610,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 829,
											"end": 984,
											"name": "tag",
											"source": 5,
											"value": "59"
										},
										{
											"begin": 829,
											"end": 984,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 914,
											"end": 918,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 952,
											"end": 977,
											"name": "PUSH",
											"source": 5,
											"value": "1FFC9A700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 937,
											"end": 977,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 937,
											"end": 977,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 937,
											"end": 977,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 937,
											"end": 948,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 937,
											"end": 977,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 937,
											"end": 977,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 937,
											"end": 977,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 937,
											"end": 977,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 930,
											"end": 977,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 930,
											"end": 977,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 829,
											"end": 984,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 829,
											"end": 984,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 829,
											"end": 984,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 829,
											"end": 984,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 3334,
											"end": 3437,
											"name": "tag",
											"source": 1,
											"value": "64"
										},
										{
											"begin": 3334,
											"end": 3437,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3400,
											"end": 3430,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "94"
										},
										{
											"begin": 3411,
											"end": 3415,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3417,
											"end": 3429,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "95"
										},
										{
											"begin": 3417,
											"end": 3427,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "70"
										},
										{
											"begin": 3417,
											"end": 3429,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3417,
											"end": 3429,
											"name": "tag",
											"source": 1,
											"value": "95"
										},
										{
											"begin": 3417,
											"end": 3429,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3400,
											"end": 3410,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "96"
										},
										{
											"begin": 3400,
											"end": 3430,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3400,
											"end": 3430,
											"name": "tag",
											"source": 1,
											"value": "94"
										},
										{
											"begin": 3400,
											"end": 3430,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3334,
											"end": 3437,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3334,
											"end": 3437,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 7461,
											"end": 7694,
											"name": "tag",
											"source": 1,
											"value": "67"
										},
										{
											"begin": 7461,
											"end": 7694,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7544,
											"end": 7566,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "98"
										},
										{
											"begin": 7552,
											"end": 7556,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 7558,
											"end": 7565,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 7544,
											"end": 7551,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "38"
										},
										{
											"begin": 7544,
											"end": 7566,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 7544,
											"end": 7566,
											"name": "tag",
											"source": 1,
											"value": "98"
										},
										{
											"begin": 7544,
											"end": 7566,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7539,
											"end": 7688,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "99"
										},
										{
											"begin": 7539,
											"end": 7688,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 7614,
											"end": 7618,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 7582,
											"end": 7588,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7582,
											"end": 7594,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 7589,
											"end": 7593,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 7582,
											"end": 7594,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7582,
											"end": 7594,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7582,
											"end": 7594,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 7582,
											"end": 7594,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7582,
											"end": 7594,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7582,
											"end": 7594,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7582,
											"end": 7594,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7582,
											"end": 7594,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 7582,
											"end": 7594,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7582,
											"end": 7594,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7582,
											"end": 7594,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 7582,
											"end": 7602,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7582,
											"end": 7602,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7582,
											"end": 7611,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7603,
											"end": 7610,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 7582,
											"end": 7611,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7582,
											"end": 7611,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 7582,
											"end": 7611,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7582,
											"end": 7611,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 7582,
											"end": 7611,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7582,
											"end": 7611,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7582,
											"end": 7611,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 7582,
											"end": 7611,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7582,
											"end": 7611,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7582,
											"end": 7611,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7582,
											"end": 7611,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7582,
											"end": 7611,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 7582,
											"end": 7611,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7582,
											"end": 7611,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7582,
											"end": 7611,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 7582,
											"end": 7611,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7582,
											"end": 7618,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 7582,
											"end": 7618,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 7582,
											"end": 7618,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7582,
											"end": 7618,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 7582,
											"end": 7618,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7582,
											"end": 7618,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 7582,
											"end": 7618,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 7582,
											"end": 7618,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 7582,
											"end": 7618,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 7582,
											"end": 7618,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7582,
											"end": 7618,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 7582,
											"end": 7618,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 7582,
											"end": 7618,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 7582,
											"end": 7618,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 7582,
											"end": 7618,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 7582,
											"end": 7618,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7582,
											"end": 7618,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 7582,
											"end": 7618,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7664,
											"end": 7676,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 7664,
											"end": 7674,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "70"
										},
										{
											"begin": 7664,
											"end": 7676,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 7664,
											"end": 7676,
											"name": "tag",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 7664,
											"end": 7676,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7637,
											"end": 7677,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7637,
											"end": 7677,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 7655,
											"end": 7662,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7637,
											"end": 7677,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7637,
											"end": 7677,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 7649,
											"end": 7653,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 7637,
											"end": 7677,
											"name": "PUSH",
											"source": 1,
											"value": "2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D"
										},
										{
											"begin": 7637,
											"end": 7677,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 7637,
											"end": 7677,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 7637,
											"end": 7677,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 7637,
											"end": 7677,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 7637,
											"end": 7677,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 7637,
											"end": 7677,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 7637,
											"end": 7677,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 7637,
											"end": 7677,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7637,
											"end": 7677,
											"name": "LOG4",
											"source": 1
										},
										{
											"begin": 7539,
											"end": 7688,
											"name": "tag",
											"source": 1,
											"value": "99"
										},
										{
											"begin": 7539,
											"end": 7688,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7461,
											"end": 7694,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7461,
											"end": 7694,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7461,
											"end": 7694,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 640,
											"end": 736,
											"name": "tag",
											"source": 3,
											"value": "70"
										},
										{
											"begin": 640,
											"end": 736,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 693,
											"end": 700,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 712,
											"end": 729,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 712,
											"end": 729,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 640,
											"end": 736,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 640,
											"end": 736,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 7865,
											"end": 8099,
											"name": "tag",
											"source": 1,
											"value": "75"
										},
										{
											"begin": 7865,
											"end": 8099,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7948,
											"end": 7970,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "103"
										},
										{
											"begin": 7956,
											"end": 7960,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 7962,
											"end": 7969,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 7948,
											"end": 7955,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "38"
										},
										{
											"begin": 7948,
											"end": 7970,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 7948,
											"end": 7970,
											"name": "tag",
											"source": 1,
											"value": "103"
										},
										{
											"begin": 7948,
											"end": 7970,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7944,
											"end": 8093,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 7944,
											"end": 8093,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "104"
										},
										{
											"begin": 7944,
											"end": 8093,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 8018,
											"end": 8023,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7986,
											"end": 7992,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 7986,
											"end": 7998,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7993,
											"end": 7997,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 7986,
											"end": 7998,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7986,
											"end": 7998,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7986,
											"end": 7998,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 7986,
											"end": 7998,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7986,
											"end": 7998,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7986,
											"end": 7998,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7986,
											"end": 7998,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7986,
											"end": 7998,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 7986,
											"end": 7998,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7986,
											"end": 7998,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7986,
											"end": 7998,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 7986,
											"end": 8006,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7986,
											"end": 8006,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7986,
											"end": 8015,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 8007,
											"end": 8014,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 7986,
											"end": 8015,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7986,
											"end": 8015,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 7986,
											"end": 8015,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7986,
											"end": 8015,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 7986,
											"end": 8015,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7986,
											"end": 8015,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7986,
											"end": 8015,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 7986,
											"end": 8015,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7986,
											"end": 8015,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7986,
											"end": 8015,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7986,
											"end": 8015,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7986,
											"end": 8015,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 7986,
											"end": 8015,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7986,
											"end": 8015,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7986,
											"end": 8015,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 7986,
											"end": 8015,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7986,
											"end": 8023,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 7986,
											"end": 8023,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 7986,
											"end": 8023,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7986,
											"end": 8023,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 7986,
											"end": 8023,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7986,
											"end": 8023,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 7986,
											"end": 8023,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 7986,
											"end": 8023,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 7986,
											"end": 8023,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 7986,
											"end": 8023,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7986,
											"end": 8023,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 7986,
											"end": 8023,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 7986,
											"end": 8023,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 7986,
											"end": 8023,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 7986,
											"end": 8023,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 7986,
											"end": 8023,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7986,
											"end": 8023,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 7986,
											"end": 8023,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 8069,
											"end": 8081,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "105"
										},
										{
											"begin": 8069,
											"end": 8079,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "70"
										},
										{
											"begin": 8069,
											"end": 8081,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 8069,
											"end": 8081,
											"name": "tag",
											"source": 1,
											"value": "105"
										},
										{
											"begin": 8069,
											"end": 8081,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 8042,
											"end": 8082,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8042,
											"end": 8082,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 8060,
											"end": 8067,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8042,
											"end": 8082,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8042,
											"end": 8082,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 8054,
											"end": 8058,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 8042,
											"end": 8082,
											"name": "PUSH",
											"source": 1,
											"value": "F6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B"
										},
										{
											"begin": 8042,
											"end": 8082,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 8042,
											"end": 8082,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 8042,
											"end": 8082,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 8042,
											"end": 8082,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 8042,
											"end": 8082,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 8042,
											"end": 8082,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 8042,
											"end": 8082,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 8042,
											"end": 8082,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8042,
											"end": 8082,
											"name": "LOG4",
											"source": 1
										},
										{
											"begin": 7944,
											"end": 8093,
											"name": "tag",
											"source": 1,
											"value": "104"
										},
										{
											"begin": 7944,
											"end": 8093,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7865,
											"end": 8099,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7865,
											"end": 8099,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7865,
											"end": 8099,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 3718,
											"end": 4197,
											"name": "tag",
											"source": 1,
											"value": "96"
										},
										{
											"begin": 3718,
											"end": 4197,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3806,
											"end": 3828,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "107"
										},
										{
											"begin": 3814,
											"end": 3818,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 3820,
											"end": 3827,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 3806,
											"end": 3813,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "38"
										},
										{
											"begin": 3806,
											"end": 3828,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3806,
											"end": 3828,
											"name": "tag",
											"source": 1,
											"value": "107"
										},
										{
											"begin": 3806,
											"end": 3828,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3801,
											"end": 4191,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "108"
										},
										{
											"begin": 3801,
											"end": 4191,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3989,
											"end": 4017,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "109"
										},
										{
											"begin": 4009,
											"end": 4016,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3989,
											"end": 4008,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "110"
										},
										{
											"begin": 3989,
											"end": 4017,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3989,
											"end": 4017,
											"name": "tag",
											"source": 1,
											"value": "109"
										},
										{
											"begin": 3989,
											"end": 4017,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4088,
											"end": 4126,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "111"
										},
										{
											"begin": 4116,
											"end": 4120,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 4108,
											"end": 4121,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4108,
											"end": 4121,
											"name": "SHR",
											"source": 1
										},
										{
											"begin": 4123,
											"end": 4125,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4088,
											"end": 4107,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "112"
										},
										{
											"begin": 4088,
											"end": 4126,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4088,
											"end": 4126,
											"name": "tag",
											"source": 1,
											"value": "111"
										},
										{
											"begin": 4088,
											"end": 4126,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3896,
											"end": 4148,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3896,
											"end": 4148,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3896,
											"end": 4148,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3896,
											"end": 4148,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3896,
											"end": 4148,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "113"
										},
										{
											"begin": 3896,
											"end": 4148,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 3896,
											"end": 4148,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3896,
											"end": 4148,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3896,
											"end": 4148,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "114"
										},
										{
											"begin": 3896,
											"end": 4148,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3896,
											"end": 4148,
											"name": "tag",
											"source": 1,
											"value": "113"
										},
										{
											"begin": 3896,
											"end": 4148,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3896,
											"end": 4148,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3896,
											"end": 4148,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3896,
											"end": 4148,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3896,
											"end": 4148,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3896,
											"end": 4148,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 3896,
											"end": 4148,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 3896,
											"end": 4148,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 3896,
											"end": 4148,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3896,
											"end": 4148,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3896,
											"end": 4148,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3896,
											"end": 4148,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3896,
											"end": 4148,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3844,
											"end": 4180,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3844,
											"end": 4180,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3844,
											"end": 4180,
											"name": "PUSH",
											"source": 1,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3844,
											"end": 4180,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3844,
											"end": 4180,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3844,
											"end": 4180,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 3844,
											"end": 4180,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3844,
											"end": 4180,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "115"
										},
										{
											"begin": 3844,
											"end": 4180,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3844,
											"end": 4180,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3844,
											"end": 4180,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "116"
										},
										{
											"begin": 3844,
											"end": 4180,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3844,
											"end": 4180,
											"name": "tag",
											"source": 1,
											"value": "115"
										},
										{
											"begin": 3844,
											"end": 4180,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3844,
											"end": 4180,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3844,
											"end": 4180,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3844,
											"end": 4180,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3844,
											"end": 4180,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3844,
											"end": 4180,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 3844,
											"end": 4180,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3844,
											"end": 4180,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 3801,
											"end": 4191,
											"name": "tag",
											"source": 1,
											"value": "108"
										},
										{
											"begin": 3801,
											"end": 4191,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3718,
											"end": 4197,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3718,
											"end": 4197,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3718,
											"end": 4197,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 2102,
											"end": 2251,
											"name": "tag",
											"source": 4,
											"value": "110"
										},
										{
											"begin": 2102,
											"end": 2251,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2160,
											"end": 2173,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 2192,
											"end": 2244,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "118"
										},
										{
											"begin": 2220,
											"end": 2224,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2204,
											"end": 2226,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2204,
											"end": 2226,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 311,
											"end": 313,
											"name": "PUSH",
											"source": 4,
											"value": "14"
										},
										{
											"begin": 2192,
											"end": 2244,
											"name": "PUSH",
											"source": 4,
											"value": "FF"
										},
										{
											"begin": 2192,
											"end": 2244,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 2192,
											"end": 2203,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "112"
										},
										{
											"begin": 2192,
											"end": 2244,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2192,
											"end": 2244,
											"name": "tag",
											"source": 4,
											"value": "118"
										},
										{
											"begin": 2192,
											"end": 2244,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2185,
											"end": 2244,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2185,
											"end": 2244,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2102,
											"end": 2251,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2102,
											"end": 2251,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2102,
											"end": 2251,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2102,
											"end": 2251,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 1513,
											"end": 1950,
											"name": "tag",
											"source": 4,
											"value": "112"
										},
										{
											"begin": 1513,
											"end": 1950,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1588,
											"end": 1601,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 1613,
											"end": 1632,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1658,
											"end": 1659,
											"name": "PUSH",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 1649,
											"end": 1655,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1645,
											"end": 1646,
											"name": "PUSH",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 1645,
											"end": 1655,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "120"
										},
										{
											"begin": 1645,
											"end": 1655,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1645,
											"end": 1655,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1645,
											"end": 1655,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "91"
										},
										{
											"begin": 1645,
											"end": 1655,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1645,
											"end": 1655,
											"name": "tag",
											"source": 4,
											"value": "120"
										},
										{
											"begin": 1645,
											"end": 1655,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1645,
											"end": 1659,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "121"
										},
										{
											"begin": 1645,
											"end": 1659,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1645,
											"end": 1659,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1645,
											"end": 1659,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "81"
										},
										{
											"begin": 1645,
											"end": 1659,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1645,
											"end": 1659,
											"name": "tag",
											"source": 4,
											"value": "121"
										},
										{
											"begin": 1645,
											"end": 1659,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "122"
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "123"
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "124"
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "tag",
											"source": 4,
											"value": "123"
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "tag",
											"source": 4,
											"value": "122"
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "125"
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "MUL",
											"source": 4
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "CALLDATACOPY",
											"source": 4
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "tag",
											"source": 4,
											"value": "125"
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1635,
											"end": 1660,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1613,
											"end": 1660,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1613,
											"end": 1660,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1670,
											"end": 1685,
											"name": "PUSH",
											"source": 4,
											"value": "3000000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1670,
											"end": 1676,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1677,
											"end": 1678,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1670,
											"end": 1679,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1670,
											"end": 1679,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1670,
											"end": 1679,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1670,
											"end": 1679,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 1670,
											"end": 1679,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "126"
										},
										{
											"begin": 1670,
											"end": 1679,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1670,
											"end": 1679,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "127"
										},
										{
											"begin": 1670,
											"end": 1679,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "128"
										},
										{
											"begin": 1670,
											"end": 1679,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1670,
											"end": 1679,
											"name": "tag",
											"source": 4,
											"value": "127"
										},
										{
											"begin": 1670,
											"end": 1679,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1670,
											"end": 1679,
											"name": "tag",
											"source": 4,
											"value": "126"
										},
										{
											"begin": 1670,
											"end": 1679,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1670,
											"end": 1679,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1670,
											"end": 1679,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1670,
											"end": 1679,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1670,
											"end": 1685,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1670,
											"end": 1685,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1670,
											"end": 1685,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 1670,
											"end": 1685,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1670,
											"end": 1685,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1670,
											"end": 1685,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1670,
											"end": 1685,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1670,
											"end": 1685,
											"name": "BYTE",
											"source": 4
										},
										{
											"begin": 1670,
											"end": 1685,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1670,
											"end": 1685,
											"name": "MSTORE8",
											"source": 4
										},
										{
											"begin": 1670,
											"end": 1685,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1695,
											"end": 1710,
											"name": "PUSH",
											"source": 4,
											"value": "7800000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1695,
											"end": 1701,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1702,
											"end": 1703,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 1695,
											"end": 1704,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1695,
											"end": 1704,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1695,
											"end": 1704,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1695,
											"end": 1704,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 1695,
											"end": 1704,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "129"
										},
										{
											"begin": 1695,
											"end": 1704,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1695,
											"end": 1704,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "130"
										},
										{
											"begin": 1695,
											"end": 1704,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "128"
										},
										{
											"begin": 1695,
											"end": 1704,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1695,
											"end": 1704,
											"name": "tag",
											"source": 4,
											"value": "130"
										},
										{
											"begin": 1695,
											"end": 1704,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1695,
											"end": 1704,
											"name": "tag",
											"source": 4,
											"value": "129"
										},
										{
											"begin": 1695,
											"end": 1704,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1695,
											"end": 1704,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1695,
											"end": 1704,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1695,
											"end": 1704,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1695,
											"end": 1710,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1695,
											"end": 1710,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1695,
											"end": 1710,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 1695,
											"end": 1710,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1695,
											"end": 1710,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1695,
											"end": 1710,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1695,
											"end": 1710,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1695,
											"end": 1710,
											"name": "BYTE",
											"source": 4
										},
										{
											"begin": 1695,
											"end": 1710,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1695,
											"end": 1710,
											"name": "MSTORE8",
											"source": 4
										},
										{
											"begin": 1695,
											"end": 1710,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1725,
											"end": 1734,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1750,
											"end": 1751,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 1741,
											"end": 1747,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 1737,
											"end": 1738,
											"name": "PUSH",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 1737,
											"end": 1747,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "134"
										},
										{
											"begin": 1737,
											"end": 1747,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1737,
											"end": 1747,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1737,
											"end": 1747,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "91"
										},
										{
											"begin": 1737,
											"end": 1747,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1737,
											"end": 1747,
											"name": "tag",
											"source": 4,
											"value": "134"
										},
										{
											"begin": 1737,
											"end": 1747,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1737,
											"end": 1751,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "135"
										},
										{
											"begin": 1737,
											"end": 1751,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1737,
											"end": 1751,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1737,
											"end": 1751,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "81"
										},
										{
											"begin": 1737,
											"end": 1751,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1737,
											"end": 1751,
											"name": "tag",
											"source": 4,
											"value": "135"
										},
										{
											"begin": 1737,
											"end": 1751,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1725,
											"end": 1751,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1725,
											"end": 1751,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1720,
											"end": 1848,
											"name": "tag",
											"source": 4,
											"value": "131"
										},
										{
											"begin": 1720,
											"end": 1848,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1757,
											"end": 1758,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 1753,
											"end": 1754,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1753,
											"end": 1758,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 1720,
											"end": 1848,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 1720,
											"end": 1848,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "132"
										},
										{
											"begin": 1720,
											"end": 1848,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1791,
											"end": 1799,
											"name": "PUSH",
											"source": 4,
											"value": "3031323334353637383961626364656600000000000000000000000000000000"
										},
										{
											"begin": 1808,
											"end": 1811,
											"name": "PUSH",
											"source": 4,
											"value": "F"
										},
										{
											"begin": 1800,
											"end": 1805,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 1800,
											"end": 1811,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1791,
											"end": 1812,
											"name": "PUSH",
											"source": 4,
											"value": "10"
										},
										{
											"begin": 1791,
											"end": 1812,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1791,
											"end": 1812,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 1791,
											"end": 1812,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "136"
										},
										{
											"begin": 1791,
											"end": 1812,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1791,
											"end": 1812,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "137"
										},
										{
											"begin": 1791,
											"end": 1812,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "128"
										},
										{
											"begin": 1791,
											"end": 1812,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1791,
											"end": 1812,
											"name": "tag",
											"source": 4,
											"value": "137"
										},
										{
											"begin": 1791,
											"end": 1812,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1791,
											"end": 1812,
											"name": "tag",
											"source": 4,
											"value": "136"
										},
										{
											"begin": 1791,
											"end": 1812,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1791,
											"end": 1812,
											"name": "BYTE",
											"source": 4
										},
										{
											"begin": 1791,
											"end": 1812,
											"name": "PUSH",
											"source": 4,
											"value": "F8"
										},
										{
											"begin": 1791,
											"end": 1812,
											"name": "SHL",
											"source": 4
										},
										{
											"begin": 1779,
											"end": 1785,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1786,
											"end": 1787,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1779,
											"end": 1788,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1779,
											"end": 1788,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1779,
											"end": 1788,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1779,
											"end": 1788,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 1779,
											"end": 1788,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "138"
										},
										{
											"begin": 1779,
											"end": 1788,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1779,
											"end": 1788,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "139"
										},
										{
											"begin": 1779,
											"end": 1788,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "128"
										},
										{
											"begin": 1779,
											"end": 1788,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1779,
											"end": 1788,
											"name": "tag",
											"source": 4,
											"value": "139"
										},
										{
											"begin": 1779,
											"end": 1788,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1779,
											"end": 1788,
											"name": "tag",
											"source": 4,
											"value": "138"
										},
										{
											"begin": 1779,
											"end": 1788,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1779,
											"end": 1788,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1779,
											"end": 1788,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1779,
											"end": 1788,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1779,
											"end": 1812,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1779,
											"end": 1812,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1779,
											"end": 1812,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 1779,
											"end": 1812,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1779,
											"end": 1812,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1779,
											"end": 1812,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1779,
											"end": 1812,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1779,
											"end": 1812,
											"name": "BYTE",
											"source": 4
										},
										{
											"begin": 1779,
											"end": 1812,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1779,
											"end": 1812,
											"name": "MSTORE8",
											"source": 4
										},
										{
											"begin": 1779,
											"end": 1812,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1836,
											"end": 1837,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1826,
											"end": 1837,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 1826,
											"end": 1837,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1826,
											"end": 1837,
											"name": "SHR",
											"source": 4
										},
										{
											"begin": 1826,
											"end": 1837,
											"name": "SWAP5",
											"source": 4
										},
										{
											"begin": 1826,
											"end": 1837,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1760,
											"end": 1763,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1760,
											"end": 1763,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "140"
										},
										{
											"begin": 1760,
											"end": 1763,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1760,
											"end": 1763,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "141"
										},
										{
											"begin": 1760,
											"end": 1763,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1760,
											"end": 1763,
											"name": "tag",
											"source": 4,
											"value": "140"
										},
										{
											"begin": 1760,
											"end": 1763,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1760,
											"end": 1763,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1760,
											"end": 1763,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1720,
											"end": 1848,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "131"
										},
										{
											"begin": 1720,
											"end": 1848,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1720,
											"end": 1848,
											"name": "tag",
											"source": 4,
											"value": "132"
										},
										{
											"begin": 1720,
											"end": 1848,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1720,
											"end": 1848,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1874,
											"end": 1875,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1865,
											"end": 1870,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 1865,
											"end": 1875,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 1857,
											"end": 1912,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "142"
										},
										{
											"begin": 1857,
											"end": 1912,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1857,
											"end": 1912,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1857,
											"end": 1912,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1857,
											"end": 1912,
											"name": "PUSH",
											"source": 4,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1857,
											"end": 1912,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1857,
											"end": 1912,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1857,
											"end": 1912,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1857,
											"end": 1912,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1857,
											"end": 1912,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "143"
										},
										{
											"begin": 1857,
											"end": 1912,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1857,
											"end": 1912,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "144"
										},
										{
											"begin": 1857,
											"end": 1912,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1857,
											"end": 1912,
											"name": "tag",
											"source": 4,
											"value": "143"
										},
										{
											"begin": 1857,
											"end": 1912,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1857,
											"end": 1912,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1857,
											"end": 1912,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1857,
											"end": 1912,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1857,
											"end": 1912,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1857,
											"end": 1912,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 1857,
											"end": 1912,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1857,
											"end": 1912,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 1857,
											"end": 1912,
											"name": "tag",
											"source": 4,
											"value": "142"
										},
										{
											"begin": 1857,
											"end": 1912,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1936,
											"end": 1942,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1922,
											"end": 1943,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1922,
											"end": 1943,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1922,
											"end": 1943,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1513,
											"end": 1950,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 1513,
											"end": 1950,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1513,
											"end": 1950,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1513,
											"end": 1950,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1513,
											"end": 1950,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 7,
											"end": 146,
											"name": "tag",
											"source": 8,
											"value": "146"
										},
										{
											"begin": 7,
											"end": 146,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 53,
											"end": 58,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 91,
											"end": 97,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 78,
											"end": 98,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 69,
											"end": 98,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 69,
											"end": 98,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 107,
											"end": 140,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "148"
										},
										{
											"begin": 134,
											"end": 139,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 107,
											"end": 140,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "149"
										},
										{
											"begin": 107,
											"end": 140,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 107,
											"end": 140,
											"name": "tag",
											"source": 8,
											"value": "148"
										},
										{
											"begin": 107,
											"end": 140,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7,
											"end": 146,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 7,
											"end": 146,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 7,
											"end": 146,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7,
											"end": 146,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7,
											"end": 146,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 152,
											"end": 291,
											"name": "tag",
											"source": 8,
											"value": "150"
										},
										{
											"begin": 152,
											"end": 291,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 198,
											"end": 203,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 236,
											"end": 242,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 223,
											"end": 243,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 214,
											"end": 243,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 214,
											"end": 243,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 252,
											"end": 285,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "152"
										},
										{
											"begin": 279,
											"end": 284,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 252,
											"end": 285,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "153"
										},
										{
											"begin": 252,
											"end": 285,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 252,
											"end": 285,
											"name": "tag",
											"source": 8,
											"value": "152"
										},
										{
											"begin": 252,
											"end": 285,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 152,
											"end": 291,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 152,
											"end": 291,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 152,
											"end": 291,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 152,
											"end": 291,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 152,
											"end": 291,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 297,
											"end": 434,
											"name": "tag",
											"source": 8,
											"value": "154"
										},
										{
											"begin": 297,
											"end": 434,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 342,
											"end": 347,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 380,
											"end": 386,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 367,
											"end": 387,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 358,
											"end": 387,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 358,
											"end": 387,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 396,
											"end": 428,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "156"
										},
										{
											"begin": 422,
											"end": 427,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 396,
											"end": 428,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "157"
										},
										{
											"begin": 396,
											"end": 428,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 396,
											"end": 428,
											"name": "tag",
											"source": 8,
											"value": "156"
										},
										{
											"begin": 396,
											"end": 428,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 297,
											"end": 434,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 297,
											"end": 434,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 297,
											"end": 434,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 297,
											"end": 434,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 297,
											"end": 434,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 440,
											"end": 579,
											"name": "tag",
											"source": 8,
											"value": "158"
										},
										{
											"begin": 440,
											"end": 579,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 486,
											"end": 491,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 524,
											"end": 530,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 511,
											"end": 531,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 502,
											"end": 531,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 502,
											"end": 531,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 540,
											"end": 573,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "160"
										},
										{
											"begin": 567,
											"end": 572,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 540,
											"end": 573,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "161"
										},
										{
											"begin": 540,
											"end": 573,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 540,
											"end": 573,
											"name": "tag",
											"source": 8,
											"value": "160"
										},
										{
											"begin": 540,
											"end": 573,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 440,
											"end": 579,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 440,
											"end": 579,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 440,
											"end": 579,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 440,
											"end": 579,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 440,
											"end": 579,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 585,
											"end": 914,
											"name": "tag",
											"source": 8,
											"value": "22"
										},
										{
											"begin": 585,
											"end": 914,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 644,
											"end": 650,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 693,
											"end": 695,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 681,
											"end": 690,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 672,
											"end": 679,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 668,
											"end": 691,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 664,
											"end": 696,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 661,
											"end": 780,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 661,
											"end": 780,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "163"
										},
										{
											"begin": 661,
											"end": 780,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 699,
											"end": 778,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "164"
										},
										{
											"begin": 699,
											"end": 778,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "165"
										},
										{
											"begin": 699,
											"end": 778,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 699,
											"end": 778,
											"name": "tag",
											"source": 8,
											"value": "164"
										},
										{
											"begin": 699,
											"end": 778,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 661,
											"end": 780,
											"name": "tag",
											"source": 8,
											"value": "163"
										},
										{
											"begin": 661,
											"end": 780,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 819,
											"end": 820,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 844,
											"end": 897,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "166"
										},
										{
											"begin": 889,
											"end": 896,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 880,
											"end": 886,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 869,
											"end": 878,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 865,
											"end": 887,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 844,
											"end": 897,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "150"
										},
										{
											"begin": 844,
											"end": 897,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 844,
											"end": 897,
											"name": "tag",
											"source": 8,
											"value": "166"
										},
										{
											"begin": 844,
											"end": 897,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 834,
											"end": 897,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 834,
											"end": 897,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 790,
											"end": 907,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 585,
											"end": 914,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 585,
											"end": 914,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 585,
											"end": 914,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 585,
											"end": 914,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 585,
											"end": 914,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 920,
											"end": 1394,
											"name": "tag",
											"source": 8,
											"value": "28"
										},
										{
											"begin": 920,
											"end": 1394,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 988,
											"end": 994,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 996,
											"end": 1002,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1045,
											"end": 1047,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1033,
											"end": 1042,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1024,
											"end": 1031,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1020,
											"end": 1043,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1016,
											"end": 1048,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 1013,
											"end": 1132,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1013,
											"end": 1132,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "168"
										},
										{
											"begin": 1013,
											"end": 1132,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1051,
											"end": 1130,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "169"
										},
										{
											"begin": 1051,
											"end": 1130,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "165"
										},
										{
											"begin": 1051,
											"end": 1130,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1051,
											"end": 1130,
											"name": "tag",
											"source": 8,
											"value": "169"
										},
										{
											"begin": 1051,
											"end": 1130,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1013,
											"end": 1132,
											"name": "tag",
											"source": 8,
											"value": "168"
										},
										{
											"begin": 1013,
											"end": 1132,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1171,
											"end": 1172,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1196,
											"end": 1249,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "170"
										},
										{
											"begin": 1241,
											"end": 1248,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1232,
											"end": 1238,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1221,
											"end": 1230,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 1217,
											"end": 1239,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1196,
											"end": 1249,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "150"
										},
										{
											"begin": 1196,
											"end": 1249,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1196,
											"end": 1249,
											"name": "tag",
											"source": 8,
											"value": "170"
										},
										{
											"begin": 1196,
											"end": 1249,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1186,
											"end": 1249,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1186,
											"end": 1249,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1142,
											"end": 1259,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1298,
											"end": 1300,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1324,
											"end": 1377,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "171"
										},
										{
											"begin": 1369,
											"end": 1376,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1360,
											"end": 1366,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1349,
											"end": 1358,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 1345,
											"end": 1367,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1324,
											"end": 1377,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "146"
										},
										{
											"begin": 1324,
											"end": 1377,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1324,
											"end": 1377,
											"name": "tag",
											"source": 8,
											"value": "171"
										},
										{
											"begin": 1324,
											"end": 1377,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1314,
											"end": 1377,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1314,
											"end": 1377,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1269,
											"end": 1387,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 920,
											"end": 1394,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 920,
											"end": 1394,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 920,
											"end": 1394,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 920,
											"end": 1394,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 920,
											"end": 1394,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 920,
											"end": 1394,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 1400,
											"end": 1727,
											"name": "tag",
											"source": 8,
											"value": "16"
										},
										{
											"begin": 1400,
											"end": 1727,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1458,
											"end": 1464,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1507,
											"end": 1509,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1495,
											"end": 1504,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1486,
											"end": 1493,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1482,
											"end": 1505,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1478,
											"end": 1510,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 1475,
											"end": 1594,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1475,
											"end": 1594,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "173"
										},
										{
											"begin": 1475,
											"end": 1594,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1513,
											"end": 1592,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "174"
										},
										{
											"begin": 1513,
											"end": 1592,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "165"
										},
										{
											"begin": 1513,
											"end": 1592,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1513,
											"end": 1592,
											"name": "tag",
											"source": 8,
											"value": "174"
										},
										{
											"begin": 1513,
											"end": 1592,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1475,
											"end": 1594,
											"name": "tag",
											"source": 8,
											"value": "173"
										},
										{
											"begin": 1475,
											"end": 1594,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1633,
											"end": 1634,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1658,
											"end": 1710,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "175"
										},
										{
											"begin": 1702,
											"end": 1709,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1693,
											"end": 1699,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1682,
											"end": 1691,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1678,
											"end": 1700,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1658,
											"end": 1710,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "154"
										},
										{
											"begin": 1658,
											"end": 1710,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1658,
											"end": 1710,
											"name": "tag",
											"source": 8,
											"value": "175"
										},
										{
											"begin": 1658,
											"end": 1710,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1648,
											"end": 1710,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1648,
											"end": 1710,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1604,
											"end": 1720,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1400,
											"end": 1727,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1400,
											"end": 1727,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1400,
											"end": 1727,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1400,
											"end": 1727,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1400,
											"end": 1727,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 1733,
											"end": 2207,
											"name": "tag",
											"source": 8,
											"value": "45"
										},
										{
											"begin": 1733,
											"end": 2207,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1801,
											"end": 1807,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1809,
											"end": 1815,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1858,
											"end": 1860,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1846,
											"end": 1855,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1837,
											"end": 1844,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1833,
											"end": 1856,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1829,
											"end": 1861,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 1826,
											"end": 1945,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1826,
											"end": 1945,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "177"
										},
										{
											"begin": 1826,
											"end": 1945,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1864,
											"end": 1943,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "178"
										},
										{
											"begin": 1864,
											"end": 1943,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "165"
										},
										{
											"begin": 1864,
											"end": 1943,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1864,
											"end": 1943,
											"name": "tag",
											"source": 8,
											"value": "178"
										},
										{
											"begin": 1864,
											"end": 1943,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1826,
											"end": 1945,
											"name": "tag",
											"source": 8,
											"value": "177"
										},
										{
											"begin": 1826,
											"end": 1945,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1984,
											"end": 1985,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2009,
											"end": 2062,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "179"
										},
										{
											"begin": 2054,
											"end": 2061,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 2045,
											"end": 2051,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2034,
											"end": 2043,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 2030,
											"end": 2052,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2009,
											"end": 2062,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "158"
										},
										{
											"begin": 2009,
											"end": 2062,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 2009,
											"end": 2062,
											"name": "tag",
											"source": 8,
											"value": "179"
										},
										{
											"begin": 2009,
											"end": 2062,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1999,
											"end": 2062,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1999,
											"end": 2062,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1955,
											"end": 2072,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2111,
											"end": 2113,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2137,
											"end": 2190,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "180"
										},
										{
											"begin": 2182,
											"end": 2189,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 2173,
											"end": 2179,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2162,
											"end": 2171,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 2158,
											"end": 2180,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2137,
											"end": 2190,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "158"
										},
										{
											"begin": 2137,
											"end": 2190,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 2137,
											"end": 2190,
											"name": "tag",
											"source": 8,
											"value": "180"
										},
										{
											"begin": 2137,
											"end": 2190,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2127,
											"end": 2190,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2127,
											"end": 2190,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2082,
											"end": 2200,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1733,
											"end": 2207,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1733,
											"end": 2207,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1733,
											"end": 2207,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1733,
											"end": 2207,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1733,
											"end": 2207,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1733,
											"end": 2207,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 2213,
											"end": 2322,
											"name": "tag",
											"source": 8,
											"value": "181"
										},
										{
											"begin": 2213,
											"end": 2322,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2294,
											"end": 2315,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "183"
										},
										{
											"begin": 2309,
											"end": 2314,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2294,
											"end": 2315,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "184"
										},
										{
											"begin": 2294,
											"end": 2315,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 2294,
											"end": 2315,
											"name": "tag",
											"source": 8,
											"value": "183"
										},
										{
											"begin": 2294,
											"end": 2315,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2289,
											"end": 2292,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2282,
											"end": 2316,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2213,
											"end": 2322,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2213,
											"end": 2322,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2213,
											"end": 2322,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 2328,
											"end": 2446,
											"name": "tag",
											"source": 8,
											"value": "185"
										},
										{
											"begin": 2328,
											"end": 2446,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2415,
											"end": 2439,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "187"
										},
										{
											"begin": 2433,
											"end": 2438,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2415,
											"end": 2439,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "188"
										},
										{
											"begin": 2415,
											"end": 2439,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 2415,
											"end": 2439,
											"name": "tag",
											"source": 8,
											"value": "187"
										},
										{
											"begin": 2415,
											"end": 2439,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2410,
											"end": 2413,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2403,
											"end": 2440,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2328,
											"end": 2446,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2328,
											"end": 2446,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2328,
											"end": 2446,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 2452,
											"end": 2816,
											"name": "tag",
											"source": 8,
											"value": "189"
										},
										{
											"begin": 2452,
											"end": 2816,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2540,
											"end": 2543,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2568,
											"end": 2607,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "191"
										},
										{
											"begin": 2601,
											"end": 2606,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2568,
											"end": 2607,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "192"
										},
										{
											"begin": 2568,
											"end": 2607,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 2568,
											"end": 2607,
											"name": "tag",
											"source": 8,
											"value": "191"
										},
										{
											"begin": 2568,
											"end": 2607,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2623,
											"end": 2694,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "193"
										},
										{
											"begin": 2687,
											"end": 2693,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2682,
											"end": 2685,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 2623,
											"end": 2694,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "194"
										},
										{
											"begin": 2623,
											"end": 2694,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 2623,
											"end": 2694,
											"name": "tag",
											"source": 8,
											"value": "193"
										},
										{
											"begin": 2623,
											"end": 2694,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2616,
											"end": 2694,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 2616,
											"end": 2694,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2703,
											"end": 2755,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "195"
										},
										{
											"begin": 2748,
											"end": 2754,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2743,
											"end": 2746,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 2736,
											"end": 2740,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2729,
											"end": 2734,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 2725,
											"end": 2741,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2703,
											"end": 2755,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "196"
										},
										{
											"begin": 2703,
											"end": 2755,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 2703,
											"end": 2755,
											"name": "tag",
											"source": 8,
											"value": "195"
										},
										{
											"begin": 2703,
											"end": 2755,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2780,
											"end": 2809,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "197"
										},
										{
											"begin": 2802,
											"end": 2808,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2780,
											"end": 2809,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "198"
										},
										{
											"begin": 2780,
											"end": 2809,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 2780,
											"end": 2809,
											"name": "tag",
											"source": 8,
											"value": "197"
										},
										{
											"begin": 2780,
											"end": 2809,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2775,
											"end": 2778,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 2771,
											"end": 2810,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2764,
											"end": 2810,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2764,
											"end": 2810,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2544,
											"end": 2816,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2452,
											"end": 2816,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 2452,
											"end": 2816,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2452,
											"end": 2816,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2452,
											"end": 2816,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2452,
											"end": 2816,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 2822,
											"end": 3199,
											"name": "tag",
											"source": 8,
											"value": "199"
										},
										{
											"begin": 2822,
											"end": 3199,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2928,
											"end": 2931,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2956,
											"end": 2995,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "201"
										},
										{
											"begin": 2989,
											"end": 2994,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2956,
											"end": 2995,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "192"
										},
										{
											"begin": 2956,
											"end": 2995,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 2956,
											"end": 2995,
											"name": "tag",
											"source": 8,
											"value": "201"
										},
										{
											"begin": 2956,
											"end": 2995,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3011,
											"end": 3100,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "202"
										},
										{
											"begin": 3093,
											"end": 3099,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3088,
											"end": 3091,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 3011,
											"end": 3100,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "203"
										},
										{
											"begin": 3011,
											"end": 3100,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 3011,
											"end": 3100,
											"name": "tag",
											"source": 8,
											"value": "202"
										},
										{
											"begin": 3011,
											"end": 3100,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3004,
											"end": 3100,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 3004,
											"end": 3100,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3109,
											"end": 3161,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "204"
										},
										{
											"begin": 3154,
											"end": 3160,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3149,
											"end": 3152,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 3142,
											"end": 3146,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3135,
											"end": 3140,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 3147,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3109,
											"end": 3161,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "196"
										},
										{
											"begin": 3109,
											"end": 3161,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 3109,
											"end": 3161,
											"name": "tag",
											"source": 8,
											"value": "204"
										},
										{
											"begin": 3109,
											"end": 3161,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3186,
											"end": 3192,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3181,
											"end": 3184,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 3177,
											"end": 3193,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3170,
											"end": 3193,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3170,
											"end": 3193,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2932,
											"end": 3199,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2822,
											"end": 3199,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 2822,
											"end": 3199,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2822,
											"end": 3199,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2822,
											"end": 3199,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2822,
											"end": 3199,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 3205,
											"end": 3571,
											"name": "tag",
											"source": 8,
											"value": "205"
										},
										{
											"begin": 3205,
											"end": 3571,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3347,
											"end": 3350,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3368,
											"end": 3435,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "207"
										},
										{
											"begin": 3432,
											"end": 3434,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3427,
											"end": 3430,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 3368,
											"end": 3435,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "194"
										},
										{
											"begin": 3368,
											"end": 3435,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 3368,
											"end": 3435,
											"name": "tag",
											"source": 8,
											"value": "207"
										},
										{
											"begin": 3368,
											"end": 3435,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3361,
											"end": 3435,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3361,
											"end": 3435,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3444,
											"end": 3537,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "208"
										},
										{
											"begin": 3533,
											"end": 3536,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3444,
											"end": 3537,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "209"
										},
										{
											"begin": 3444,
											"end": 3537,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 3444,
											"end": 3537,
											"name": "tag",
											"source": 8,
											"value": "208"
										},
										{
											"begin": 3444,
											"end": 3537,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3562,
											"end": 3564,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3557,
											"end": 3560,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3553,
											"end": 3565,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3546,
											"end": 3565,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3546,
											"end": 3565,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3205,
											"end": 3571,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3205,
											"end": 3571,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3205,
											"end": 3571,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3205,
											"end": 3571,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 3577,
											"end": 3979,
											"name": "tag",
											"source": 8,
											"value": "210"
										},
										{
											"begin": 3577,
											"end": 3979,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3737,
											"end": 3740,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3758,
											"end": 3843,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "212"
										},
										{
											"begin": 3840,
											"end": 3842,
											"name": "PUSH",
											"source": 8,
											"value": "17"
										},
										{
											"begin": 3835,
											"end": 3838,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 3758,
											"end": 3843,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "203"
										},
										{
											"begin": 3758,
											"end": 3843,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 3758,
											"end": 3843,
											"name": "tag",
											"source": 8,
											"value": "212"
										},
										{
											"begin": 3758,
											"end": 3843,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3751,
											"end": 3843,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3751,
											"end": 3843,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3852,
											"end": 3945,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "213"
										},
										{
											"begin": 3941,
											"end": 3944,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3852,
											"end": 3945,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "214"
										},
										{
											"begin": 3852,
											"end": 3945,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 3852,
											"end": 3945,
											"name": "tag",
											"source": 8,
											"value": "213"
										},
										{
											"begin": 3852,
											"end": 3945,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3970,
											"end": 3972,
											"name": "PUSH",
											"source": 8,
											"value": "17"
										},
										{
											"begin": 3965,
											"end": 3968,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3961,
											"end": 3973,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3954,
											"end": 3973,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3954,
											"end": 3973,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3577,
											"end": 3979,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3577,
											"end": 3979,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3577,
											"end": 3979,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3577,
											"end": 3979,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 3985,
											"end": 4387,
											"name": "tag",
											"source": 8,
											"value": "215"
										},
										{
											"begin": 3985,
											"end": 4387,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4145,
											"end": 4148,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4166,
											"end": 4251,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "217"
										},
										{
											"begin": 4248,
											"end": 4250,
											"name": "PUSH",
											"source": 8,
											"value": "11"
										},
										{
											"begin": 4243,
											"end": 4246,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 4166,
											"end": 4251,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "203"
										},
										{
											"begin": 4166,
											"end": 4251,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 4166,
											"end": 4251,
											"name": "tag",
											"source": 8,
											"value": "217"
										},
										{
											"begin": 4166,
											"end": 4251,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4159,
											"end": 4251,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4159,
											"end": 4251,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4260,
											"end": 4353,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "218"
										},
										{
											"begin": 4349,
											"end": 4352,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4260,
											"end": 4353,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "219"
										},
										{
											"begin": 4260,
											"end": 4353,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 4260,
											"end": 4353,
											"name": "tag",
											"source": 8,
											"value": "218"
										},
										{
											"begin": 4260,
											"end": 4353,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4378,
											"end": 4380,
											"name": "PUSH",
											"source": 8,
											"value": "11"
										},
										{
											"begin": 4373,
											"end": 4376,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4369,
											"end": 4381,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4362,
											"end": 4381,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4362,
											"end": 4381,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3985,
											"end": 4387,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3985,
											"end": 4387,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3985,
											"end": 4387,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3985,
											"end": 4387,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 4393,
											"end": 4759,
											"name": "tag",
											"source": 8,
											"value": "220"
										},
										{
											"begin": 4393,
											"end": 4759,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4535,
											"end": 4538,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4556,
											"end": 4623,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "222"
										},
										{
											"begin": 4620,
											"end": 4622,
											"name": "PUSH",
											"source": 8,
											"value": "2F"
										},
										{
											"begin": 4615,
											"end": 4618,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 4556,
											"end": 4623,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "194"
										},
										{
											"begin": 4556,
											"end": 4623,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 4556,
											"end": 4623,
											"name": "tag",
											"source": 8,
											"value": "222"
										},
										{
											"begin": 4556,
											"end": 4623,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4549,
											"end": 4623,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4549,
											"end": 4623,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4632,
											"end": 4725,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "223"
										},
										{
											"begin": 4721,
											"end": 4724,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4632,
											"end": 4725,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "224"
										},
										{
											"begin": 4632,
											"end": 4725,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 4632,
											"end": 4725,
											"name": "tag",
											"source": 8,
											"value": "223"
										},
										{
											"begin": 4632,
											"end": 4725,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4750,
											"end": 4752,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 4745,
											"end": 4748,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4741,
											"end": 4753,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4734,
											"end": 4753,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4734,
											"end": 4753,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4393,
											"end": 4759,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4393,
											"end": 4759,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4393,
											"end": 4759,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4393,
											"end": 4759,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 4765,
											"end": 4883,
											"name": "tag",
											"source": 8,
											"value": "225"
										},
										{
											"begin": 4765,
											"end": 4883,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4852,
											"end": 4876,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "227"
										},
										{
											"begin": 4870,
											"end": 4875,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4852,
											"end": 4876,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "228"
										},
										{
											"begin": 4852,
											"end": 4876,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 4852,
											"end": 4876,
											"name": "tag",
											"source": 8,
											"value": "227"
										},
										{
											"begin": 4852,
											"end": 4876,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4847,
											"end": 4850,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4840,
											"end": 4877,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4765,
											"end": 4883,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4765,
											"end": 4883,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4765,
											"end": 4883,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 4889,
											"end": 5856,
											"name": "tag",
											"source": 8,
											"value": "114"
										},
										{
											"begin": 4889,
											"end": 5856,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5271,
											"end": 5274,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5293,
											"end": 5441,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "230"
										},
										{
											"begin": 5437,
											"end": 5440,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5293,
											"end": 5441,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "210"
										},
										{
											"begin": 5293,
											"end": 5441,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 5293,
											"end": 5441,
											"name": "tag",
											"source": 8,
											"value": "230"
										},
										{
											"begin": 5293,
											"end": 5441,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5286,
											"end": 5441,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5286,
											"end": 5441,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5458,
											"end": 5553,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "231"
										},
										{
											"begin": 5549,
											"end": 5552,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5540,
											"end": 5546,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 5458,
											"end": 5553,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "199"
										},
										{
											"begin": 5458,
											"end": 5553,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 5458,
											"end": 5553,
											"name": "tag",
											"source": 8,
											"value": "231"
										},
										{
											"begin": 5458,
											"end": 5553,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5451,
											"end": 5553,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5451,
											"end": 5553,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5570,
											"end": 5718,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "232"
										},
										{
											"begin": 5714,
											"end": 5717,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5570,
											"end": 5718,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "215"
										},
										{
											"begin": 5570,
											"end": 5718,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 5570,
											"end": 5718,
											"name": "tag",
											"source": 8,
											"value": "232"
										},
										{
											"begin": 5570,
											"end": 5718,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5563,
											"end": 5718,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5563,
											"end": 5718,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5735,
											"end": 5830,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "233"
										},
										{
											"begin": 5826,
											"end": 5829,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5817,
											"end": 5823,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 5735,
											"end": 5830,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "199"
										},
										{
											"begin": 5735,
											"end": 5830,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 5735,
											"end": 5830,
											"name": "tag",
											"source": 8,
											"value": "233"
										},
										{
											"begin": 5735,
											"end": 5830,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5728,
											"end": 5830,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5728,
											"end": 5830,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5847,
											"end": 5850,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5840,
											"end": 5850,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5840,
											"end": 5850,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4889,
											"end": 5856,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 4889,
											"end": 5856,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 4889,
											"end": 5856,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4889,
											"end": 5856,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4889,
											"end": 5856,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4889,
											"end": 5856,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 5862,
											"end": 6072,
											"name": "tag",
											"source": 8,
											"value": "19"
										},
										{
											"begin": 5862,
											"end": 6072,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5949,
											"end": 5953,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5987,
											"end": 5989,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5976,
											"end": 5985,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5972,
											"end": 5990,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5964,
											"end": 5990,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5964,
											"end": 5990,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6000,
											"end": 6065,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "235"
										},
										{
											"begin": 6062,
											"end": 6063,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6051,
											"end": 6060,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 6047,
											"end": 6064,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6038,
											"end": 6044,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 6000,
											"end": 6065,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "181"
										},
										{
											"begin": 6000,
											"end": 6065,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 6000,
											"end": 6065,
											"name": "tag",
											"source": 8,
											"value": "235"
										},
										{
											"begin": 6000,
											"end": 6065,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5862,
											"end": 6072,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 5862,
											"end": 6072,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5862,
											"end": 6072,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5862,
											"end": 6072,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5862,
											"end": 6072,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 6078,
											"end": 6300,
											"name": "tag",
											"source": 8,
											"value": "25"
										},
										{
											"begin": 6078,
											"end": 6300,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6171,
											"end": 6175,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6209,
											"end": 6211,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 6198,
											"end": 6207,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6194,
											"end": 6212,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6212,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6212,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6222,
											"end": 6293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "237"
										},
										{
											"begin": 6290,
											"end": 6291,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6279,
											"end": 6288,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 6275,
											"end": 6292,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6266,
											"end": 6272,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 6222,
											"end": 6293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "185"
										},
										{
											"begin": 6222,
											"end": 6293,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 6222,
											"end": 6293,
											"name": "tag",
											"source": 8,
											"value": "237"
										},
										{
											"begin": 6222,
											"end": 6293,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6078,
											"end": 6300,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 6078,
											"end": 6300,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6078,
											"end": 6300,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6078,
											"end": 6300,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6078,
											"end": 6300,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 6306,
											"end": 6619,
											"name": "tag",
											"source": 8,
											"value": "116"
										},
										{
											"begin": 6306,
											"end": 6619,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6419,
											"end": 6423,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6457,
											"end": 6459,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 6446,
											"end": 6455,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6442,
											"end": 6460,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6434,
											"end": 6460,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6434,
											"end": 6460,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6506,
											"end": 6515,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6500,
											"end": 6504,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6496,
											"end": 6516,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 6492,
											"end": 6493,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6481,
											"end": 6490,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 6477,
											"end": 6494,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6470,
											"end": 6517,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6534,
											"end": 6612,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "239"
										},
										{
											"begin": 6607,
											"end": 6611,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6598,
											"end": 6604,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 6534,
											"end": 6612,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "189"
										},
										{
											"begin": 6534,
											"end": 6612,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 6534,
											"end": 6612,
											"name": "tag",
											"source": 8,
											"value": "239"
										},
										{
											"begin": 6534,
											"end": 6612,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6526,
											"end": 6612,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6526,
											"end": 6612,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6306,
											"end": 6619,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 6306,
											"end": 6619,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6306,
											"end": 6619,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6306,
											"end": 6619,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6306,
											"end": 6619,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 6625,
											"end": 7044,
											"name": "tag",
											"source": 8,
											"value": "144"
										},
										{
											"begin": 6625,
											"end": 7044,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6791,
											"end": 6795,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6829,
											"end": 6831,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 6818,
											"end": 6827,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6814,
											"end": 6832,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6806,
											"end": 6832,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6806,
											"end": 6832,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6878,
											"end": 6887,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6872,
											"end": 6876,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6868,
											"end": 6888,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 6864,
											"end": 6865,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6853,
											"end": 6862,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 6849,
											"end": 6866,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6842,
											"end": 6889,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6906,
											"end": 7037,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "241"
										},
										{
											"begin": 7032,
											"end": 7036,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6906,
											"end": 7037,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "205"
										},
										{
											"begin": 6906,
											"end": 7037,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 6906,
											"end": 7037,
											"name": "tag",
											"source": 8,
											"value": "241"
										},
										{
											"begin": 6906,
											"end": 7037,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6898,
											"end": 7037,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6898,
											"end": 7037,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6625,
											"end": 7044,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6625,
											"end": 7044,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6625,
											"end": 7044,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6625,
											"end": 7044,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 7050,
											"end": 7469,
											"name": "tag",
											"source": 8,
											"value": "73"
										},
										{
											"begin": 7050,
											"end": 7469,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7216,
											"end": 7220,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7254,
											"end": 7256,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 7243,
											"end": 7252,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7239,
											"end": 7257,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7231,
											"end": 7257,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7231,
											"end": 7257,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7303,
											"end": 7312,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7297,
											"end": 7301,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7293,
											"end": 7313,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 7289,
											"end": 7290,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7278,
											"end": 7287,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 7274,
											"end": 7291,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7267,
											"end": 7314,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7331,
											"end": 7462,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "243"
										},
										{
											"begin": 7457,
											"end": 7461,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7331,
											"end": 7462,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "220"
										},
										{
											"begin": 7331,
											"end": 7462,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 7331,
											"end": 7462,
											"name": "tag",
											"source": 8,
											"value": "243"
										},
										{
											"begin": 7331,
											"end": 7462,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7323,
											"end": 7462,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7323,
											"end": 7462,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7050,
											"end": 7469,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 7050,
											"end": 7469,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7050,
											"end": 7469,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7050,
											"end": 7469,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 7475,
											"end": 7697,
											"name": "tag",
											"source": 8,
											"value": "48"
										},
										{
											"begin": 7475,
											"end": 7697,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7568,
											"end": 7572,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7606,
											"end": 7608,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 7595,
											"end": 7604,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7591,
											"end": 7609,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7583,
											"end": 7609,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7583,
											"end": 7609,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7619,
											"end": 7690,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "245"
										},
										{
											"begin": 7687,
											"end": 7688,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7676,
											"end": 7685,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 7672,
											"end": 7689,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7663,
											"end": 7669,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 7619,
											"end": 7690,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "225"
										},
										{
											"begin": 7619,
											"end": 7690,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 7619,
											"end": 7690,
											"name": "tag",
											"source": 8,
											"value": "245"
										},
										{
											"begin": 7619,
											"end": 7690,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7475,
											"end": 7697,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 7475,
											"end": 7697,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 7475,
											"end": 7697,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7475,
											"end": 7697,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7475,
											"end": 7697,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 7784,
											"end": 7883,
											"name": "tag",
											"source": 8,
											"value": "192"
										},
										{
											"begin": 7784,
											"end": 7883,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7836,
											"end": 7842,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7870,
											"end": 7875,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7864,
											"end": 7876,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 7854,
											"end": 7876,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7854,
											"end": 7876,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7784,
											"end": 7883,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 7784,
											"end": 7883,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7784,
											"end": 7883,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7784,
											"end": 7883,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 7889,
											"end": 8058,
											"name": "tag",
											"source": 8,
											"value": "194"
										},
										{
											"begin": 7889,
											"end": 8058,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7973,
											"end": 7984,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8007,
											"end": 8013,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8002,
											"end": 8005,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7995,
											"end": 8014,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8047,
											"end": 8051,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8042,
											"end": 8045,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8038,
											"end": 8052,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8023,
											"end": 8052,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8023,
											"end": 8052,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7889,
											"end": 8058,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 7889,
											"end": 8058,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 7889,
											"end": 8058,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7889,
											"end": 8058,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7889,
											"end": 8058,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 8064,
											"end": 8212,
											"name": "tag",
											"source": 8,
											"value": "203"
										},
										{
											"begin": 8064,
											"end": 8212,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8166,
											"end": 8177,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8203,
											"end": 8206,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8188,
											"end": 8206,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8188,
											"end": 8206,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8064,
											"end": 8212,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 8064,
											"end": 8212,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 8064,
											"end": 8212,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8064,
											"end": 8212,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8064,
											"end": 8212,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 8218,
											"end": 8523,
											"name": "tag",
											"source": 8,
											"value": "81"
										},
										{
											"begin": 8218,
											"end": 8523,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8258,
											"end": 8261,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8277,
											"end": 8297,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "252"
										},
										{
											"begin": 8295,
											"end": 8296,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8277,
											"end": 8297,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "228"
										},
										{
											"begin": 8277,
											"end": 8297,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 8277,
											"end": 8297,
											"name": "tag",
											"source": 8,
											"value": "252"
										},
										{
											"begin": 8277,
											"end": 8297,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8272,
											"end": 8297,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 8272,
											"end": 8297,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8311,
											"end": 8331,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "253"
										},
										{
											"begin": 8329,
											"end": 8330,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 8311,
											"end": 8331,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "228"
										},
										{
											"begin": 8311,
											"end": 8331,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 8311,
											"end": 8331,
											"name": "tag",
											"source": 8,
											"value": "253"
										},
										{
											"begin": 8311,
											"end": 8331,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8306,
											"end": 8331,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 8306,
											"end": 8331,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8465,
											"end": 8466,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8397,
											"end": 8463,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8393,
											"end": 8467,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 8390,
											"end": 8391,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8387,
											"end": 8468,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 8384,
											"end": 8491,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 8384,
											"end": 8491,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "254"
										},
										{
											"begin": 8384,
											"end": 8491,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 8471,
											"end": 8489,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "255"
										},
										{
											"begin": 8471,
											"end": 8489,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "256"
										},
										{
											"begin": 8471,
											"end": 8489,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 8471,
											"end": 8489,
											"name": "tag",
											"source": 8,
											"value": "255"
										},
										{
											"begin": 8471,
											"end": 8489,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8384,
											"end": 8491,
											"name": "tag",
											"source": 8,
											"value": "254"
										},
										{
											"begin": 8384,
											"end": 8491,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8515,
											"end": 8516,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8512,
											"end": 8513,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8508,
											"end": 8517,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8501,
											"end": 8517,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8501,
											"end": 8517,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8218,
											"end": 8523,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 8218,
											"end": 8523,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 8218,
											"end": 8523,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8218,
											"end": 8523,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8218,
											"end": 8523,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 8529,
											"end": 8877,
											"name": "tag",
											"source": 8,
											"value": "91"
										},
										{
											"begin": 8529,
											"end": 8877,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8569,
											"end": 8576,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8592,
											"end": 8612,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "258"
										},
										{
											"begin": 8610,
											"end": 8611,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8592,
											"end": 8612,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "228"
										},
										{
											"begin": 8592,
											"end": 8612,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 8592,
											"end": 8612,
											"name": "tag",
											"source": 8,
											"value": "258"
										},
										{
											"begin": 8592,
											"end": 8612,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8587,
											"end": 8612,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 8587,
											"end": 8612,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8626,
											"end": 8646,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "259"
										},
										{
											"begin": 8644,
											"end": 8645,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 8626,
											"end": 8646,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "228"
										},
										{
											"begin": 8626,
											"end": 8646,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 8626,
											"end": 8646,
											"name": "tag",
											"source": 8,
											"value": "259"
										},
										{
											"begin": 8626,
											"end": 8646,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8814,
											"end": 8815,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8746,
											"end": 8812,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8742,
											"end": 8816,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 8739,
											"end": 8740,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 8736,
											"end": 8817,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 8731,
											"end": 8732,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8724,
											"end": 8733,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 8717,
											"end": 8734,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 8713,
											"end": 8818,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 8710,
											"end": 8841,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 8710,
											"end": 8841,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "260"
										},
										{
											"begin": 8710,
											"end": 8841,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 8821,
											"end": 8839,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "261"
										},
										{
											"begin": 8821,
											"end": 8839,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "256"
										},
										{
											"begin": 8821,
											"end": 8839,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 8821,
											"end": 8839,
											"name": "tag",
											"source": 8,
											"value": "261"
										},
										{
											"begin": 8821,
											"end": 8839,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8710,
											"end": 8841,
											"name": "tag",
											"source": 8,
											"value": "260"
										},
										{
											"begin": 8710,
											"end": 8841,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8869,
											"end": 8870,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8866,
											"end": 8867,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8862,
											"end": 8871,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 8851,
											"end": 8871,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8851,
											"end": 8871,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8529,
											"end": 8877,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 8529,
											"end": 8877,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 8529,
											"end": 8877,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8529,
											"end": 8877,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8529,
											"end": 8877,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 8883,
											"end": 8979,
											"name": "tag",
											"source": 8,
											"value": "262"
										},
										{
											"begin": 8883,
											"end": 8979,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8920,
											"end": 8927,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8949,
											"end": 8973,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "264"
										},
										{
											"begin": 8967,
											"end": 8972,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8973,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "265"
										},
										{
											"begin": 8949,
											"end": 8973,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 8949,
											"end": 8973,
											"name": "tag",
											"source": 8,
											"value": "264"
										},
										{
											"begin": 8949,
											"end": 8973,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8938,
											"end": 8973,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8938,
											"end": 8973,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8883,
											"end": 8979,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 8883,
											"end": 8979,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8883,
											"end": 8979,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8883,
											"end": 8979,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 8985,
											"end": 9075,
											"name": "tag",
											"source": 8,
											"value": "184"
										},
										{
											"begin": 8985,
											"end": 9075,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9019,
											"end": 9026,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 9062,
											"end": 9067,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9055,
											"end": 9068,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 9048,
											"end": 9069,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 9037,
											"end": 9069,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9037,
											"end": 9069,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8985,
											"end": 9075,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 8985,
											"end": 9075,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8985,
											"end": 9075,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8985,
											"end": 9075,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 9081,
											"end": 9158,
											"name": "tag",
											"source": 8,
											"value": "188"
										},
										{
											"begin": 9081,
											"end": 9158,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9118,
											"end": 9125,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 9147,
											"end": 9152,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9136,
											"end": 9152,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9136,
											"end": 9152,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9081,
											"end": 9158,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 9081,
											"end": 9158,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9081,
											"end": 9158,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9081,
											"end": 9158,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 9164,
											"end": 9313,
											"name": "tag",
											"source": 8,
											"value": "268"
										},
										{
											"begin": 9164,
											"end": 9313,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9200,
											"end": 9207,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 9240,
											"end": 9306,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 9233,
											"end": 9238,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9229,
											"end": 9307,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 9218,
											"end": 9307,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9218,
											"end": 9307,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9164,
											"end": 9313,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 9164,
											"end": 9313,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9164,
											"end": 9313,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9164,
											"end": 9313,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 9319,
											"end": 9445,
											"name": "tag",
											"source": 8,
											"value": "265"
										},
										{
											"begin": 9319,
											"end": 9445,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9356,
											"end": 9363,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 9396,
											"end": 9438,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9389,
											"end": 9394,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9385,
											"end": 9439,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 9374,
											"end": 9439,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9374,
											"end": 9439,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9319,
											"end": 9445,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 9319,
											"end": 9445,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9319,
											"end": 9445,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9319,
											"end": 9445,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 9451,
											"end": 9528,
											"name": "tag",
											"source": 8,
											"value": "228"
										},
										{
											"begin": 9451,
											"end": 9528,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9488,
											"end": 9495,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 9517,
											"end": 9522,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9506,
											"end": 9522,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9506,
											"end": 9522,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9451,
											"end": 9528,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 9451,
											"end": 9528,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9451,
											"end": 9528,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9451,
											"end": 9528,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 9534,
											"end": 9841,
											"name": "tag",
											"source": 8,
											"value": "196"
										},
										{
											"begin": 9534,
											"end": 9841,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9602,
											"end": 9603,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 9612,
											"end": 9725,
											"name": "tag",
											"source": 8,
											"value": "273"
										},
										{
											"begin": 9612,
											"end": 9725,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9626,
											"end": 9632,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 9623,
											"end": 9624,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9620,
											"end": 9633,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 9612,
											"end": 9725,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 9612,
											"end": 9725,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "275"
										},
										{
											"begin": 9612,
											"end": 9725,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 9711,
											"end": 9712,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 9706,
											"end": 9709,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9702,
											"end": 9713,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9696,
											"end": 9714,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 9692,
											"end": 9693,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9687,
											"end": 9690,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 9683,
											"end": 9694,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9676,
											"end": 9715,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9648,
											"end": 9650,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 9645,
											"end": 9646,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9641,
											"end": 9651,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9636,
											"end": 9651,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9636,
											"end": 9651,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9612,
											"end": 9725,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "273"
										},
										{
											"begin": 9612,
											"end": 9725,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 9612,
											"end": 9725,
											"name": "tag",
											"source": 8,
											"value": "275"
										},
										{
											"begin": 9612,
											"end": 9725,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9743,
											"end": 9749,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 9740,
											"end": 9741,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9737,
											"end": 9750,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 9734,
											"end": 9835,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 9734,
											"end": 9835,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "276"
										},
										{
											"begin": 9734,
											"end": 9835,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 9823,
											"end": 9824,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 9814,
											"end": 9820,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 9809,
											"end": 9812,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 9805,
											"end": 9821,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9798,
											"end": 9825,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9734,
											"end": 9835,
											"name": "tag",
											"source": 8,
											"value": "276"
										},
										{
											"begin": 9734,
											"end": 9835,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9583,
											"end": 9841,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9534,
											"end": 9841,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9534,
											"end": 9841,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9534,
											"end": 9841,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9534,
											"end": 9841,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 9847,
											"end": 10018,
											"name": "tag",
											"source": 8,
											"value": "141"
										},
										{
											"begin": 9847,
											"end": 10018,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9886,
											"end": 9889,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 9909,
											"end": 9933,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "278"
										},
										{
											"begin": 9927,
											"end": 9932,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9909,
											"end": 9933,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "228"
										},
										{
											"begin": 9909,
											"end": 9933,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 9909,
											"end": 9933,
											"name": "tag",
											"source": 8,
											"value": "278"
										},
										{
											"begin": 9909,
											"end": 9933,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9900,
											"end": 9933,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 9900,
											"end": 9933,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9955,
											"end": 9959,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 9948,
											"end": 9953,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9945,
											"end": 9960,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 9942,
											"end": 9983,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 9942,
											"end": 9983,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "279"
										},
										{
											"begin": 9942,
											"end": 9983,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 9963,
											"end": 9981,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "280"
										},
										{
											"begin": 9963,
											"end": 9981,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "256"
										},
										{
											"begin": 9963,
											"end": 9981,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 9963,
											"end": 9981,
											"name": "tag",
											"source": 8,
											"value": "280"
										},
										{
											"begin": 9963,
											"end": 9981,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9942,
											"end": 9983,
											"name": "tag",
											"source": 8,
											"value": "279"
										},
										{
											"begin": 9942,
											"end": 9983,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10010,
											"end": 10011,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 10003,
											"end": 10008,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9999,
											"end": 10012,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 9992,
											"end": 10012,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9992,
											"end": 10012,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9847,
											"end": 10018,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 9847,
											"end": 10018,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9847,
											"end": 10018,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9847,
											"end": 10018,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 10024,
											"end": 10204,
											"name": "tag",
											"source": 8,
											"value": "256"
										},
										{
											"begin": 10024,
											"end": 10204,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10072,
											"end": 10149,
											"name": "PUSH",
											"source": 8,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10069,
											"end": 10070,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 10062,
											"end": 10150,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 10169,
											"end": 10173,
											"name": "PUSH",
											"source": 8,
											"value": "11"
										},
										{
											"begin": 10166,
											"end": 10167,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 10159,
											"end": 10174,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 10193,
											"end": 10197,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 10190,
											"end": 10191,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 10183,
											"end": 10198,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 10210,
											"end": 10390,
											"name": "tag",
											"source": 8,
											"value": "128"
										},
										{
											"begin": 10210,
											"end": 10390,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10258,
											"end": 10335,
											"name": "PUSH",
											"source": 8,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10255,
											"end": 10256,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 10248,
											"end": 10336,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 10355,
											"end": 10359,
											"name": "PUSH",
											"source": 8,
											"value": "32"
										},
										{
											"begin": 10352,
											"end": 10353,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 10345,
											"end": 10360,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 10379,
											"end": 10383,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 10376,
											"end": 10377,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 10369,
											"end": 10384,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 10396,
											"end": 10576,
											"name": "tag",
											"source": 8,
											"value": "124"
										},
										{
											"begin": 10396,
											"end": 10576,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10444,
											"end": 10521,
											"name": "PUSH",
											"source": 8,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10441,
											"end": 10442,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 10434,
											"end": 10522,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 10541,
											"end": 10545,
											"name": "PUSH",
											"source": 8,
											"value": "41"
										},
										{
											"begin": 10538,
											"end": 10539,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 10531,
											"end": 10546,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 10565,
											"end": 10569,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 10562,
											"end": 10563,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 10555,
											"end": 10570,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 10705,
											"end": 10822,
											"name": "tag",
											"source": 8,
											"value": "165"
										},
										{
											"begin": 10705,
											"end": 10822,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10814,
											"end": 10815,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 10811,
											"end": 10812,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 10804,
											"end": 10816,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 10828,
											"end": 10930,
											"name": "tag",
											"source": 8,
											"value": "198"
										},
										{
											"begin": 10828,
											"end": 10930,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10869,
											"end": 10875,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 10920,
											"end": 10922,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 10916,
											"end": 10923,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 10911,
											"end": 10913,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 10904,
											"end": 10909,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 10900,
											"end": 10914,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10896,
											"end": 10924,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 10886,
											"end": 10924,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10886,
											"end": 10924,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10828,
											"end": 10930,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 10828,
											"end": 10930,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10828,
											"end": 10930,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10828,
											"end": 10930,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 10936,
											"end": 11118,
											"name": "tag",
											"source": 8,
											"value": "209"
										},
										{
											"begin": 10936,
											"end": 11118,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 11076,
											"end": 11110,
											"name": "PUSH",
											"source": 8,
											"value": "537472696E67733A20686578206C656E67746820696E73756666696369656E74"
										},
										{
											"begin": 11072,
											"end": 11073,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 11064,
											"end": 11070,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 11060,
											"end": 11074,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11053,
											"end": 11111,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 10936,
											"end": 11118,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10936,
											"end": 11118,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 11124,
											"end": 11297,
											"name": "tag",
											"source": 8,
											"value": "214"
										},
										{
											"begin": 11124,
											"end": 11297,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 11264,
											"end": 11289,
											"name": "PUSH",
											"source": 8,
											"value": "416363657373436F6E74726F6C3A206163636F756E7420000000000000000000"
										},
										{
											"begin": 11260,
											"end": 11261,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 11252,
											"end": 11258,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 11248,
											"end": 11262,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11241,
											"end": 11290,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 11124,
											"end": 11297,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 11124,
											"end": 11297,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 11303,
											"end": 11470,
											"name": "tag",
											"source": 8,
											"value": "219"
										},
										{
											"begin": 11303,
											"end": 11470,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 11443,
											"end": 11462,
											"name": "PUSH",
											"source": 8,
											"value": "206973206D697373696E6720726F6C6520000000000000000000000000000000"
										},
										{
											"begin": 11439,
											"end": 11440,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 11431,
											"end": 11437,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 11427,
											"end": 11441,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11420,
											"end": 11463,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 11303,
											"end": 11470,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 11303,
											"end": 11470,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 11476,
											"end": 11710,
											"name": "tag",
											"source": 8,
											"value": "224"
										},
										{
											"begin": 11476,
											"end": 11710,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 11616,
											"end": 11650,
											"name": "PUSH",
											"source": 8,
											"value": "416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365"
										},
										{
											"begin": 11612,
											"end": 11613,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 11604,
											"end": 11610,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 11600,
											"end": 11614,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11593,
											"end": 11651,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 11685,
											"end": 11702,
											"name": "PUSH",
											"source": 8,
											"value": "20726F6C657320666F722073656C660000000000000000000000000000000000"
										},
										{
											"begin": 11680,
											"end": 11682,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 11672,
											"end": 11678,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 11668,
											"end": 11683,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11661,
											"end": 11703,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 11476,
											"end": 11710,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 11476,
											"end": 11710,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 11716,
											"end": 11838,
											"name": "tag",
											"source": 8,
											"value": "149"
										},
										{
											"begin": 11716,
											"end": 11838,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 11789,
											"end": 11813,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "293"
										},
										{
											"begin": 11807,
											"end": 11812,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 11789,
											"end": 11813,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "262"
										},
										{
											"begin": 11789,
											"end": 11813,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 11789,
											"end": 11813,
											"name": "tag",
											"source": 8,
											"value": "293"
										},
										{
											"begin": 11789,
											"end": 11813,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 11782,
											"end": 11787,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 11779,
											"end": 11814,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 11769,
											"end": 11832,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "294"
										},
										{
											"begin": 11769,
											"end": 11832,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 11828,
											"end": 11829,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 11825,
											"end": 11826,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 11818,
											"end": 11830,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 11769,
											"end": 11832,
											"name": "tag",
											"source": 8,
											"value": "294"
										},
										{
											"begin": 11769,
											"end": 11832,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 11716,
											"end": 11838,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 11716,
											"end": 11838,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 11844,
											"end": 11966,
											"name": "tag",
											"source": 8,
											"value": "153"
										},
										{
											"begin": 11844,
											"end": 11966,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 11917,
											"end": 11941,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "296"
										},
										{
											"begin": 11935,
											"end": 11940,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 11917,
											"end": 11941,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "188"
										},
										{
											"begin": 11917,
											"end": 11941,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 11917,
											"end": 11941,
											"name": "tag",
											"source": 8,
											"value": "296"
										},
										{
											"begin": 11917,
											"end": 11941,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 11910,
											"end": 11915,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 11907,
											"end": 11942,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 11897,
											"end": 11960,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "297"
										},
										{
											"begin": 11897,
											"end": 11960,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 11956,
											"end": 11957,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 11953,
											"end": 11954,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 11946,
											"end": 11958,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 11897,
											"end": 11960,
											"name": "tag",
											"source": 8,
											"value": "297"
										},
										{
											"begin": 11897,
											"end": 11960,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 11844,
											"end": 11966,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 11844,
											"end": 11966,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 11972,
											"end": 12092,
											"name": "tag",
											"source": 8,
											"value": "157"
										},
										{
											"begin": 11972,
											"end": 12092,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 12044,
											"end": 12067,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "299"
										},
										{
											"begin": 12061,
											"end": 12066,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 12044,
											"end": 12067,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "268"
										},
										{
											"begin": 12044,
											"end": 12067,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 12044,
											"end": 12067,
											"name": "tag",
											"source": 8,
											"value": "299"
										},
										{
											"begin": 12044,
											"end": 12067,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 12037,
											"end": 12042,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 12034,
											"end": 12068,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 12024,
											"end": 12086,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "300"
										},
										{
											"begin": 12024,
											"end": 12086,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 12082,
											"end": 12083,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 12079,
											"end": 12080,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 12072,
											"end": 12084,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 12024,
											"end": 12086,
											"name": "tag",
											"source": 8,
											"value": "300"
										},
										{
											"begin": 12024,
											"end": 12086,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 11972,
											"end": 12092,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 11972,
											"end": 12092,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 12098,
											"end": 12220,
											"name": "tag",
											"source": 8,
											"value": "161"
										},
										{
											"begin": 12098,
											"end": 12220,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 12171,
											"end": 12195,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "302"
										},
										{
											"begin": 12189,
											"end": 12194,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 12171,
											"end": 12195,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "228"
										},
										{
											"begin": 12171,
											"end": 12195,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 12171,
											"end": 12195,
											"name": "tag",
											"source": 8,
											"value": "302"
										},
										{
											"begin": 12171,
											"end": 12195,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 12164,
											"end": 12169,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 12161,
											"end": 12196,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 12151,
											"end": 12214,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "303"
										},
										{
											"begin": 12151,
											"end": 12214,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 12210,
											"end": 12211,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 12207,
											"end": 12208,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 12200,
											"end": 12212,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 12151,
											"end": 12214,
											"name": "tag",
											"source": 8,
											"value": "303"
										},
										{
											"begin": 12151,
											"end": 12214,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 12098,
											"end": 12220,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 12098,
											"end": 12220,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"DEFAULT_ADMIN_ROLE()": "a217fddf",
							"WRITER_ROL()": "426dbd9c",
							"getRoleAdmin(bytes32)": "248a9ca3",
							"grantRole(bytes32,address)": "2f2ff15d",
							"hasRole(bytes32,address)": "91d14854",
							"renounceRole(bytes32,address)": "36568abe",
							"revokeRole(bytes32,address)": "d547741f",
							"soloAdmin(uint256,uint256)": "b137050d",
							"soloWriter(uint256,uint256)": "e01c3119",
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WRITER_ROL\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"soloAdmin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"soloWriter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Openzepellin/OwnableOpZ.sol\":\"OwnableOpZ\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"Openzepellin/OwnableOpZ.sol\":{\"keccak256\":\"0x6032efb4d823a710553f455fcf8e43c3dc52791471b3983b9d3ed5656bc3149e\",\"license\":\"SEE LICENSE IN LICENSE\",\"urls\":[\"bzz-raw://5216f012f2b35d1e6bdb01c00281b5fc36717f4dbdc78bd2ff18d06970392866\",\"dweb:/ipfs/QmP6o48YtSNG637TqgR9US7ooYUXAZx6TQMqHgaTaMXXYt\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":{\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cbbb1a75e4064d564bf69e74970eef35064e51fcc09cbf3589aee7faa60d6afe\",\"dweb:/ipfs/QmYfAtQwFSGmxomnyAV3tpBDbfDwiFXV61osWW2zzQVg5Q\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/IAccessControl.sol\":{\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb2c137c343ef0c4c7ce7b18c1d108afdc9d315a04e48307288d2d05adcbde3a\",\"dweb:/ipfs/QmUxhrAQM3MM3FF5j7AtcXLXguWCJBHJ14BRdVtuoQc8Fh\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":{\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8c969013129ba9e651a20735ef659fef6d8a1139ea3607bd4b26ddea2d645634\",\"dweb:/ipfs/QmVhVa6LGuzAcB8qgDtVHRkucn4ihj5UZr8xBLcJkP6ucb\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xba1ae0497d71bf30f3710c38aba13a5b68c31d81ff04dd73e5dd55a05a9c903d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d77f4aee3f6534fe2dbc6583385fc123340f8ccb9bf3c8c04555e538a3d9a4b5\",\"dweb:/ipfs/QmVtP4Fz9tB2DFvMHJaSFbLxnEHE1NKDA92fviV7jDkEnL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 79,
								"contract": "Openzepellin/OwnableOpZ.sol:OwnableOpZ",
								"label": "_roles",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_bytes32,t_struct(RoleData)74_storage)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_bytes32,t_struct(RoleData)74_storage)": {
								"encoding": "mapping",
								"key": "t_bytes32",
								"label": "mapping(bytes32 => struct AccessControl.RoleData)",
								"numberOfBytes": "32",
								"value": "t_struct(RoleData)74_storage"
							},
							"t_struct(RoleData)74_storage": {
								"encoding": "inplace",
								"label": "struct AccessControl.RoleData",
								"members": [
									{
										"astId": 71,
										"contract": "Openzepellin/OwnableOpZ.sol:OwnableOpZ",
										"label": "members",
										"offset": 0,
										"slot": "0",
										"type": "t_mapping(t_address,t_bool)"
									},
									{
										"astId": 73,
										"contract": "Openzepellin/OwnableOpZ.sol:OwnableOpZ",
										"label": "adminRole",
										"offset": 0,
										"slot": "1",
										"type": "t_bytes32"
									}
								],
								"numberOfBytes": "64"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol": {
				"AccessControl": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "previousAdminRole",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "newAdminRole",
									"type": "bytes32"
								}
							],
							"name": "RoleAdminChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleGranted",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleRevoked",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DEFAULT_ADMIN_ROLE",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								}
							],
							"name": "getRoleAdmin",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "grantRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "hasRole",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "renounceRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "revokeRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ``` bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ``` function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it.",
						"kind": "dev",
						"methods": {
							"getRoleAdmin(bytes32)": {
								"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
							},
							"grantRole(bytes32,address)": {
								"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
							},
							"hasRole(bytes32,address)": {
								"details": "Returns `true` if `account` has been granted `role`."
							},
							"renounceRole(bytes32,address)": {
								"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
							},
							"revokeRole(bytes32,address)": {
								"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
							},
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DEFAULT_ADMIN_ROLE()": "a217fddf",
							"getRoleAdmin(bytes32)": "248a9ca3",
							"grantRole(bytes32,address)": "2f2ff15d",
							"hasRole(bytes32,address)": "91d14854",
							"renounceRole(bytes32,address)": "36568abe",
							"revokeRole(bytes32,address)": "d547741f",
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ``` bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ``` function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it.\",\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":\"AccessControl\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\":{\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cbbb1a75e4064d564bf69e74970eef35064e51fcc09cbf3589aee7faa60d6afe\",\"dweb:/ipfs/QmYfAtQwFSGmxomnyAV3tpBDbfDwiFXV61osWW2zzQVg5Q\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/IAccessControl.sol\":{\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb2c137c343ef0c4c7ce7b18c1d108afdc9d315a04e48307288d2d05adcbde3a\",\"dweb:/ipfs/QmUxhrAQM3MM3FF5j7AtcXLXguWCJBHJ14BRdVtuoQc8Fh\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":{\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8c969013129ba9e651a20735ef659fef6d8a1139ea3607bd4b26ddea2d645634\",\"dweb:/ipfs/QmVhVa6LGuzAcB8qgDtVHRkucn4ihj5UZr8xBLcJkP6ucb\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xba1ae0497d71bf30f3710c38aba13a5b68c31d81ff04dd73e5dd55a05a9c903d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d77f4aee3f6534fe2dbc6583385fc123340f8ccb9bf3c8c04555e538a3d9a4b5\",\"dweb:/ipfs/QmVtP4Fz9tB2DFvMHJaSFbLxnEHE1NKDA92fviV7jDkEnL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 79,
								"contract": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol:AccessControl",
								"label": "_roles",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_bytes32,t_struct(RoleData)74_storage)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_bytes32,t_struct(RoleData)74_storage)": {
								"encoding": "mapping",
								"key": "t_bytes32",
								"label": "mapping(bytes32 => struct AccessControl.RoleData)",
								"numberOfBytes": "32",
								"value": "t_struct(RoleData)74_storage"
							},
							"t_struct(RoleData)74_storage": {
								"encoding": "inplace",
								"label": "struct AccessControl.RoleData",
								"members": [
									{
										"astId": 71,
										"contract": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol:AccessControl",
										"label": "members",
										"offset": 0,
										"slot": "0",
										"type": "t_mapping(t_address,t_bool)"
									},
									{
										"astId": 73,
										"contract": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol:AccessControl",
										"label": "adminRole",
										"offset": 0,
										"slot": "1",
										"type": "t_bytes32"
									}
								],
								"numberOfBytes": "64"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/IAccessControl.sol": {
				"IAccessControl": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "previousAdminRole",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "newAdminRole",
									"type": "bytes32"
								}
							],
							"name": "RoleAdminChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleGranted",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleRevoked",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								}
							],
							"name": "getRoleAdmin",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "grantRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "hasRole",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "renounceRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "revokeRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "External interface of AccessControl declared to support ERC165 detection.",
						"events": {
							"RoleAdminChanged(bytes32,bytes32,bytes32)": {
								"details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
							},
							"RoleGranted(bytes32,address,address)": {
								"details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
							},
							"RoleRevoked(bytes32,address,address)": {
								"details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
							}
						},
						"kind": "dev",
						"methods": {
							"getRoleAdmin(bytes32)": {
								"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."
							},
							"grantRole(bytes32,address)": {
								"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
							},
							"hasRole(bytes32,address)": {
								"details": "Returns `true` if `account` has been granted `role`."
							},
							"renounceRole(bytes32,address)": {
								"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
							},
							"revokeRole(bytes32,address)": {
								"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"getRoleAdmin(bytes32)": "248a9ca3",
							"grantRole(bytes32,address)": "2f2ff15d",
							"hasRole(bytes32,address)": "91d14854",
							"renounceRole(bytes32,address)": "36568abe",
							"revokeRole(bytes32,address)": "d547741f"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControl declared to support ERC165 detection.\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/IAccessControl.sol\":\"IAccessControl\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/IAccessControl.sol\":{\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb2c137c343ef0c4c7ce7b18c1d108afdc9d315a04e48307288d2d05adcbde3a\",\"dweb:/ipfs/QmUxhrAQM3MM3FF5j7AtcXLXguWCJBHJ14BRdVtuoQc8Fh\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol": {
				"Strings": {
					"abi": [],
					"devdoc": {
						"details": "String operations.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":188:2253  library Strings {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":188:2253  library Strings {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122015cbeac5e73b4f8abcc55cb74bc189e220ddc5dcb8bcc279576f39c2e6f8de2864736f6c63430008070033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122015cbeac5e73b4f8abcc55cb74bc189e220ddc5dcb8bcc279576f39c2e6f8de2864736f6c63430008070033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ISZERO 0xCB 0xEA 0xC5 0xE7 EXTCODESIZE 0x4F DUP11 0xBC 0xC5 0x5C 0xB7 0x4B 0xC1 DUP10 0xE2 KECCAK256 0xDD 0xC5 0xDC 0xB8 0xBC 0xC2 PUSH26 0x576F39C2E6F8DE2864736F6C6343000807003300000000000000 ",
							"sourceMap": "188:2065:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122015cbeac5e73b4f8abcc55cb74bc189e220ddc5dcb8bcc279576f39c2e6f8de2864736f6c63430008070033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ISZERO 0xCB 0xEA 0xC5 0xE7 EXTCODESIZE 0x4F DUP11 0xBC 0xC5 0x5C 0xB7 0x4B 0xC1 DUP10 0xE2 KECCAK256 0xDD 0xC5 0xDC 0xB8 0xBC 0xC2 PUSH26 0x576F39C2E6F8DE2864736F6C6343000807003300000000000000 ",
							"sourceMap": "188:2065:4:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"toHexString(address)": "infinite",
								"toHexString(uint256)": "infinite",
								"toHexString(uint256,uint256)": "infinite",
								"toString(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH #[$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH [$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH",
									"source": 4,
									"value": "B"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "CODECOPY",
									"source": 4
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "BYTE",
									"source": 4
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "EQ",
									"source": 4
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH",
									"source": 4,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH",
									"source": 4,
									"value": "4"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH",
									"source": 4,
									"value": "24"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "REVERT",
									"source": 4
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "tag",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "ADDRESS",
									"source": 4
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "MSTORE8",
									"source": 4
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "RETURN",
									"source": 4
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122015cbeac5e73b4f8abcc55cb74bc189e220ddc5dcb8bcc279576f39c2e6f8de2864736f6c63430008070033",
									".code": [
										{
											"begin": 188,
											"end": 2253,
											"name": "PUSHDEPLOYADDRESS",
											"source": 4
										},
										{
											"begin": 188,
											"end": 2253,
											"name": "ADDRESS",
											"source": 4
										},
										{
											"begin": 188,
											"end": 2253,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 188,
											"end": 2253,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 188,
											"end": 2253,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 188,
											"end": 2253,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 188,
											"end": 2253,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 188,
											"end": 2253,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 188,
											"end": 2253,
											"name": "REVERT",
											"source": 4
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\":{\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8c969013129ba9e651a20735ef659fef6d8a1139ea3607bd4b26ddea2d645634\",\"dweb:/ipfs/QmVhVa6LGuzAcB8qgDtVHRkucn4ihj5UZr8xBLcJkP6ucb\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xba1ae0497d71bf30f3710c38aba13a5b68c31d81ff04dd73e5dd55a05a9c903d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d77f4aee3f6534fe2dbc6583385fc123340f8ccb9bf3c8c04555e538a3d9a4b5\",\"dweb:/ipfs/QmVtP4Fz9tB2DFvMHJaSFbLxnEHE1NKDA92fviV7jDkEnL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/ERC165.sol": {
				"ERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/Math.sol": {
				"Math": {
					"abi": [],
					"devdoc": {
						"details": "Standard math utilities missing in the Solidity language.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/Math.sol\":202:12530  library Math {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/Math.sol\":202:12530  library Math {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220a7a392713ea0cb746a580d08dd7f82cb1d7bf3c65288dd12662e08eb98cab18264736f6c63430008070033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a7a392713ea0cb746a580d08dd7f82cb1d7bf3c65288dd12662e08eb98cab18264736f6c63430008070033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA7 LOG3 SWAP3 PUSH18 0x3EA0CB746A580D08DD7F82CB1D7BF3C65288 0xDD SLT PUSH7 0x2E08EB98CAB182 PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ",
							"sourceMap": "202:12328:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a7a392713ea0cb746a580d08dd7f82cb1d7bf3c65288dd12662e08eb98cab18264736f6c63430008070033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA7 LOG3 SWAP3 PUSH18 0x3EA0CB746A580D08DD7F82CB1D7BF3C65288 0xDD SLT PUSH7 0x2E08EB98CAB182 PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ",
							"sourceMap": "202:12328:7:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"average(uint256,uint256)": "infinite",
								"ceilDiv(uint256,uint256)": "infinite",
								"log10(uint256)": "infinite",
								"log10(uint256,enum Math.Rounding)": "infinite",
								"log2(uint256)": "infinite",
								"log2(uint256,enum Math.Rounding)": "infinite",
								"log256(uint256)": "infinite",
								"log256(uint256,enum Math.Rounding)": "infinite",
								"max(uint256,uint256)": "infinite",
								"min(uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256,enum Math.Rounding)": "infinite",
								"sqrt(uint256)": "infinite",
								"sqrt(uint256,enum Math.Rounding)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 202,
									"end": 12530,
									"name": "PUSH #[$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 202,
									"end": 12530,
									"name": "PUSH [$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 202,
									"end": 12530,
									"name": "PUSH",
									"source": 7,
									"value": "B"
								},
								{
									"begin": 202,
									"end": 12530,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 202,
									"end": 12530,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 202,
									"end": 12530,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 202,
									"end": 12530,
									"name": "CODECOPY",
									"source": 7
								},
								{
									"begin": 202,
									"end": 12530,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 202,
									"end": 12530,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 202,
									"end": 12530,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12530,
									"name": "BYTE",
									"source": 7
								},
								{
									"begin": 202,
									"end": 12530,
									"name": "PUSH",
									"source": 7,
									"value": "73"
								},
								{
									"begin": 202,
									"end": 12530,
									"name": "EQ",
									"source": 7
								},
								{
									"begin": 202,
									"end": 12530,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 202,
									"end": 12530,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 202,
									"end": 12530,
									"name": "PUSH",
									"source": 7,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 202,
									"end": 12530,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12530,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 202,
									"end": 12530,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12530,
									"name": "PUSH",
									"source": 7,
									"value": "4"
								},
								{
									"begin": 202,
									"end": 12530,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 202,
									"end": 12530,
									"name": "PUSH",
									"source": 7,
									"value": "24"
								},
								{
									"begin": 202,
									"end": 12530,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12530,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 202,
									"end": 12530,
									"name": "tag",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 202,
									"end": 12530,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 202,
									"end": 12530,
									"name": "ADDRESS",
									"source": 7
								},
								{
									"begin": 202,
									"end": 12530,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12530,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 202,
									"end": 12530,
									"name": "PUSH",
									"source": 7,
									"value": "73"
								},
								{
									"begin": 202,
									"end": 12530,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 202,
									"end": 12530,
									"name": "MSTORE8",
									"source": 7
								},
								{
									"begin": 202,
									"end": 12530,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 202,
									"end": 12530,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 202,
									"end": 12530,
									"name": "RETURN",
									"source": 7
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220a7a392713ea0cb746a580d08dd7f82cb1d7bf3c65288dd12662e08eb98cab18264736f6c63430008070033",
									".code": [
										{
											"begin": 202,
											"end": 12530,
											"name": "PUSHDEPLOYADDRESS",
											"source": 7
										},
										{
											"begin": 202,
											"end": 12530,
											"name": "ADDRESS",
											"source": 7
										},
										{
											"begin": 202,
											"end": 12530,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 202,
											"end": 12530,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 202,
											"end": 12530,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 202,
											"end": 12530,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 202,
											"end": 12530,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 202,
											"end": 12530,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 202,
											"end": 12530,
											"name": "REVERT",
											"source": 7
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xba1ae0497d71bf30f3710c38aba13a5b68c31d81ff04dd73e5dd55a05a9c903d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d77f4aee3f6534fe2dbc6583385fc123340f8ccb9bf3c8c04555e538a3d9a4b5\",\"dweb:/ipfs/QmVtP4Fz9tB2DFvMHJaSFbLxnEHE1NKDA92fviV7jDkEnL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"Openzepellin/OwnableOpZ.sol": {
				"ast": {
					"absolutePath": "Openzepellin/OwnableOpZ.sol",
					"exportedSymbols": {
						"AccessControl": [
							370
						],
						"Context": [
							465
						],
						"ERC165": [
							664
						],
						"IAccessControl": [
							443
						],
						"IERC165": [
							676
						],
						"Math": [
							1542
						],
						"OwnableOpZ": [
							54
						],
						"Strings": [
							640
						]
					},
					"id": 55,
					"license": "SEE LICENSE IN LICENSE",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "52:24:0"
						},
						{
							"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol",
							"file": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 55,
							"sourceUnit": 371,
							"src": "80:111:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 3,
										"name": "AccessControl",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 370,
										"src": "218:13:0"
									},
									"id": 4,
									"nodeType": "InheritanceSpecifier",
									"src": "218:13:0"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 54,
							"linearizedBaseContracts": [
								54,
								370,
								664,
								676,
								443,
								465
							],
							"name": "OwnableOpZ",
							"nameLocation": "204:10:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"functionSelector": "426dbd9c",
									"id": 9,
									"mutability": "constant",
									"name": "WRITER_ROL",
									"nameLocation": "260:10:0",
									"nodeType": "VariableDeclaration",
									"scope": 54,
									"src": "236:58:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 5,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "236:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "41444d495f524f4c",
												"id": 7,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "283:10:0",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_0d08ba49c85b8f4efedcab2f953c61f86e8944d3d6185fd4fa77665e1274cfc4",
													"typeString": "literal_string \"ADMI_ROL\""
												},
												"value": "ADMI_ROL"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_0d08ba49c85b8f4efedcab2f953c61f86e8944d3d6185fd4fa77665e1274cfc4",
													"typeString": "literal_string \"ADMI_ROL\""
												}
											],
											"id": 6,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967288,
											"src": "273:9:0",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 8,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"names": [],
										"nodeType": "FunctionCall",
										"src": "273:21:0",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 18,
										"nodeType": "Block",
										"src": "316:54:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 13,
															"name": "DEFAULT_ADMIN_ROLE",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 82,
															"src": "334:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"expression": {
																"id": 14,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "353:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 15,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "353:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 12,
														"name": "_grantRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 338,
														"src": "323:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$",
															"typeString": "function (bytes32,address)"
														}
													},
													"id": 16,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "323:41:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 17,
												"nodeType": "ExpressionStatement",
												"src": "323:41:0"
											}
										]
									},
									"id": 19,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 10,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "313:2:0"
									},
									"returnParameters": {
										"id": 11,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "316:0:0"
									},
									"scope": 54,
									"src": "301:69:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 35,
										"nodeType": "Block",
										"src": "468:29:0",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 33,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 31,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 21,
														"src": "488:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 32,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 23,
														"src": "490:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "488:3:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 30,
												"id": 34,
												"nodeType": "Return",
												"src": "481:10:0"
											}
										]
									},
									"functionSelector": "b137050d",
									"id": 36,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 26,
													"name": "DEFAULT_ADMIN_ROLE",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 82,
													"src": "433:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												}
											],
											"id": 27,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 25,
												"name": "onlyRole",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 93,
												"src": "424:8:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "424:28:0"
										}
									],
									"name": "soloAdmin",
									"nameLocation": "385:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 24,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 21,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "400:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 36,
												"src": "395:6:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 20,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "395:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 23,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "409:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 36,
												"src": "404:6:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 22,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "404:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "394:17:0"
									},
									"returnParameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 29,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 36,
												"src": "462:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 28,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "462:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "461:6:0"
									},
									"scope": 54,
									"src": "376:121:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 52,
										"nodeType": "Block",
										"src": "587:23:0",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 50,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 48,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 38,
														"src": "603:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 49,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 40,
														"src": "605:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "603:3:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 47,
												"id": 51,
												"nodeType": "Return",
												"src": "596:10:0"
											}
										]
									},
									"functionSelector": "e01c3119",
									"id": 53,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 43,
													"name": "WRITER_ROL",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 9,
													"src": "561:10:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												}
											],
											"id": 44,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 42,
												"name": "onlyRole",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 93,
												"src": "552:8:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "552:20:0"
										}
									],
									"name": "soloWriter",
									"nameLocation": "512:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 41,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 38,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "529:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 53,
												"src": "524:6:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 37,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "524:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 40,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "537:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 53,
												"src": "532:6:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 39,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "532:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "523:16:0"
									},
									"returnParameters": {
										"id": 47,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 46,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 53,
												"src": "581:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 45,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "581:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "580:6:0"
									},
									"scope": 54,
									"src": "503:107:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 55,
							"src": "195:422:0",
							"usedErrors": []
						}
					],
					"src": "52:565:0"
				},
				"id": 0
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol": {
				"ast": {
					"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol",
					"exportedSymbols": {
						"AccessControl": [
							370
						],
						"Context": [
							465
						],
						"ERC165": [
							664
						],
						"IAccessControl": [
							443
						],
						"IERC165": [
							676
						],
						"Math": [
							1542
						],
						"Strings": [
							640
						]
					},
					"id": 371,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 56,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "108:23:1"
						},
						{
							"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/IAccessControl.sol",
							"file": "./IAccessControl.sol",
							"id": 57,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 371,
							"sourceUnit": 444,
							"src": "133:30:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 58,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 371,
							"sourceUnit": 466,
							"src": "164:30:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol",
							"file": "../utils/Strings.sol",
							"id": 59,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 371,
							"sourceUnit": 641,
							"src": "195:30:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/ERC165.sol",
							"file": "../utils/introspection/ERC165.sol",
							"id": 60,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 371,
							"sourceUnit": 665,
							"src": "226:43:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 62,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 465,
										"src": "1841:7:1"
									},
									"id": 63,
									"nodeType": "InheritanceSpecifier",
									"src": "1841:7:1"
								},
								{
									"baseName": {
										"id": 64,
										"name": "IAccessControl",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 443,
										"src": "1850:14:1"
									},
									"id": 65,
									"nodeType": "InheritanceSpecifier",
									"src": "1850:14:1"
								},
								{
									"baseName": {
										"id": 66,
										"name": "ERC165",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 664,
										"src": "1866:6:1"
									},
									"id": 67,
									"nodeType": "InheritanceSpecifier",
									"src": "1866:6:1"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 61,
								"nodeType": "StructuredDocumentation",
								"src": "271:1534:1",
								"text": " @dev Contract module that allows children to implement role-based access\n control mechanisms. This is a lightweight version that doesn't allow enumerating role\n members except through off-chain means by accessing the contract event logs. Some\n applications may benefit from on-chain enumerability, for those cases see\n {AccessControlEnumerable}.\n Roles are referred to by their `bytes32` identifier. These should be exposed\n in the external API and be unique. The best way to achieve this is by\n using `public constant` hash digests:\n ```\n bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n ```\n Roles can be used to represent a set of permissions. To restrict access to a\n function call, use {hasRole}:\n ```\n function foo() public {\n     require(hasRole(MY_ROLE, msg.sender));\n     ...\n }\n ```\n Roles can be granted and revoked dynamically via the {grantRole} and\n {revokeRole} functions. Each role has an associated admin role, and only\n accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n that only accounts with this role will be able to grant or revoke other\n roles. More complex role relationships can be created by using\n {_setRoleAdmin}.\n WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n grant and revoke this role. Extra precautions should be taken to secure\n accounts that have been granted it."
							},
							"fullyImplemented": true,
							"id": 370,
							"linearizedBaseContracts": [
								370,
								664,
								676,
								443,
								465
							],
							"name": "AccessControl",
							"nameLocation": "1824:13:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "AccessControl.RoleData",
									"id": 74,
									"members": [
										{
											"constant": false,
											"id": 71,
											"mutability": "mutable",
											"name": "members",
											"nameLocation": "1930:7:1",
											"nodeType": "VariableDeclaration",
											"scope": 74,
											"src": "1905:32:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
												"typeString": "mapping(address => bool)"
											},
											"typeName": {
												"id": 70,
												"keyType": {
													"id": 68,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1913:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "Mapping",
												"src": "1905:24:1",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
													"typeString": "mapping(address => bool)"
												},
												"valueType": {
													"id": 69,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1924:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 73,
											"mutability": "mutable",
											"name": "adminRole",
											"nameLocation": "1955:9:1",
											"nodeType": "VariableDeclaration",
											"scope": 74,
											"src": "1947:17:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 72,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "1947:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "RoleData",
									"nameLocation": "1886:8:1",
									"nodeType": "StructDefinition",
									"scope": 370,
									"src": "1879:92:1",
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 79,
									"mutability": "mutable",
									"name": "_roles",
									"nameLocation": "2014:6:1",
									"nodeType": "VariableDeclaration",
									"scope": 370,
									"src": "1977:43:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$74_storage_$",
										"typeString": "mapping(bytes32 => struct AccessControl.RoleData)"
									},
									"typeName": {
										"id": 78,
										"keyType": {
											"id": 75,
											"name": "bytes32",
											"nodeType": "ElementaryTypeName",
											"src": "1985:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											}
										},
										"nodeType": "Mapping",
										"src": "1977:28:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$74_storage_$",
											"typeString": "mapping(bytes32 => struct AccessControl.RoleData)"
										},
										"valueType": {
											"id": 77,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 76,
												"name": "RoleData",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 74,
												"src": "1996:8:1"
											},
											"referencedDeclaration": 74,
											"src": "1996:8:1",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_RoleData_$74_storage_ptr",
												"typeString": "struct AccessControl.RoleData"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"functionSelector": "a217fddf",
									"id": 82,
									"mutability": "constant",
									"name": "DEFAULT_ADMIN_ROLE",
									"nameLocation": "2051:18:1",
									"nodeType": "VariableDeclaration",
									"scope": 370,
									"src": "2027:49:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 80,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2027:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "30783030",
										"id": 81,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2072:4:1",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_0_by_1",
											"typeString": "int_const 0"
										},
										"value": "0x00"
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 92,
										"nodeType": "Block",
										"src": "2495:44:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 88,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 85,
															"src": "2516:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 87,
														"name": "_checkRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															147,
															186
														],
														"referencedDeclaration": 147,
														"src": "2505:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$__$",
															"typeString": "function (bytes32) view"
														}
													},
													"id": 89,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2505:16:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 90,
												"nodeType": "ExpressionStatement",
												"src": "2505:16:1"
											},
											{
												"id": 91,
												"nodeType": "PlaceholderStatement",
												"src": "2531:1:1"
											}
										]
									},
									"documentation": {
										"id": 83,
										"nodeType": "StructuredDocumentation",
										"src": "2083:375:1",
										"text": " @dev Modifier that checks that an account has a specific role. Reverts\n with a standardized message including the required role.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n _Available since v4.1._"
									},
									"id": 93,
									"name": "onlyRole",
									"nameLocation": "2472:8:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 86,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 85,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "2489:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 93,
												"src": "2481:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 84,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2481:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2480:14:1"
									},
									"src": "2463:76:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										663
									],
									"body": {
										"id": 114,
										"nodeType": "Block",
										"src": "2697:111:1",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 112,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														},
														"id": 107,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 102,
															"name": "interfaceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 96,
															"src": "2714:11:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 104,
																		"name": "IAccessControl",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 443,
																		"src": "2734:14:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_IAccessControl_$443_$",
																			"typeString": "type(contract IAccessControl)"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_type$_t_contract$_IAccessControl_$443_$",
																			"typeString": "type(contract IAccessControl)"
																		}
																	],
																	"id": 103,
																	"name": "type",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967269,
																	"src": "2729:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 105,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2729:20:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_meta_type_t_contract$_IAccessControl_$443",
																	"typeString": "type(contract IAccessControl)"
																}
															},
															"id": 106,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberName": "interfaceId",
															"nodeType": "MemberAccess",
															"src": "2729:32:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															}
														},
														"src": "2714:47:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"arguments": [
															{
																"id": 110,
																"name": "interfaceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 96,
																"src": "2789:11:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															],
															"expression": {
																"id": 108,
																"name": "super",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967271,
																"src": "2765:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_super$_AccessControl_$370_$",
																	"typeString": "type(contract super AccessControl)"
																}
															},
															"id": 109,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "supportsInterface",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 663,
															"src": "2765:23:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_bytes4_$returns$_t_bool_$",
																"typeString": "function (bytes4) view returns (bool)"
															}
														},
														"id": 111,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2765:36:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "2714:87:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 101,
												"id": 113,
												"nodeType": "Return",
												"src": "2707:94:1"
											}
										]
									},
									"documentation": {
										"id": 94,
										"nodeType": "StructuredDocumentation",
										"src": "2545:56:1",
										"text": " @dev See {IERC165-supportsInterface}."
									},
									"functionSelector": "01ffc9a7",
									"id": 115,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "2615:17:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 98,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2673:8:1"
									},
									"parameters": {
										"id": 97,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 96,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "2640:11:1",
												"nodeType": "VariableDeclaration",
												"scope": 115,
												"src": "2633:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 95,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "2633:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2632:20:1"
									},
									"returnParameters": {
										"id": 101,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 100,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 115,
												"src": "2691:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 99,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2691:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2690:6:1"
									},
									"scope": 370,
									"src": "2606:202:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										410
									],
									"body": {
										"id": 133,
										"nodeType": "Block",
										"src": "2987:53:1",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"expression": {
															"baseExpression": {
																"id": 126,
																"name": "_roles",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 79,
																"src": "3004:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$74_storage_$",
																	"typeString": "mapping(bytes32 => struct AccessControl.RoleData storage ref)"
																}
															},
															"id": 128,
															"indexExpression": {
																"id": 127,
																"name": "role",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 118,
																"src": "3011:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "3004:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_RoleData_$74_storage",
																"typeString": "struct AccessControl.RoleData storage ref"
															}
														},
														"id": 129,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "members",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 71,
														"src": "3004:20:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
															"typeString": "mapping(address => bool)"
														}
													},
													"id": 131,
													"indexExpression": {
														"id": 130,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 120,
														"src": "3025:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3004:29:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 125,
												"id": 132,
												"nodeType": "Return",
												"src": "2997:36:1"
											}
										]
									},
									"documentation": {
										"id": 116,
										"nodeType": "StructuredDocumentation",
										"src": "2814:76:1",
										"text": " @dev Returns `true` if `account` has been granted `role`."
									},
									"functionSelector": "91d14854",
									"id": 134,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "hasRole",
									"nameLocation": "2904:7:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 122,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2963:8:1"
									},
									"parameters": {
										"id": 121,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 118,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "2920:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 134,
												"src": "2912:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 117,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2912:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 120,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2934:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 134,
												"src": "2926:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 119,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2926:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2911:31:1"
									},
									"returnParameters": {
										"id": 125,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 124,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 134,
												"src": "2981:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 123,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2981:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2980:6:1"
									},
									"scope": 370,
									"src": "2895:145:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 146,
										"nodeType": "Block",
										"src": "3390:47:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 141,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 137,
															"src": "3411:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 142,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 455,
																"src": "3417:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 143,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3417:12:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 140,
														"name": "_checkRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															147,
															186
														],
														"referencedDeclaration": 186,
														"src": "3400:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$__$",
															"typeString": "function (bytes32,address) view"
														}
													},
													"id": 144,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3400:30:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 145,
												"nodeType": "ExpressionStatement",
												"src": "3400:30:1"
											}
										]
									},
									"documentation": {
										"id": 135,
										"nodeType": "StructuredDocumentation",
										"src": "3046:283:1",
										"text": " @dev Revert with a standard message if `_msgSender()` is missing `role`.\n Overriding this function changes the behavior of the {onlyRole} modifier.\n Format of the revert message is described in {_checkRole}.\n _Available since v4.6._"
									},
									"id": 147,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkRole",
									"nameLocation": "3343:10:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 138,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 137,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "3362:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 147,
												"src": "3354:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 136,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3354:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3353:14:1"
									},
									"returnParameters": {
										"id": 139,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3390:0:1"
									},
									"scope": 370,
									"src": "3334:103:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 185,
										"nodeType": "Block",
										"src": "3791:406:1",
										"statements": [
											{
												"condition": {
													"id": 159,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "3805:23:1",
													"subExpression": {
														"arguments": [
															{
																"id": 156,
																"name": "role",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 150,
																"src": "3814:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 157,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 152,
																"src": "3820:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 155,
															"name": "hasRole",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 134,
															"src": "3806:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$",
																"typeString": "function (bytes32,address) view returns (bool)"
															}
														},
														"id": 158,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3806:22:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 184,
												"nodeType": "IfStatement",
												"src": "3801:390:1",
												"trueBody": {
													"id": 183,
													"nodeType": "Block",
													"src": "3830:361:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"hexValue": "416363657373436f6e74726f6c3a206163636f756e7420",
																						"id": 165,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "string",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "3938:25:1",
																						"typeDescriptions": {
																							"typeIdentifier": "t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874",
																							"typeString": "literal_string \"AccessControl: account \""
																						},
																						"value": "AccessControl: account "
																					},
																					{
																						"arguments": [
																							{
																								"id": 168,
																								"name": "account",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 152,
																								"src": "4009:7:1",
																								"typeDescriptions": {
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							],
																							"expression": {
																								"id": 166,
																								"name": "Strings",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 640,
																								"src": "3989:7:1",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_contract$_Strings_$640_$",
																									"typeString": "type(library Strings)"
																								}
																							},
																							"id": 167,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberName": "toHexString",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 639,
																							"src": "3989:19:1",
																							"typeDescriptions": {
																								"typeIdentifier": "t_function_internal_pure$_t_address_$returns$_t_string_memory_ptr_$",
																								"typeString": "function (address) pure returns (string memory)"
																							}
																						},
																						"id": 169,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "functionCall",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "3989:28:1",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_string_memory_ptr",
																							"typeString": "string memory"
																						}
																					},
																					{
																						"hexValue": "206973206d697373696e6720726f6c6520",
																						"id": 170,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "string",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "4043:19:1",
																						"typeDescriptions": {
																							"typeIdentifier": "t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69",
																							"typeString": "literal_string \" is missing role \""
																						},
																						"value": " is missing role "
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"id": 175,
																										"name": "role",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 150,
																										"src": "4116:4:1",
																										"typeDescriptions": {
																											"typeIdentifier": "t_bytes32",
																											"typeString": "bytes32"
																										}
																									}
																								],
																								"expression": {
																									"argumentTypes": [
																										{
																											"typeIdentifier": "t_bytes32",
																											"typeString": "bytes32"
																										}
																									],
																									"id": 174,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"lValueRequested": false,
																									"nodeType": "ElementaryTypeNameExpression",
																									"src": "4108:7:1",
																									"typeDescriptions": {
																										"typeIdentifier": "t_type$_t_uint256_$",
																										"typeString": "type(uint256)"
																									},
																									"typeName": {
																										"id": 173,
																										"name": "uint256",
																										"nodeType": "ElementaryTypeName",
																										"src": "4108:7:1",
																										"typeDescriptions": {}
																									}
																								},
																								"id": 176,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"kind": "typeConversion",
																								"lValueRequested": false,
																								"names": [],
																								"nodeType": "FunctionCall",
																								"src": "4108:13:1",
																								"tryCall": false,
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							{
																								"hexValue": "3332",
																								"id": 177,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"kind": "number",
																								"lValueRequested": false,
																								"nodeType": "Literal",
																								"src": "4123:2:1",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_32_by_1",
																									"typeString": "int_const 32"
																								},
																								"value": "32"
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								{
																									"typeIdentifier": "t_rational_32_by_1",
																									"typeString": "int_const 32"
																								}
																							],
																							"expression": {
																								"id": 171,
																								"name": "Strings",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 640,
																								"src": "4088:7:1",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_contract$_Strings_$640_$",
																									"typeString": "type(library Strings)"
																								}
																							},
																							"id": 172,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberName": "toHexString",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 619,
																							"src": "4088:19:1",
																							"typeDescriptions": {
																								"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
																								"typeString": "function (uint256,uint256) pure returns (string memory)"
																							}
																						},
																						"id": 178,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "functionCall",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "4088:38:1",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_string_memory_ptr",
																							"typeString": "string memory"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874",
																							"typeString": "literal_string \"AccessControl: account \""
																						},
																						{
																							"typeIdentifier": "t_string_memory_ptr",
																							"typeString": "string memory"
																						},
																						{
																							"typeIdentifier": "t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69",
																							"typeString": "literal_string \" is missing role \""
																						},
																						{
																							"typeIdentifier": "t_string_memory_ptr",
																							"typeString": "string memory"
																						}
																					],
																					"expression": {
																						"id": 163,
																						"name": "abi",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4294967295,
																						"src": "3896:3:1",
																						"typeDescriptions": {
																							"typeIdentifier": "t_magic_abi",
																							"typeString": "abi"
																						}
																					},
																					"id": 164,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberName": "encodePacked",
																					"nodeType": "MemberAccess",
																					"src": "3896:16:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																						"typeString": "function () pure returns (bytes memory)"
																					}
																				},
																				"id": 179,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "3896:252:1",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			],
																			"id": 162,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "3868:6:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																				"typeString": "type(string storage pointer)"
																			},
																			"typeName": {
																				"id": 161,
																				"name": "string",
																				"nodeType": "ElementaryTypeName",
																				"src": "3868:6:1",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 180,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3868:298:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 160,
																	"name": "revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967277,
																		4294967277
																	],
																	"referencedDeclaration": 4294967277,
																	"src": "3844:6:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 181,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3844:336:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 182,
															"nodeType": "ExpressionStatement",
															"src": "3844:336:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 148,
										"nodeType": "StructuredDocumentation",
										"src": "3443:270:1",
										"text": " @dev Revert with a standard message if `account` is missing `role`.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/"
									},
									"id": 186,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkRole",
									"nameLocation": "3727:10:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 153,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 150,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "3746:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 186,
												"src": "3738:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 149,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3738:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 152,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3760:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 186,
												"src": "3752:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 151,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3752:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3737:31:1"
									},
									"returnParameters": {
										"id": 154,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3791:0:1"
									},
									"scope": 370,
									"src": "3718:479:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										418
									],
									"body": {
										"id": 200,
										"nodeType": "Block",
										"src": "4461:46:1",
										"statements": [
											{
												"expression": {
													"expression": {
														"baseExpression": {
															"id": 195,
															"name": "_roles",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 79,
															"src": "4478:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$74_storage_$",
																"typeString": "mapping(bytes32 => struct AccessControl.RoleData storage ref)"
															}
														},
														"id": 197,
														"indexExpression": {
															"id": 196,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 189,
															"src": "4485:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4478:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_RoleData_$74_storage",
															"typeString": "struct AccessControl.RoleData storage ref"
														}
													},
													"id": 198,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "adminRole",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 73,
													"src": "4478:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 194,
												"id": 199,
												"nodeType": "Return",
												"src": "4471:29:1"
											}
										]
									},
									"documentation": {
										"id": 187,
										"nodeType": "StructuredDocumentation",
										"src": "4203:170:1",
										"text": " @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {_setRoleAdmin}."
									},
									"functionSelector": "248a9ca3",
									"id": 201,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getRoleAdmin",
									"nameLocation": "4387:12:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 191,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4434:8:1"
									},
									"parameters": {
										"id": 190,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 189,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "4408:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 201,
												"src": "4400:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 188,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4400:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4399:14:1"
									},
									"returnParameters": {
										"id": 194,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 193,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 201,
												"src": "4452:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 192,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4452:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4451:9:1"
									},
									"scope": 370,
									"src": "4378:129:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										426
									],
									"body": {
										"id": 220,
										"nodeType": "Block",
										"src": "4906:42:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 216,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 204,
															"src": "4927:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 217,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 206,
															"src": "4933:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 215,
														"name": "_grantRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 338,
														"src": "4916:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$",
															"typeString": "function (bytes32,address)"
														}
													},
													"id": 218,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4916:25:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 219,
												"nodeType": "ExpressionStatement",
												"src": "4916:25:1"
											}
										]
									},
									"documentation": {
										"id": 202,
										"nodeType": "StructuredDocumentation",
										"src": "4513:285:1",
										"text": " @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleGranted} event."
									},
									"functionSelector": "2f2ff15d",
									"id": 221,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"arguments": [
														{
															"id": 211,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 204,
															"src": "4899:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 210,
														"name": "getRoleAdmin",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 201,
														"src": "4886:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32) view returns (bytes32)"
														}
													},
													"id": 212,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4886:18:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												}
											],
											"id": 213,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 209,
												"name": "onlyRole",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 93,
												"src": "4877:8:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "4877:28:1"
										}
									],
									"name": "grantRole",
									"nameLocation": "4812:9:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 208,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4868:8:1"
									},
									"parameters": {
										"id": 207,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 204,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "4830:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 221,
												"src": "4822:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 203,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4822:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 206,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "4844:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 221,
												"src": "4836:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 205,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4836:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4821:31:1"
									},
									"returnParameters": {
										"id": 214,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4906:0:1"
									},
									"scope": 370,
									"src": "4803:145:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										434
									],
									"body": {
										"id": 240,
										"nodeType": "Block",
										"src": "5332:43:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 236,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 224,
															"src": "5354:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 237,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 226,
															"src": "5360:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 235,
														"name": "_revokeRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 369,
														"src": "5342:11:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$",
															"typeString": "function (bytes32,address)"
														}
													},
													"id": 238,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5342:26:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 239,
												"nodeType": "ExpressionStatement",
												"src": "5342:26:1"
											}
										]
									},
									"documentation": {
										"id": 222,
										"nodeType": "StructuredDocumentation",
										"src": "4954:269:1",
										"text": " @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleRevoked} event."
									},
									"functionSelector": "d547741f",
									"id": 241,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"arguments": [
														{
															"id": 231,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 224,
															"src": "5325:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 230,
														"name": "getRoleAdmin",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 201,
														"src": "5312:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32) view returns (bytes32)"
														}
													},
													"id": 232,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5312:18:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												}
											],
											"id": 233,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 229,
												"name": "onlyRole",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 93,
												"src": "5303:8:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "5303:28:1"
										}
									],
									"name": "revokeRole",
									"nameLocation": "5237:10:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 228,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5294:8:1"
									},
									"parameters": {
										"id": 227,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 224,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "5256:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 241,
												"src": "5248:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 223,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5248:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 226,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "5270:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 241,
												"src": "5262:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 225,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5262:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5247:31:1"
									},
									"returnParameters": {
										"id": 234,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5332:0:1"
									},
									"scope": 370,
									"src": "5228:147:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										442
									],
									"body": {
										"id": 263,
										"nodeType": "Block",
										"src": "5989:137:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 254,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 251,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 246,
																"src": "6007:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 252,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 455,
																	"src": "6018:10:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 253,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6018:12:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "6007:23:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66",
															"id": 255,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6032:49:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b",
																"typeString": "literal_string \"AccessControl: can only renounce roles for self\""
															},
															"value": "AccessControl: can only renounce roles for self"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b",
																"typeString": "literal_string \"AccessControl: can only renounce roles for self\""
															}
														],
														"id": 250,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5999:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 256,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5999:83:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 257,
												"nodeType": "ExpressionStatement",
												"src": "5999:83:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 259,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 244,
															"src": "6105:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 260,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 246,
															"src": "6111:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 258,
														"name": "_revokeRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 369,
														"src": "6093:11:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$",
															"typeString": "function (bytes32,address)"
														}
													},
													"id": 261,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6093:26:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 262,
												"nodeType": "ExpressionStatement",
												"src": "6093:26:1"
											}
										]
									},
									"documentation": {
										"id": 242,
										"nodeType": "StructuredDocumentation",
										"src": "5381:526:1",
										"text": " @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been revoked `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`.\n May emit a {RoleRevoked} event."
									},
									"functionSelector": "36568abe",
									"id": 264,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "renounceRole",
									"nameLocation": "5921:12:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 248,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5980:8:1"
									},
									"parameters": {
										"id": 247,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 244,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "5942:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 264,
												"src": "5934:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 243,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5934:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 246,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "5956:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 264,
												"src": "5948:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 245,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5948:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5933:31:1"
									},
									"returnParameters": {
										"id": 249,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5989:0:1"
									},
									"scope": 370,
									"src": "5912:214:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 277,
										"nodeType": "Block",
										"src": "6879:42:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 273,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 267,
															"src": "6900:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 274,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 269,
															"src": "6906:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 272,
														"name": "_grantRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 338,
														"src": "6889:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$",
															"typeString": "function (bytes32,address)"
														}
													},
													"id": 275,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6889:25:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 276,
												"nodeType": "ExpressionStatement",
												"src": "6889:25:1"
											}
										]
									},
									"documentation": {
										"id": 265,
										"nodeType": "StructuredDocumentation",
										"src": "6132:674:1",
										"text": " @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event. Note that unlike {grantRole}, this function doesn't perform any\n checks on the calling account.\n May emit a {RoleGranted} event.\n [WARNING]\n ====\n This function should only be called from the constructor when setting\n up the initial roles for the system.\n Using this function in any other way is effectively circumventing the admin\n system imposed by {AccessControl}.\n ====\n NOTE: This function is deprecated in favor of {_grantRole}."
									},
									"id": 278,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_setupRole",
									"nameLocation": "6820:10:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 270,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 267,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "6839:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 278,
												"src": "6831:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 266,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6831:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 269,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "6853:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 278,
												"src": "6845:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 268,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6845:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6830:31:1"
									},
									"returnParameters": {
										"id": 271,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6879:0:1"
									},
									"scope": 370,
									"src": "6811:110:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 305,
										"nodeType": "Block",
										"src": "7119:174:1",
										"statements": [
											{
												"assignments": [
													287
												],
												"declarations": [
													{
														"constant": false,
														"id": 287,
														"mutability": "mutable",
														"name": "previousAdminRole",
														"nameLocation": "7137:17:1",
														"nodeType": "VariableDeclaration",
														"scope": 305,
														"src": "7129:25:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 286,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "7129:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 291,
												"initialValue": {
													"arguments": [
														{
															"id": 289,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 281,
															"src": "7170:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 288,
														"name": "getRoleAdmin",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 201,
														"src": "7157:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32) view returns (bytes32)"
														}
													},
													"id": 290,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7157:18:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7129:46:1"
											},
											{
												"expression": {
													"id": 297,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 292,
																"name": "_roles",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 79,
																"src": "7185:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$74_storage_$",
																	"typeString": "mapping(bytes32 => struct AccessControl.RoleData storage ref)"
																}
															},
															"id": 294,
															"indexExpression": {
																"id": 293,
																"name": "role",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 281,
																"src": "7192:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "7185:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_RoleData_$74_storage",
																"typeString": "struct AccessControl.RoleData storage ref"
															}
														},
														"id": 295,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "adminRole",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 73,
														"src": "7185:22:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 296,
														"name": "adminRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 283,
														"src": "7210:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "7185:34:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 298,
												"nodeType": "ExpressionStatement",
												"src": "7185:34:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 300,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 281,
															"src": "7251:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 301,
															"name": "previousAdminRole",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 287,
															"src": "7257:17:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 302,
															"name": "adminRole",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 283,
															"src": "7276:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 299,
														"name": "RoleAdminChanged",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 382,
														"src": "7234:16:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$__$",
															"typeString": "function (bytes32,bytes32,bytes32)"
														}
													},
													"id": 303,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7234:52:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 304,
												"nodeType": "EmitStatement",
												"src": "7229:57:1"
											}
										]
									},
									"documentation": {
										"id": 279,
										"nodeType": "StructuredDocumentation",
										"src": "6927:114:1",
										"text": " @dev Sets `adminRole` as ``role``'s admin role.\n Emits a {RoleAdminChanged} event."
									},
									"id": 306,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_setRoleAdmin",
									"nameLocation": "7055:13:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 284,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 281,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "7077:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 306,
												"src": "7069:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 280,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7069:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 283,
												"mutability": "mutable",
												"name": "adminRole",
												"nameLocation": "7091:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 306,
												"src": "7083:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 282,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7083:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7068:33:1"
									},
									"returnParameters": {
										"id": 285,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7119:0:1"
									},
									"scope": 370,
									"src": "7046:247:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 337,
										"nodeType": "Block",
										"src": "7529:165:1",
										"statements": [
											{
												"condition": {
													"id": 318,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "7543:23:1",
													"subExpression": {
														"arguments": [
															{
																"id": 315,
																"name": "role",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 309,
																"src": "7552:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 316,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 311,
																"src": "7558:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 314,
															"name": "hasRole",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 134,
															"src": "7544:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$",
																"typeString": "function (bytes32,address) view returns (bool)"
															}
														},
														"id": 317,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7544:22:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 336,
												"nodeType": "IfStatement",
												"src": "7539:149:1",
												"trueBody": {
													"id": 335,
													"nodeType": "Block",
													"src": "7568:120:1",
													"statements": [
														{
															"expression": {
																"id": 326,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"expression": {
																			"baseExpression": {
																				"id": 319,
																				"name": "_roles",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 79,
																				"src": "7582:6:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$74_storage_$",
																					"typeString": "mapping(bytes32 => struct AccessControl.RoleData storage ref)"
																				}
																			},
																			"id": 321,
																			"indexExpression": {
																				"id": 320,
																				"name": "role",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 309,
																				"src": "7589:4:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "7582:12:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_RoleData_$74_storage",
																				"typeString": "struct AccessControl.RoleData storage ref"
																			}
																		},
																		"id": 322,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "members",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 71,
																		"src": "7582:20:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																			"typeString": "mapping(address => bool)"
																		}
																	},
																	"id": 324,
																	"indexExpression": {
																		"id": 323,
																		"name": "account",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 311,
																		"src": "7603:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "7582:29:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 325,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7614:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "7582:36:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 327,
															"nodeType": "ExpressionStatement",
															"src": "7582:36:1"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 329,
																		"name": "role",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 309,
																		"src": "7649:4:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 330,
																		"name": "account",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 311,
																		"src": "7655:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 331,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 455,
																			"src": "7664:10:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 332,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7664:12:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 328,
																	"name": "RoleGranted",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 391,
																	"src": "7637:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$",
																		"typeString": "function (bytes32,address,address)"
																	}
																},
																"id": 333,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7637:40:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 334,
															"nodeType": "EmitStatement",
															"src": "7632:45:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 307,
										"nodeType": "StructuredDocumentation",
										"src": "7299:157:1",
										"text": " @dev Grants `role` to `account`.\n Internal function without access restriction.\n May emit a {RoleGranted} event."
									},
									"id": 338,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_grantRole",
									"nameLocation": "7470:10:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 312,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 309,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "7489:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 338,
												"src": "7481:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 308,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7481:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 311,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "7503:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 338,
												"src": "7495:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 310,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7495:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7480:31:1"
									},
									"returnParameters": {
										"id": 313,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7529:0:1"
									},
									"scope": 370,
									"src": "7461:233:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 368,
										"nodeType": "Block",
										"src": "7934:165:1",
										"statements": [
											{
												"condition": {
													"arguments": [
														{
															"id": 347,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 341,
															"src": "7956:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 348,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 343,
															"src": "7962:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 346,
														"name": "hasRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 134,
														"src": "7948:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$",
															"typeString": "function (bytes32,address) view returns (bool)"
														}
													},
													"id": 349,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7948:22:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 367,
												"nodeType": "IfStatement",
												"src": "7944:149:1",
												"trueBody": {
													"id": 366,
													"nodeType": "Block",
													"src": "7972:121:1",
													"statements": [
														{
															"expression": {
																"id": 357,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"expression": {
																			"baseExpression": {
																				"id": 350,
																				"name": "_roles",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 79,
																				"src": "7986:6:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$74_storage_$",
																					"typeString": "mapping(bytes32 => struct AccessControl.RoleData storage ref)"
																				}
																			},
																			"id": 352,
																			"indexExpression": {
																				"id": 351,
																				"name": "role",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 341,
																				"src": "7993:4:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "7986:12:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_RoleData_$74_storage",
																				"typeString": "struct AccessControl.RoleData storage ref"
																			}
																		},
																		"id": 353,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "members",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 71,
																		"src": "7986:20:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																			"typeString": "mapping(address => bool)"
																		}
																	},
																	"id": 355,
																	"indexExpression": {
																		"id": 354,
																		"name": "account",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 343,
																		"src": "8007:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "7986:29:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "66616c7365",
																	"id": 356,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8018:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																"src": "7986:37:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 358,
															"nodeType": "ExpressionStatement",
															"src": "7986:37:1"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 360,
																		"name": "role",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 341,
																		"src": "8054:4:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 361,
																		"name": "account",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 343,
																		"src": "8060:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 362,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 455,
																			"src": "8069:10:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 363,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8069:12:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 359,
																	"name": "RoleRevoked",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 400,
																	"src": "8042:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$",
																		"typeString": "function (bytes32,address,address)"
																	}
																},
																"id": 364,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8042:40:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 365,
															"nodeType": "EmitStatement",
															"src": "8037:45:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 339,
										"nodeType": "StructuredDocumentation",
										"src": "7700:160:1",
										"text": " @dev Revokes `role` from `account`.\n Internal function without access restriction.\n May emit a {RoleRevoked} event."
									},
									"id": 369,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_revokeRole",
									"nameLocation": "7874:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 344,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 341,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "7894:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 369,
												"src": "7886:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 340,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7886:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 343,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "7908:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 369,
												"src": "7900:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 342,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7900:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7885:31:1"
									},
									"returnParameters": {
										"id": 345,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7934:0:1"
									},
									"scope": 370,
									"src": "7865:234:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 371,
							"src": "1806:6295:1",
							"usedErrors": []
						}
					],
					"src": "108:7994:1"
				},
				"id": 1
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/IAccessControl.sol": {
				"ast": {
					"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/IAccessControl.sol",
					"exportedSymbols": {
						"IAccessControl": [
							443
						]
					},
					"id": 444,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 372,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "94:23:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 373,
								"nodeType": "StructuredDocumentation",
								"src": "119:89:2",
								"text": " @dev External interface of AccessControl declared to support ERC165 detection."
							},
							"fullyImplemented": false,
							"id": 443,
							"linearizedBaseContracts": [
								443
							],
							"name": "IAccessControl",
							"nameLocation": "219:14:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 374,
										"nodeType": "StructuredDocumentation",
										"src": "240:292:2",
										"text": " @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n {RoleAdminChanged} not being emitted signaling this.\n _Available since v3.1._"
									},
									"id": 382,
									"name": "RoleAdminChanged",
									"nameLocation": "543:16:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 381,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 376,
												"indexed": true,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "576:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 382,
												"src": "560:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 375,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "560:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 378,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousAdminRole",
												"nameLocation": "598:17:2",
												"nodeType": "VariableDeclaration",
												"scope": 382,
												"src": "582:33:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 377,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "582:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 380,
												"indexed": true,
												"mutability": "mutable",
												"name": "newAdminRole",
												"nameLocation": "633:12:2",
												"nodeType": "VariableDeclaration",
												"scope": 382,
												"src": "617:28:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 379,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "617:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "559:87:2"
									},
									"src": "537:110:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 383,
										"nodeType": "StructuredDocumentation",
										"src": "653:212:2",
										"text": " @dev Emitted when `account` is granted `role`.\n `sender` is the account that originated the contract call, an admin role\n bearer except when using {AccessControl-_setupRole}."
									},
									"id": 391,
									"name": "RoleGranted",
									"nameLocation": "876:11:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 390,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 385,
												"indexed": true,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "904:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 391,
												"src": "888:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 384,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "888:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 387,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "926:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 391,
												"src": "910:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 386,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "910:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 389,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "951:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 391,
												"src": "935:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 388,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "935:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "887:71:2"
									},
									"src": "870:89:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 392,
										"nodeType": "StructuredDocumentation",
										"src": "965:275:2",
										"text": " @dev Emitted when `account` is revoked `role`.\n `sender` is the account that originated the contract call:\n   - if using `revokeRole`, it is the admin role bearer\n   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
									},
									"id": 400,
									"name": "RoleRevoked",
									"nameLocation": "1251:11:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 399,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 394,
												"indexed": true,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "1279:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 400,
												"src": "1263:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 393,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1263:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 396,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1301:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 400,
												"src": "1285:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 395,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1285:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 398,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "1326:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 400,
												"src": "1310:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 397,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1310:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1262:71:2"
									},
									"src": "1245:89:2"
								},
								{
									"documentation": {
										"id": 401,
										"nodeType": "StructuredDocumentation",
										"src": "1340:76:2",
										"text": " @dev Returns `true` if `account` has been granted `role`."
									},
									"functionSelector": "91d14854",
									"id": 410,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "hasRole",
									"nameLocation": "1430:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 406,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 403,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "1446:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 410,
												"src": "1438:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 402,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1438:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 405,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1460:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 410,
												"src": "1452:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 404,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1452:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1437:31:2"
									},
									"returnParameters": {
										"id": 409,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 408,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 410,
												"src": "1492:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 407,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1492:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1491:6:2"
									},
									"scope": 443,
									"src": "1421:77:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 411,
										"nodeType": "StructuredDocumentation",
										"src": "1504:184:2",
										"text": " @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {AccessControl-_setRoleAdmin}."
									},
									"functionSelector": "248a9ca3",
									"id": 418,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getRoleAdmin",
									"nameLocation": "1702:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 414,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 413,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "1723:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 418,
												"src": "1715:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 412,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1715:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1714:14:2"
									},
									"returnParameters": {
										"id": 417,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 416,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 418,
												"src": "1752:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 415,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1752:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1751:9:2"
									},
									"scope": 443,
									"src": "1693:68:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 419,
										"nodeType": "StructuredDocumentation",
										"src": "1767:239:2",
										"text": " @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role."
									},
									"functionSelector": "2f2ff15d",
									"id": 426,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "grantRole",
									"nameLocation": "2020:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 424,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 421,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "2038:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 426,
												"src": "2030:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 420,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2030:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 423,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2052:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 426,
												"src": "2044:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 422,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2044:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2029:31:2"
									},
									"returnParameters": {
										"id": 425,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2069:0:2"
									},
									"scope": 443,
									"src": "2011:59:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 427,
										"nodeType": "StructuredDocumentation",
										"src": "2076:223:2",
										"text": " @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role."
									},
									"functionSelector": "d547741f",
									"id": 434,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "revokeRole",
									"nameLocation": "2313:10:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 432,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 429,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "2332:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 434,
												"src": "2324:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 428,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2324:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 431,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2346:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 434,
												"src": "2338:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 430,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2338:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2323:31:2"
									},
									"returnParameters": {
										"id": 433,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2363:0:2"
									},
									"scope": 443,
									"src": "2304:60:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 435,
										"nodeType": "StructuredDocumentation",
										"src": "2370:480:2",
										"text": " @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been granted `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`."
									},
									"functionSelector": "36568abe",
									"id": 442,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "renounceRole",
									"nameLocation": "2864:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 440,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 437,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "2885:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 442,
												"src": "2877:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 436,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2877:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 439,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2899:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 442,
												"src": "2891:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 438,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2891:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2876:31:2"
									},
									"returnParameters": {
										"id": 441,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2916:0:2"
									},
									"scope": 443,
									"src": "2855:62:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 444,
							"src": "209:2710:2",
							"usedErrors": []
						}
					],
					"src": "94:2826:2"
				},
				"id": 2
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							465
						]
					},
					"id": 466,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 445,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:3"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 446,
								"nodeType": "StructuredDocumentation",
								"src": "111:496:3",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 465,
							"linearizedBaseContracts": [
								465
							],
							"name": "Context",
							"nameLocation": "626:7:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 454,
										"nodeType": "Block",
										"src": "702:34:3",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 451,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "719:3:3",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 452,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "719:10:3",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 450,
												"id": 453,
												"nodeType": "Return",
												"src": "712:17:3"
											}
										]
									},
									"id": 455,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "649:10:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 447,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "659:2:3"
									},
									"returnParameters": {
										"id": 450,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 449,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 455,
												"src": "693:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 448,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:9:3"
									},
									"scope": 465,
									"src": "640:96:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 463,
										"nodeType": "Block",
										"src": "809:32:3",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 460,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "826:3:3",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 461,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "826:8:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 459,
												"id": 462,
												"nodeType": "Return",
												"src": "819:15:3"
											}
										]
									},
									"id": 464,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "751:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 456,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:3"
									},
									"returnParameters": {
										"id": 459,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 458,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 464,
												"src": "793:14:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 457,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "793:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "792:16:3"
									},
									"scope": 465,
									"src": "742:99:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 466,
							"src": "608:235:3",
							"usedErrors": []
						}
					],
					"src": "86:758:3"
				},
				"id": 3
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol": {
				"ast": {
					"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol",
					"exportedSymbols": {
						"Math": [
							1542
						],
						"Strings": [
							640
						]
					},
					"id": 641,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 467,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:4"
						},
						{
							"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/Math.sol",
							"file": "./math/Math.sol",
							"id": 468,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 641,
							"sourceUnit": 1543,
							"src": "126:25:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 469,
								"nodeType": "StructuredDocumentation",
								"src": "153:34:4",
								"text": " @dev String operations."
							},
							"fullyImplemented": true,
							"id": 640,
							"linearizedBaseContracts": [
								640
							],
							"name": "Strings",
							"nameLocation": "196:7:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 472,
									"mutability": "constant",
									"name": "_SYMBOLS",
									"nameLocation": "235:8:4",
									"nodeType": "VariableDeclaration",
									"scope": 640,
									"src": "210:54:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes16",
										"typeString": "bytes16"
									},
									"typeName": {
										"id": 470,
										"name": "bytes16",
										"nodeType": "ElementaryTypeName",
										"src": "210:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes16",
											"typeString": "bytes16"
										}
									},
									"value": {
										"hexValue": "30313233343536373839616263646566",
										"id": 471,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "246:18:4",
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f",
											"typeString": "literal_string \"0123456789abcdef\""
										},
										"value": "0123456789abcdef"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 475,
									"mutability": "constant",
									"name": "_ADDRESS_LENGTH",
									"nameLocation": "293:15:4",
									"nodeType": "VariableDeclaration",
									"scope": 640,
									"src": "270:43:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 473,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "270:5:4",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"hexValue": "3230",
										"id": 474,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "311:2:4",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_20_by_1",
											"typeString": "int_const 20"
										},
										"value": "20"
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 522,
										"nodeType": "Block",
										"src": "486:625:4",
										"statements": [
											{
												"id": 521,
												"nodeType": "UncheckedBlock",
												"src": "496:609:4",
												"statements": [
													{
														"assignments": [
															484
														],
														"declarations": [
															{
																"constant": false,
																"id": 484,
																"mutability": "mutable",
																"name": "length",
																"nameLocation": "528:6:4",
																"nodeType": "VariableDeclaration",
																"scope": 521,
																"src": "520:14:4",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 483,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "520:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 491,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 490,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 487,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 478,
																		"src": "548:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 485,
																		"name": "Math",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1542,
																		"src": "537:4:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Math_$1542_$",
																			"typeString": "type(library Math)"
																		}
																	},
																	"id": 486,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "log10",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1379,
																	"src": "537:10:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																		"typeString": "function (uint256) pure returns (uint256)"
																	}
																},
																"id": 488,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "537:17:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "31",
																"id": 489,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "557:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "537:21:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "520:38:4"
													},
													{
														"assignments": [
															493
														],
														"declarations": [
															{
																"constant": false,
																"id": 493,
																"mutability": "mutable",
																"name": "buffer",
																"nameLocation": "586:6:4",
																"nodeType": "VariableDeclaration",
																"scope": 521,
																"src": "572:20:4",
																"stateVariable": false,
																"storageLocation": "memory",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string"
																},
																"typeName": {
																	"id": 492,
																	"name": "string",
																	"nodeType": "ElementaryTypeName",
																	"src": "572:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage_ptr",
																		"typeString": "string"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 498,
														"initialValue": {
															"arguments": [
																{
																	"id": 496,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 484,
																	"src": "606:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 495,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "NewExpression",
																"src": "595:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (string memory)"
																},
																"typeName": {
																	"id": 494,
																	"name": "string",
																	"nodeType": "ElementaryTypeName",
																	"src": "599:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage_ptr",
																		"typeString": "string"
																	}
																}
															},
															"id": 497,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "595:18:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "572:41:4"
													},
													{
														"assignments": [
															500
														],
														"declarations": [
															{
																"constant": false,
																"id": 500,
																"mutability": "mutable",
																"name": "ptr",
																"nameLocation": "635:3:4",
																"nodeType": "VariableDeclaration",
																"scope": 521,
																"src": "627:11:4",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 499,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "627:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 501,
														"nodeType": "VariableDeclarationStatement",
														"src": "627:11:4"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "708:67:4",
															"statements": [
																{
																	"nodeType": "YulAssignment",
																	"src": "726:35:4",
																	"value": {
																		"arguments": [
																			{
																				"name": "buffer",
																				"nodeType": "YulIdentifier",
																				"src": "737:6:4"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "749:2:4",
																						"type": "",
																						"value": "32"
																					},
																					{
																						"name": "length",
																						"nodeType": "YulIdentifier",
																						"src": "753:6:4"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "745:3:4"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "745:15:4"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "733:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "733:28:4"
																	},
																	"variableNames": [
																		{
																			"name": "ptr",
																			"nodeType": "YulIdentifier",
																			"src": "726:3:4"
																		}
																	]
																}
															]
														},
														"documentation": "@solidity memory-safe-assembly",
														"evmVersion": "london",
														"externalReferences": [
															{
																"declaration": 493,
																"isOffset": false,
																"isSlot": false,
																"src": "737:6:4",
																"valueSize": 1
															},
															{
																"declaration": 484,
																"isOffset": false,
																"isSlot": false,
																"src": "753:6:4",
																"valueSize": 1
															},
															{
																"declaration": 500,
																"isOffset": false,
																"isSlot": false,
																"src": "726:3:4",
																"valueSize": 1
															}
														],
														"id": 502,
														"nodeType": "InlineAssembly",
														"src": "699:76:4"
													},
													{
														"body": {
															"id": 517,
															"nodeType": "Block",
															"src": "801:267:4",
															"statements": [
																{
																	"expression": {
																		"id": 505,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "--",
																		"prefix": false,
																		"src": "819:5:4",
																		"subExpression": {
																			"id": 504,
																			"name": "ptr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 500,
																			"src": "819:3:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 506,
																	"nodeType": "ExpressionStatement",
																	"src": "819:5:4"
																},
																{
																	"AST": {
																		"nodeType": "YulBlock",
																		"src": "902:84:4",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "ptr",
																							"nodeType": "YulIdentifier",
																							"src": "932:3:4"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value",
																											"nodeType": "YulIdentifier",
																											"src": "946:5:4"
																										},
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "953:2:4",
																											"type": "",
																											"value": "10"
																										}
																									],
																									"functionName": {
																										"name": "mod",
																										"nodeType": "YulIdentifier",
																										"src": "942:3:4"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "942:14:4"
																								},
																								{
																									"name": "_SYMBOLS",
																									"nodeType": "YulIdentifier",
																									"src": "958:8:4"
																								}
																							],
																							"functionName": {
																								"name": "byte",
																								"nodeType": "YulIdentifier",
																								"src": "937:4:4"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "937:30:4"
																						}
																					],
																					"functionName": {
																						"name": "mstore8",
																						"nodeType": "YulIdentifier",
																						"src": "924:7:4"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "924:44:4"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "924:44:4"
																			}
																		]
																	},
																	"documentation": "@solidity memory-safe-assembly",
																	"evmVersion": "london",
																	"externalReferences": [
																		{
																			"declaration": 472,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "958:8:4",
																			"valueSize": 1
																		},
																		{
																			"declaration": 500,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "932:3:4",
																			"valueSize": 1
																		},
																		{
																			"declaration": 478,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "946:5:4",
																			"valueSize": 1
																		}
																	],
																	"id": 507,
																	"nodeType": "InlineAssembly",
																	"src": "893:93:4"
																},
																{
																	"expression": {
																		"id": 510,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 508,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 478,
																			"src": "1003:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"hexValue": "3130",
																			"id": 509,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1012:2:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10_by_1",
																				"typeString": "int_const 10"
																			},
																			"value": "10"
																		},
																		"src": "1003:11:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 511,
																	"nodeType": "ExpressionStatement",
																	"src": "1003:11:4"
																},
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 514,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 512,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 478,
																			"src": "1036:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 513,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1045:1:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1036:10:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 516,
																	"nodeType": "IfStatement",
																	"src": "1032:21:4",
																	"trueBody": {
																		"id": 515,
																		"nodeType": "Break",
																		"src": "1048:5:4"
																	}
																}
															]
														},
														"condition": {
															"hexValue": "74727565",
															"id": 503,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "795:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														"id": 518,
														"nodeType": "WhileStatement",
														"src": "788:280:4"
													},
													{
														"expression": {
															"id": 519,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 493,
															"src": "1088:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"functionReturnParameters": 482,
														"id": 520,
														"nodeType": "Return",
														"src": "1081:13:4"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 476,
										"nodeType": "StructuredDocumentation",
										"src": "320:90:4",
										"text": " @dev Converts a `uint256` to its ASCII `string` decimal representation."
									},
									"id": 523,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nameLocation": "424:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 479,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 478,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "441:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 523,
												"src": "433:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 477,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "433:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "432:15:4"
									},
									"returnParameters": {
										"id": 482,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 481,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 523,
												"src": "471:13:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 480,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "471:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "470:15:4"
									},
									"scope": 640,
									"src": "415:696:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 542,
										"nodeType": "Block",
										"src": "1290:100:4",
										"statements": [
											{
												"id": 541,
												"nodeType": "UncheckedBlock",
												"src": "1300:84:4",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"id": 532,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 526,
																	"src": "1343:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 538,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"arguments": [
																			{
																				"id": 535,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 526,
																				"src": "1362:5:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"expression": {
																				"id": 533,
																				"name": "Math",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1542,
																				"src": "1350:4:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_Math_$1542_$",
																					"typeString": "type(library Math)"
																				}
																			},
																			"id": 534,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "log256",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 1502,
																			"src": "1350:11:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																				"typeString": "function (uint256) pure returns (uint256)"
																			}
																		},
																		"id": 536,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1350:18:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"hexValue": "31",
																		"id": 537,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1371:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"src": "1350:22:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 531,
																"name": "toHexString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	543,
																	619,
																	639
																],
																"referencedDeclaration": 619,
																"src": "1331:11:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256,uint256) pure returns (string memory)"
																}
															},
															"id": 539,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1331:42:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"functionReturnParameters": 530,
														"id": 540,
														"nodeType": "Return",
														"src": "1324:49:4"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 524,
										"nodeType": "StructuredDocumentation",
										"src": "1117:94:4",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."
									},
									"id": 543,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1225:11:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 527,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 526,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1245:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 543,
												"src": "1237:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 525,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1237:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1236:15:4"
									},
									"returnParameters": {
										"id": 530,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 529,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 543,
												"src": "1275:13:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 528,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1275:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1274:15:4"
									},
									"scope": 640,
									"src": "1216:174:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 618,
										"nodeType": "Block",
										"src": "1603:347:4",
										"statements": [
											{
												"assignments": [
													554
												],
												"declarations": [
													{
														"constant": false,
														"id": 554,
														"mutability": "mutable",
														"name": "buffer",
														"nameLocation": "1626:6:4",
														"nodeType": "VariableDeclaration",
														"scope": 618,
														"src": "1613:19:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 553,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1613:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 563,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 561,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 559,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 557,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1645:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 558,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 548,
																	"src": "1649:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1645:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "32",
																"id": 560,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1658:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "1645:14:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 556,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "1635:9:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 555,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1639:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 562,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1635:25:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1613:47:4"
											},
											{
												"expression": {
													"id": 568,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 564,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 554,
															"src": "1670:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 566,
														"indexExpression": {
															"hexValue": "30",
															"id": 565,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1677:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1670:9:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 567,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1682:3:4",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
															"typeString": "literal_string \"0\""
														},
														"value": "0"
													},
													"src": "1670:15:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 569,
												"nodeType": "ExpressionStatement",
												"src": "1670:15:4"
											},
											{
												"expression": {
													"id": 574,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 570,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 554,
															"src": "1695:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 572,
														"indexExpression": {
															"hexValue": "31",
															"id": 571,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1702:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1695:9:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "78",
														"id": 573,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1707:3:4",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83",
															"typeString": "literal_string \"x\""
														},
														"value": "x"
													},
													"src": "1695:15:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 575,
												"nodeType": "ExpressionStatement",
												"src": "1695:15:4"
											},
											{
												"body": {
													"id": 604,
													"nodeType": "Block",
													"src": "1765:83:4",
													"statements": [
														{
															"expression": {
																"id": 598,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 590,
																		"name": "buffer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 554,
																		"src": "1779:6:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 592,
																	"indexExpression": {
																		"id": 591,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 577,
																		"src": "1786:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "1779:9:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"baseExpression": {
																		"id": 593,
																		"name": "_SYMBOLS",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 472,
																		"src": "1791:8:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes16",
																			"typeString": "bytes16"
																		}
																	},
																	"id": 597,
																	"indexExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 596,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 594,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 546,
																			"src": "1800:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&",
																		"rightExpression": {
																			"hexValue": "307866",
																			"id": 595,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1808:3:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_15_by_1",
																				"typeString": "int_const 15"
																			},
																			"value": "0xf"
																		},
																		"src": "1800:11:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "1791:21:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "1779:33:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 599,
															"nodeType": "ExpressionStatement",
															"src": "1779:33:4"
														},
														{
															"expression": {
																"id": 602,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 600,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 546,
																	"src": "1826:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "34",
																	"id": 601,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1836:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "1826:11:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 603,
															"nodeType": "ExpressionStatement",
															"src": "1826:11:4"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 586,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 584,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 577,
														"src": "1753:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "31",
														"id": 585,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1757:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "1753:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 605,
												"initializationExpression": {
													"assignments": [
														577
													],
													"declarations": [
														{
															"constant": false,
															"id": 577,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "1733:1:4",
															"nodeType": "VariableDeclaration",
															"scope": 605,
															"src": "1725:9:4",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 576,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1725:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 583,
													"initialValue": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 582,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 580,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "32",
																"id": 578,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1737:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 579,
																"name": "length",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 548,
																"src": "1741:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1737:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 581,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1750:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "1737:14:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "1725:26:4"
												},
												"loopExpression": {
													"expression": {
														"id": 588,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "--",
														"prefix": true,
														"src": "1760:3:4",
														"subExpression": {
															"id": 587,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 577,
															"src": "1762:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 589,
													"nodeType": "ExpressionStatement",
													"src": "1760:3:4"
												},
												"nodeType": "ForStatement",
												"src": "1720:128:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 609,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 607,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 546,
																"src": "1865:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 608,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1874:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1865:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "537472696e67733a20686578206c656e67746820696e73756666696369656e74",
															"id": 610,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1877:34:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
																"typeString": "literal_string \"Strings: hex length insufficient\""
															},
															"value": "Strings: hex length insufficient"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
																"typeString": "literal_string \"Strings: hex length insufficient\""
															}
														],
														"id": 606,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1857:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 611,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1857:55:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 612,
												"nodeType": "ExpressionStatement",
												"src": "1857:55:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 615,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 554,
															"src": "1936:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 614,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "1929:6:4",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 613,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "1929:6:4",
															"typeDescriptions": {}
														}
													},
													"id": 616,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1929:14:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 552,
												"id": 617,
												"nodeType": "Return",
												"src": "1922:21:4"
											}
										]
									},
									"documentation": {
										"id": 544,
										"nodeType": "StructuredDocumentation",
										"src": "1396:112:4",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."
									},
									"id": 619,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1522:11:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 549,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 546,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1542:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 619,
												"src": "1534:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 545,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1534:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 548,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "1557:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 619,
												"src": "1549:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 547,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1549:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1533:31:4"
									},
									"returnParameters": {
										"id": 552,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 551,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 619,
												"src": "1588:13:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 550,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1588:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1587:15:4"
									},
									"scope": 640,
									"src": "1513:437:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 638,
										"nodeType": "Block",
										"src": "2175:76:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 632,
																			"name": "addr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 622,
																			"src": "2220:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 631,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2212:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint160_$",
																			"typeString": "type(uint160)"
																		},
																		"typeName": {
																			"id": 630,
																			"name": "uint160",
																			"nodeType": "ElementaryTypeName",
																			"src": "2212:7:4",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 633,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2212:13:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																],
																"id": 629,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2204:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 628,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2204:7:4",
																	"typeDescriptions": {}
																}
															},
															"id": 634,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2204:22:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 635,
															"name": "_ADDRESS_LENGTH",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 475,
															"src": "2228:15:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														],
														"id": 627,
														"name": "toHexString",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															543,
															619,
															639
														],
														"referencedDeclaration": 619,
														"src": "2192:11:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
															"typeString": "function (uint256,uint256) pure returns (string memory)"
														}
													},
													"id": 636,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2192:52:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 626,
												"id": 637,
												"nodeType": "Return",
												"src": "2185:59:4"
											}
										]
									},
									"documentation": {
										"id": 620,
										"nodeType": "StructuredDocumentation",
										"src": "1956:141:4",
										"text": " @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."
									},
									"id": 639,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "2111:11:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 623,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 622,
												"mutability": "mutable",
												"name": "addr",
												"nameLocation": "2131:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 639,
												"src": "2123:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 621,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2123:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2122:14:4"
									},
									"returnParameters": {
										"id": 626,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 625,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 639,
												"src": "2160:13:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 624,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2160:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2159:15:4"
									},
									"scope": 640,
									"src": "2102:149:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 641,
							"src": "188:2065:4",
							"usedErrors": []
						}
					],
					"src": "101:2153:4"
				},
				"id": 4
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/ERC165.sol": {
				"ast": {
					"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/ERC165.sol",
					"exportedSymbols": {
						"ERC165": [
							664
						],
						"IERC165": [
							676
						]
					},
					"id": 665,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 642,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "99:23:5"
						},
						{
							"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol",
							"file": "./IERC165.sol",
							"id": 643,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 665,
							"sourceUnit": 677,
							"src": "124:23:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 645,
										"name": "IERC165",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 676,
										"src": "754:7:5"
									},
									"id": 646,
									"nodeType": "InheritanceSpecifier",
									"src": "754:7:5"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 644,
								"nodeType": "StructuredDocumentation",
								"src": "149:576:5",
								"text": " @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."
							},
							"fullyImplemented": true,
							"id": 664,
							"linearizedBaseContracts": [
								664,
								676
							],
							"name": "ERC165",
							"nameLocation": "744:6:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"baseFunctions": [
										675
									],
									"body": {
										"id": 662,
										"nodeType": "Block",
										"src": "920:64:5",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													},
													"id": 660,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 655,
														"name": "interfaceId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 649,
														"src": "937:11:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 657,
																	"name": "IERC165",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 676,
																	"src": "957:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_IERC165_$676_$",
																		"typeString": "type(contract IERC165)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_contract$_IERC165_$676_$",
																		"typeString": "type(contract IERC165)"
																	}
																],
																"id": 656,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "952:4:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 658,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "952:13:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_contract$_IERC165_$676",
																"typeString": "type(contract IERC165)"
															}
														},
														"id": 659,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "interfaceId",
														"nodeType": "MemberAccess",
														"src": "952:25:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														}
													},
													"src": "937:40:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 654,
												"id": 661,
												"nodeType": "Return",
												"src": "930:47:5"
											}
										]
									},
									"documentation": {
										"id": 647,
										"nodeType": "StructuredDocumentation",
										"src": "768:56:5",
										"text": " @dev See {IERC165-supportsInterface}."
									},
									"functionSelector": "01ffc9a7",
									"id": 663,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "838:17:5",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 651,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "896:8:5"
									},
									"parameters": {
										"id": 650,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 649,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "863:11:5",
												"nodeType": "VariableDeclaration",
												"scope": 663,
												"src": "856:18:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 648,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "856:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "855:20:5"
									},
									"returnParameters": {
										"id": 654,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 653,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 663,
												"src": "914:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 652,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "914:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "913:6:5"
									},
									"scope": 664,
									"src": "829:155:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								}
							],
							"scope": 665,
							"src": "726:260:5",
							"usedErrors": []
						}
					],
					"src": "99:888:5"
				},
				"id": 5
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							676
						]
					},
					"id": 677,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 666,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "100:23:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 667,
								"nodeType": "StructuredDocumentation",
								"src": "125:279:6",
								"text": " @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 676,
							"linearizedBaseContracts": [
								676
							],
							"name": "IERC165",
							"nameLocation": "415:7:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 668,
										"nodeType": "StructuredDocumentation",
										"src": "429:340:6",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 675,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "783:17:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 671,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 670,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "808:11:6",
												"nodeType": "VariableDeclaration",
												"scope": 675,
												"src": "801:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 669,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "801:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "800:20:6"
									},
									"returnParameters": {
										"id": 674,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 673,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 675,
												"src": "844:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 672,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "844:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "843:6:6"
									},
									"scope": 676,
									"src": "774:76:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 677,
							"src": "405:447:6",
							"usedErrors": []
						}
					],
					"src": "100:753:6"
				},
				"id": 6
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/Math.sol": {
				"ast": {
					"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/Math.sol",
					"exportedSymbols": {
						"Math": [
							1542
						]
					},
					"id": 1543,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 678,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "103:23:7"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 679,
								"nodeType": "StructuredDocumentation",
								"src": "128:73:7",
								"text": " @dev Standard math utilities missing in the Solidity language."
							},
							"fullyImplemented": true,
							"id": 1542,
							"linearizedBaseContracts": [
								1542
							],
							"name": "Math",
							"nameLocation": "210:4:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "Math.Rounding",
									"id": 683,
									"members": [
										{
											"id": 680,
											"name": "Down",
											"nameLocation": "245:4:7",
											"nodeType": "EnumValue",
											"src": "245:4:7"
										},
										{
											"id": 681,
											"name": "Up",
											"nameLocation": "287:2:7",
											"nodeType": "EnumValue",
											"src": "287:2:7"
										},
										{
											"id": 682,
											"name": "Zero",
											"nameLocation": "318:4:7",
											"nodeType": "EnumValue",
											"src": "318:4:7"
										}
									],
									"name": "Rounding",
									"nameLocation": "226:8:7",
									"nodeType": "EnumDefinition",
									"src": "221:122:7"
								},
								{
									"body": {
										"id": 700,
										"nodeType": "Block",
										"src": "480:37:7",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 695,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 693,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 686,
															"src": "497:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 694,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 688,
															"src": "501:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "497:5:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 697,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 688,
														"src": "509:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 698,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "497:13:7",
													"trueExpression": {
														"id": 696,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 686,
														"src": "505:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 692,
												"id": 699,
												"nodeType": "Return",
												"src": "490:20:7"
											}
										]
									},
									"documentation": {
										"id": 684,
										"nodeType": "StructuredDocumentation",
										"src": "349:59:7",
										"text": " @dev Returns the largest of two numbers."
									},
									"id": 701,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "max",
									"nameLocation": "422:3:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 689,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 686,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "434:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 701,
												"src": "426:9:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 685,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "426:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 688,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "445:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 701,
												"src": "437:9:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 687,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "437:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "425:22:7"
									},
									"returnParameters": {
										"id": 692,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 691,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 701,
												"src": "471:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 690,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "471:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "470:9:7"
									},
									"scope": 1542,
									"src": "413:104:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 718,
										"nodeType": "Block",
										"src": "655:37:7",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 713,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 711,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 704,
															"src": "672:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 712,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 706,
															"src": "676:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "672:5:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 715,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 706,
														"src": "684:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 716,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "672:13:7",
													"trueExpression": {
														"id": 714,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 704,
														"src": "680:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 710,
												"id": 717,
												"nodeType": "Return",
												"src": "665:20:7"
											}
										]
									},
									"documentation": {
										"id": 702,
										"nodeType": "StructuredDocumentation",
										"src": "523:60:7",
										"text": " @dev Returns the smallest of two numbers."
									},
									"id": 719,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nameLocation": "597:3:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 707,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 704,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "609:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 719,
												"src": "601:9:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 703,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "601:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 706,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "620:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 719,
												"src": "612:9:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 705,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "612:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "600:22:7"
									},
									"returnParameters": {
										"id": 710,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 709,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 719,
												"src": "646:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 708,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "646:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "645:9:7"
									},
									"scope": 1542,
									"src": "588:104:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 741,
										"nodeType": "Block",
										"src": "876:82:7",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 739,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 731,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 729,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 722,
																	"src": "931:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 730,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 724,
																	"src": "935:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "931:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 732,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "930:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 738,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 735,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 733,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 722,
																		"src": "941:1:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "^",
																	"rightExpression": {
																		"id": 734,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 724,
																		"src": "945:1:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "941:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 736,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "940:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"hexValue": "32",
															"id": 737,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "950:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"src": "940:11:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "930:21:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 728,
												"id": 740,
												"nodeType": "Return",
												"src": "923:28:7"
											}
										]
									},
									"documentation": {
										"id": 720,
										"nodeType": "StructuredDocumentation",
										"src": "698:102:7",
										"text": " @dev Returns the average of two numbers. The result is rounded towards\n zero."
									},
									"id": 742,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "average",
									"nameLocation": "814:7:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 725,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 722,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "830:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 742,
												"src": "822:9:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 721,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "822:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 724,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "841:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 742,
												"src": "833:9:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 723,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "833:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "821:22:7"
									},
									"returnParameters": {
										"id": 728,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 727,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 742,
												"src": "867:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 726,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "867:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "866:9:7"
									},
									"scope": 1542,
									"src": "805:153:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 766,
										"nodeType": "Block",
										"src": "1228:123:7",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 754,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 752,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 745,
															"src": "1316:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 753,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1321:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "1316:6:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 763,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 761,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 758,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 756,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 745,
																			"src": "1330:1:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 757,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1334:1:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "1330:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 759,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1329:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 760,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 747,
																"src": "1339:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1329:11:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 762,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1343:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "1329:15:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 764,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "1316:28:7",
													"trueExpression": {
														"hexValue": "30",
														"id": 755,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1325:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 751,
												"id": 765,
												"nodeType": "Return",
												"src": "1309:35:7"
											}
										]
									},
									"documentation": {
										"id": 743,
										"nodeType": "StructuredDocumentation",
										"src": "964:188:7",
										"text": " @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."
									},
									"id": 767,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ceilDiv",
									"nameLocation": "1166:7:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 748,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 745,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1182:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 767,
												"src": "1174:9:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 744,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1174:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 747,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1193:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 767,
												"src": "1185:9:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 746,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1185:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1173:22:7"
									},
									"returnParameters": {
										"id": 751,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 750,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 767,
												"src": "1219:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 749,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1219:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1218:9:7"
									},
									"scope": 1542,
									"src": "1157:194:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 889,
										"nodeType": "Block",
										"src": "1795:3822:7",
										"statements": [
											{
												"id": 888,
												"nodeType": "UncheckedBlock",
												"src": "1805:3806:7",
												"statements": [
													{
														"assignments": [
															780
														],
														"declarations": [
															{
																"constant": false,
																"id": 780,
																"mutability": "mutable",
																"name": "prod0",
																"nameLocation": "2134:5:7",
																"nodeType": "VariableDeclaration",
																"scope": 888,
																"src": "2126:13:7",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 779,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2126:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 781,
														"nodeType": "VariableDeclarationStatement",
														"src": "2126:13:7"
													},
													{
														"assignments": [
															783
														],
														"declarations": [
															{
																"constant": false,
																"id": 783,
																"mutability": "mutable",
																"name": "prod1",
																"nameLocation": "2206:5:7",
																"nodeType": "VariableDeclaration",
																"scope": 888,
																"src": "2198:13:7",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 782,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2198:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 784,
														"nodeType": "VariableDeclarationStatement",
														"src": "2198:13:7"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "2278:157:7",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2296:30:7",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "2313:1:7"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "2316:1:7"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2323:1:7",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "2319:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2319:6:7"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nodeType": "YulIdentifier",
																			"src": "2306:6:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2306:20:7"
																	},
																	"variables": [
																		{
																			"name": "mm",
																			"nodeType": "YulTypedName",
																			"src": "2300:2:7",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2343:18:7",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "2356:1:7"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "2359:1:7"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "2352:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2352:9:7"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nodeType": "YulIdentifier",
																			"src": "2343:5:7"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2378:43:7",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nodeType": "YulIdentifier",
																						"src": "2395:2:7"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "2399:5:7"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "2391:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2391:14:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nodeType": "YulIdentifier",
																						"src": "2410:2:7"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "2414:5:7"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "2407:2:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2407:13:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2387:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2387:34:7"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nodeType": "YulIdentifier",
																			"src": "2378:5:7"
																		}
																	]
																}
															]
														},
														"evmVersion": "london",
														"externalReferences": [
															{
																"declaration": 780,
																"isOffset": false,
																"isSlot": false,
																"src": "2343:5:7",
																"valueSize": 1
															},
															{
																"declaration": 780,
																"isOffset": false,
																"isSlot": false,
																"src": "2399:5:7",
																"valueSize": 1
															},
															{
																"declaration": 780,
																"isOffset": false,
																"isSlot": false,
																"src": "2414:5:7",
																"valueSize": 1
															},
															{
																"declaration": 783,
																"isOffset": false,
																"isSlot": false,
																"src": "2378:5:7",
																"valueSize": 1
															},
															{
																"declaration": 770,
																"isOffset": false,
																"isSlot": false,
																"src": "2313:1:7",
																"valueSize": 1
															},
															{
																"declaration": 770,
																"isOffset": false,
																"isSlot": false,
																"src": "2356:1:7",
																"valueSize": 1
															},
															{
																"declaration": 772,
																"isOffset": false,
																"isSlot": false,
																"src": "2316:1:7",
																"valueSize": 1
															},
															{
																"declaration": 772,
																"isOffset": false,
																"isSlot": false,
																"src": "2359:1:7",
																"valueSize": 1
															}
														],
														"id": 785,
														"nodeType": "InlineAssembly",
														"src": "2269:166:7"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 788,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 786,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 783,
																"src": "2516:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 787,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2525:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2516:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 794,
														"nodeType": "IfStatement",
														"src": "2512:75:7",
														"trueBody": {
															"id": 793,
															"nodeType": "Block",
															"src": "2528:59:7",
															"statements": [
																{
																	"expression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 791,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 789,
																			"name": "prod0",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 780,
																			"src": "2553:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"id": 790,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 774,
																			"src": "2561:11:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "2553:19:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"functionReturnParameters": 778,
																	"id": 792,
																	"nodeType": "Return",
																	"src": "2546:26:7"
																}
															]
														}
													},
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 798,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 796,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 774,
																		"src": "2697:11:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"id": 797,
																		"name": "prod1",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 783,
																		"src": "2711:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2697:19:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"hexValue": "4d6174683a206d756c446976206f766572666c6f77",
																	"id": 799,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2718:23:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851",
																		"typeString": "literal_string \"Math: mulDiv overflow\""
																	},
																	"value": "Math: mulDiv overflow"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851",
																		"typeString": "literal_string \"Math: mulDiv overflow\""
																	}
																],
																"id": 795,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "2689:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 800,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2689:53:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 801,
														"nodeType": "ExpressionStatement",
														"src": "2689:53:7"
													},
													{
														"assignments": [
															803
														],
														"declarations": [
															{
																"constant": false,
																"id": 803,
																"mutability": "mutable",
																"name": "remainder",
																"nameLocation": "3006:9:7",
																"nodeType": "VariableDeclaration",
																"scope": 888,
																"src": "2998:17:7",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 802,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2998:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 804,
														"nodeType": "VariableDeclarationStatement",
														"src": "2998:17:7"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "3038:291:7",
															"statements": [
																{
																	"nodeType": "YulAssignment",
																	"src": "3107:38:7",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "3127:1:7"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "3130:1:7"
																			},
																			{
																				"name": "denominator",
																				"nodeType": "YulIdentifier",
																				"src": "3133:11:7"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nodeType": "YulIdentifier",
																			"src": "3120:6:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3120:25:7"
																	},
																	"variableNames": [
																		{
																			"name": "remainder",
																			"nodeType": "YulIdentifier",
																			"src": "3107:9:7"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3227:41:7",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod1",
																				"nodeType": "YulIdentifier",
																				"src": "3240:5:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "remainder",
																						"nodeType": "YulIdentifier",
																						"src": "3250:9:7"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "3261:5:7"
																					}
																				],
																				"functionName": {
																					"name": "gt",
																					"nodeType": "YulIdentifier",
																					"src": "3247:2:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3247:20:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3236:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3236:32:7"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nodeType": "YulIdentifier",
																			"src": "3227:5:7"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3285:30:7",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "3298:5:7"
																			},
																			{
																				"name": "remainder",
																				"nodeType": "YulIdentifier",
																				"src": "3305:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3294:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3294:21:7"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nodeType": "YulIdentifier",
																			"src": "3285:5:7"
																		}
																	]
																}
															]
														},
														"evmVersion": "london",
														"externalReferences": [
															{
																"declaration": 774,
																"isOffset": false,
																"isSlot": false,
																"src": "3133:11:7",
																"valueSize": 1
															},
															{
																"declaration": 780,
																"isOffset": false,
																"isSlot": false,
																"src": "3261:5:7",
																"valueSize": 1
															},
															{
																"declaration": 780,
																"isOffset": false,
																"isSlot": false,
																"src": "3285:5:7",
																"valueSize": 1
															},
															{
																"declaration": 780,
																"isOffset": false,
																"isSlot": false,
																"src": "3298:5:7",
																"valueSize": 1
															},
															{
																"declaration": 783,
																"isOffset": false,
																"isSlot": false,
																"src": "3227:5:7",
																"valueSize": 1
															},
															{
																"declaration": 783,
																"isOffset": false,
																"isSlot": false,
																"src": "3240:5:7",
																"valueSize": 1
															},
															{
																"declaration": 803,
																"isOffset": false,
																"isSlot": false,
																"src": "3107:9:7",
																"valueSize": 1
															},
															{
																"declaration": 803,
																"isOffset": false,
																"isSlot": false,
																"src": "3250:9:7",
																"valueSize": 1
															},
															{
																"declaration": 803,
																"isOffset": false,
																"isSlot": false,
																"src": "3305:9:7",
																"valueSize": 1
															},
															{
																"declaration": 770,
																"isOffset": false,
																"isSlot": false,
																"src": "3127:1:7",
																"valueSize": 1
															},
															{
																"declaration": 772,
																"isOffset": false,
																"isSlot": false,
																"src": "3130:1:7",
																"valueSize": 1
															}
														],
														"id": 805,
														"nodeType": "InlineAssembly",
														"src": "3029:300:7"
													},
													{
														"assignments": [
															807
														],
														"declarations": [
															{
																"constant": false,
																"id": 807,
																"mutability": "mutable",
																"name": "twos",
																"nameLocation": "3644:4:7",
																"nodeType": "VariableDeclaration",
																"scope": 888,
																"src": "3636:12:7",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 806,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "3636:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 815,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 814,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 808,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 774,
																"src": "3651:11:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 812,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 810,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "UnaryOperation",
																			"operator": "~",
																			"prefix": true,
																			"src": "3666:12:7",
																			"subExpression": {
																				"id": 809,
																				"name": "denominator",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 774,
																				"src": "3667:11:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 811,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3681:1:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "3666:16:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 813,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3665:18:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3651:32:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "3636:47:7"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "3706:362:7",
															"statements": [
																{
																	"nodeType": "YulAssignment",
																	"src": "3771:37:7",
																	"value": {
																		"arguments": [
																			{
																				"name": "denominator",
																				"nodeType": "YulIdentifier",
																				"src": "3790:11:7"
																			},
																			{
																				"name": "twos",
																				"nodeType": "YulIdentifier",
																				"src": "3803:4:7"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "3786:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3786:22:7"
																	},
																	"variableNames": [
																		{
																			"name": "denominator",
																			"nodeType": "YulIdentifier",
																			"src": "3771:11:7"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3875:25:7",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "3888:5:7"
																			},
																			{
																				"name": "twos",
																				"nodeType": "YulIdentifier",
																				"src": "3895:4:7"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "3884:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3884:16:7"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nodeType": "YulIdentifier",
																			"src": "3875:5:7"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4015:39:7",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4035:1:7",
																								"type": "",
																								"value": "0"
																							},
																							{
																								"name": "twos",
																								"nodeType": "YulIdentifier",
																								"src": "4038:4:7"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "4031:3:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4031:12:7"
																					},
																					{
																						"name": "twos",
																						"nodeType": "YulIdentifier",
																						"src": "4045:4:7"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "4027:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4027:23:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4052:1:7",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4023:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4023:31:7"
																	},
																	"variableNames": [
																		{
																			"name": "twos",
																			"nodeType": "YulIdentifier",
																			"src": "4015:4:7"
																		}
																	]
																}
															]
														},
														"evmVersion": "london",
														"externalReferences": [
															{
																"declaration": 774,
																"isOffset": false,
																"isSlot": false,
																"src": "3771:11:7",
																"valueSize": 1
															},
															{
																"declaration": 774,
																"isOffset": false,
																"isSlot": false,
																"src": "3790:11:7",
																"valueSize": 1
															},
															{
																"declaration": 780,
																"isOffset": false,
																"isSlot": false,
																"src": "3875:5:7",
																"valueSize": 1
															},
															{
																"declaration": 780,
																"isOffset": false,
																"isSlot": false,
																"src": "3888:5:7",
																"valueSize": 1
															},
															{
																"declaration": 807,
																"isOffset": false,
																"isSlot": false,
																"src": "3803:4:7",
																"valueSize": 1
															},
															{
																"declaration": 807,
																"isOffset": false,
																"isSlot": false,
																"src": "3895:4:7",
																"valueSize": 1
															},
															{
																"declaration": 807,
																"isOffset": false,
																"isSlot": false,
																"src": "4015:4:7",
																"valueSize": 1
															},
															{
																"declaration": 807,
																"isOffset": false,
																"isSlot": false,
																"src": "4038:4:7",
																"valueSize": 1
															},
															{
																"declaration": 807,
																"isOffset": false,
																"isSlot": false,
																"src": "4045:4:7",
																"valueSize": 1
															}
														],
														"id": 816,
														"nodeType": "InlineAssembly",
														"src": "3697:371:7"
													},
													{
														"expression": {
															"id": 821,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 817,
																"name": "prod0",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 780,
																"src": "4134:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "|=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 820,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 818,
																	"name": "prod1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 783,
																	"src": "4143:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 819,
																	"name": "twos",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 807,
																	"src": "4151:4:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4143:12:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4134:21:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 822,
														"nodeType": "ExpressionStatement",
														"src": "4134:21:7"
													},
													{
														"assignments": [
															824
														],
														"declarations": [
															{
																"constant": false,
																"id": 824,
																"mutability": "mutable",
																"name": "inverse",
																"nameLocation": "4481:7:7",
																"nodeType": "VariableDeclaration",
																"scope": 888,
																"src": "4473:15:7",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 823,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "4473:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 831,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 830,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 827,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "33",
																			"id": 825,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "4492:1:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_3_by_1",
																				"typeString": "int_const 3"
																			},
																			"value": "3"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"id": 826,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 774,
																			"src": "4496:11:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "4492:15:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 828,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "4491:17:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "^",
															"rightExpression": {
																"hexValue": "32",
																"id": 829,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4511:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "4491:21:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4473:39:7"
													},
													{
														"expression": {
															"id": 838,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 832,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 824,
																"src": "4729:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 837,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 833,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4740:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 836,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 834,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 774,
																		"src": "4744:11:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 835,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 824,
																		"src": "4758:7:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4744:21:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4740:25:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4729:36:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 839,
														"nodeType": "ExpressionStatement",
														"src": "4729:36:7"
													},
													{
														"expression": {
															"id": 846,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 840,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 824,
																"src": "4798:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 845,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 841,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4809:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 844,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 842,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 774,
																		"src": "4813:11:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 843,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 824,
																		"src": "4827:7:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4813:21:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4809:25:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4798:36:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 847,
														"nodeType": "ExpressionStatement",
														"src": "4798:36:7"
													},
													{
														"expression": {
															"id": 854,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 848,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 824,
																"src": "4868:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 853,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 849,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4879:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 852,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 850,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 774,
																		"src": "4883:11:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 851,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 824,
																		"src": "4897:7:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4883:21:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4879:25:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4868:36:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 855,
														"nodeType": "ExpressionStatement",
														"src": "4868:36:7"
													},
													{
														"expression": {
															"id": 862,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 856,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 824,
																"src": "4938:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 861,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 857,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4949:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 860,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 858,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 774,
																		"src": "4953:11:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 859,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 824,
																		"src": "4967:7:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4953:21:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4949:25:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4938:36:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 863,
														"nodeType": "ExpressionStatement",
														"src": "4938:36:7"
													},
													{
														"expression": {
															"id": 870,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 864,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 824,
																"src": "5008:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 869,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 865,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5019:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 868,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 866,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 774,
																		"src": "5023:11:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 867,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 824,
																		"src": "5037:7:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5023:21:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5019:25:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5008:36:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 871,
														"nodeType": "ExpressionStatement",
														"src": "5008:36:7"
													},
													{
														"expression": {
															"id": 878,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 872,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 824,
																"src": "5079:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 877,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 873,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5090:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 876,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 874,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 774,
																		"src": "5094:11:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 875,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 824,
																		"src": "5108:7:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5094:21:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5090:25:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5079:36:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 879,
														"nodeType": "ExpressionStatement",
														"src": "5079:36:7"
													},
													{
														"expression": {
															"id": 884,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 880,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 777,
																"src": "5549:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 883,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 881,
																	"name": "prod0",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 780,
																	"src": "5558:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 882,
																	"name": "inverse",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 824,
																	"src": "5566:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5558:15:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5549:24:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 885,
														"nodeType": "ExpressionStatement",
														"src": "5549:24:7"
													},
													{
														"expression": {
															"id": 886,
															"name": "result",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 777,
															"src": "5594:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 778,
														"id": 887,
														"nodeType": "Return",
														"src": "5587:13:7"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 768,
										"nodeType": "StructuredDocumentation",
										"src": "1357:305:7",
										"text": " @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."
									},
									"id": 890,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "1676:6:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 775,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 770,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "1700:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 890,
												"src": "1692:9:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 769,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1692:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 772,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "1719:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 890,
												"src": "1711:9:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 771,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1711:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 774,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "1738:11:7",
												"nodeType": "VariableDeclaration",
												"scope": 890,
												"src": "1730:19:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 773,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1730:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1682:73:7"
									},
									"returnParameters": {
										"id": 778,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 777,
												"mutability": "mutable",
												"name": "result",
												"nameLocation": "1787:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 890,
												"src": "1779:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 776,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1779:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1778:16:7"
									},
									"scope": 1542,
									"src": "1667:3950:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 933,
										"nodeType": "Block",
										"src": "5897:189:7",
										"statements": [
											{
												"assignments": [
													906
												],
												"declarations": [
													{
														"constant": false,
														"id": 906,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "5915:6:7",
														"nodeType": "VariableDeclaration",
														"scope": 933,
														"src": "5907:14:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 905,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5907:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 912,
												"initialValue": {
													"arguments": [
														{
															"id": 908,
															"name": "x",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 893,
															"src": "5931:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 909,
															"name": "y",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 895,
															"src": "5934:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 910,
															"name": "denominator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 897,
															"src": "5937:11:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 907,
														"name": "mulDiv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															890,
															934
														],
														"referencedDeclaration": 890,
														"src": "5924:6:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 911,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5924:25:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5907:42:7"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 924,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_enum$_Rounding_$683",
															"typeString": "enum Math.Rounding"
														},
														"id": 916,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 913,
															"name": "rounding",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 900,
															"src": "5963:8:7",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$683",
																"typeString": "enum Math.Rounding"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"id": 914,
																"name": "Rounding",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 683,
																"src": "5975:8:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_Rounding_$683_$",
																	"typeString": "type(enum Math.Rounding)"
																}
															},
															"id": 915,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberName": "Up",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 681,
															"src": "5975:11:7",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$683",
																"typeString": "enum Math.Rounding"
															}
														},
														"src": "5963:23:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 923,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 918,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 893,
																	"src": "5997:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 919,
																	"name": "y",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 895,
																	"src": "6000:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 920,
																	"name": "denominator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 897,
																	"src": "6003:11:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 917,
																"name": "mulmod",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967280,
																"src": "5990:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 921,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5990:25:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 922,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6018:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "5990:29:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "5963:56:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 930,
												"nodeType": "IfStatement",
												"src": "5959:98:7",
												"trueBody": {
													"id": 929,
													"nodeType": "Block",
													"src": "6021:36:7",
													"statements": [
														{
															"expression": {
																"id": 927,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 925,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 906,
																	"src": "6035:6:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "31",
																	"id": 926,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6045:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "6035:11:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 928,
															"nodeType": "ExpressionStatement",
															"src": "6035:11:7"
														}
													]
												}
											},
											{
												"expression": {
													"id": 931,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 906,
													"src": "6073:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 904,
												"id": 932,
												"nodeType": "Return",
												"src": "6066:13:7"
											}
										]
									},
									"documentation": {
										"id": 891,
										"nodeType": "StructuredDocumentation",
										"src": "5623:121:7",
										"text": " @notice Calculates x * y / denominator with full precision, following the selected rounding direction."
									},
									"id": 934,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "5758:6:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 901,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 893,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "5782:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 934,
												"src": "5774:9:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 892,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5774:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 895,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "5801:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 934,
												"src": "5793:9:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 894,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5793:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 897,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "5820:11:7",
												"nodeType": "VariableDeclaration",
												"scope": 934,
												"src": "5812:19:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 896,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5812:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 900,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "5850:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 934,
												"src": "5841:17:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$683",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 899,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 898,
														"name": "Rounding",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 683,
														"src": "5841:8:7"
													},
													"referencedDeclaration": 683,
													"src": "5841:8:7",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$683",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5764:100:7"
									},
									"returnParameters": {
										"id": 904,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 903,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 934,
												"src": "5888:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 902,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5888:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5887:9:7"
									},
									"scope": 1542,
									"src": "5749:337:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1045,
										"nodeType": "Block",
										"src": "6362:1585:7",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 944,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 942,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 937,
														"src": "6376:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 943,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6381:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "6376:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 948,
												"nodeType": "IfStatement",
												"src": "6372:45:7",
												"trueBody": {
													"id": 947,
													"nodeType": "Block",
													"src": "6384:33:7",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 945,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6405:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 941,
															"id": 946,
															"nodeType": "Return",
															"src": "6398:8:7"
														}
													]
												}
											},
											{
												"assignments": [
													950
												],
												"declarations": [
													{
														"constant": false,
														"id": 950,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "7104:6:7",
														"nodeType": "VariableDeclaration",
														"scope": 1045,
														"src": "7096:14:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 949,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7096:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 959,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 958,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "31",
														"id": 951,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7113:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 956,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 953,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 937,
																			"src": "7124:1:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 952,
																		"name": "log2",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			1214,
																			1250
																		],
																		"referencedDeclaration": 1214,
																		"src": "7119:4:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256) pure returns (uint256)"
																		}
																	},
																	"id": 954,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7119:7:7",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 955,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7130:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7119:12:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 957,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "7118:14:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7113:19:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7096:36:7"
											},
											{
												"id": 1044,
												"nodeType": "UncheckedBlock",
												"src": "7533:408:7",
												"statements": [
													{
														"expression": {
															"id": 969,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 960,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 950,
																"src": "7557:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 968,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 965,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 961,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 950,
																				"src": "7567:6:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 964,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 962,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 937,
																					"src": "7576:1:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 963,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 950,
																					"src": "7580:6:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7576:10:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7567:19:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 966,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7566:21:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 967,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7591:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7566:26:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7557:35:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 970,
														"nodeType": "ExpressionStatement",
														"src": "7557:35:7"
													},
													{
														"expression": {
															"id": 980,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 971,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 950,
																"src": "7606:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 979,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 976,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 972,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 950,
																				"src": "7616:6:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 975,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 973,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 937,
																					"src": "7625:1:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 974,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 950,
																					"src": "7629:6:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7625:10:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7616:19:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 977,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7615:21:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 978,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7640:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7615:26:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7606:35:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 981,
														"nodeType": "ExpressionStatement",
														"src": "7606:35:7"
													},
													{
														"expression": {
															"id": 991,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 982,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 950,
																"src": "7655:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 990,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 987,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 983,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 950,
																				"src": "7665:6:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 986,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 984,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 937,
																					"src": "7674:1:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 985,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 950,
																					"src": "7678:6:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7674:10:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7665:19:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 988,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7664:21:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 989,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7689:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7664:26:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7655:35:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 992,
														"nodeType": "ExpressionStatement",
														"src": "7655:35:7"
													},
													{
														"expression": {
															"id": 1002,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 993,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 950,
																"src": "7704:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1001,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 998,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 994,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 950,
																				"src": "7714:6:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 997,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 995,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 937,
																					"src": "7723:1:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 996,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 950,
																					"src": "7727:6:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7723:10:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7714:19:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 999,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7713:21:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1000,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7738:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7713:26:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7704:35:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1003,
														"nodeType": "ExpressionStatement",
														"src": "7704:35:7"
													},
													{
														"expression": {
															"id": 1013,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1004,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 950,
																"src": "7753:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1012,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1009,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1005,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 950,
																				"src": "7763:6:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1008,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1006,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 937,
																					"src": "7772:1:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 1007,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 950,
																					"src": "7776:6:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7772:10:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7763:19:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1010,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7762:21:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1011,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7787:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7762:26:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7753:35:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1014,
														"nodeType": "ExpressionStatement",
														"src": "7753:35:7"
													},
													{
														"expression": {
															"id": 1024,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1015,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 950,
																"src": "7802:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1023,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1020,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1016,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 950,
																				"src": "7812:6:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1019,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1017,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 937,
																					"src": "7821:1:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 1018,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 950,
																					"src": "7825:6:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7821:10:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7812:19:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1021,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7811:21:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1022,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7836:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7811:26:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7802:35:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1025,
														"nodeType": "ExpressionStatement",
														"src": "7802:35:7"
													},
													{
														"expression": {
															"id": 1035,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1026,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 950,
																"src": "7851:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1034,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1031,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1027,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 950,
																				"src": "7861:6:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1030,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1028,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 937,
																					"src": "7870:1:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 1029,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 950,
																					"src": "7874:6:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7870:10:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7861:19:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1032,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7860:21:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1033,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7885:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7860:26:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7851:35:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1036,
														"nodeType": "ExpressionStatement",
														"src": "7851:35:7"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 1038,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 950,
																	"src": "7911:6:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1041,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1039,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 937,
																		"src": "7919:1:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 1040,
																		"name": "result",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 950,
																		"src": "7923:6:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7919:10:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1037,
																"name": "min",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 719,
																"src": "7907:3:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 1042,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7907:23:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 941,
														"id": 1043,
														"nodeType": "Return",
														"src": "7900:30:7"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 935,
										"nodeType": "StructuredDocumentation",
										"src": "6092:208:7",
										"text": " @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."
									},
									"id": 1046,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "6314:4:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 938,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 937,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "6327:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 1046,
												"src": "6319:9:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 936,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6319:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6318:11:7"
									},
									"returnParameters": {
										"id": 941,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 940,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1046,
												"src": "6353:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 939,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6353:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6352:9:7"
									},
									"scope": 1542,
									"src": "6305:1642:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1081,
										"nodeType": "Block",
										"src": "8123:161:7",
										"statements": [
											{
												"id": 1080,
												"nodeType": "UncheckedBlock",
												"src": "8133:145:7",
												"statements": [
													{
														"assignments": [
															1058
														],
														"declarations": [
															{
																"constant": false,
																"id": 1058,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "8165:6:7",
																"nodeType": "VariableDeclaration",
																"scope": 1080,
																"src": "8157:14:7",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1057,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "8157:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1062,
														"initialValue": {
															"arguments": [
																{
																	"id": 1060,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1049,
																	"src": "8179:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1059,
																"name": "sqrt",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	1046,
																	1082
																],
																"referencedDeclaration": 1046,
																"src": "8174:4:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 1061,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8174:7:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "8157:24:7"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1078,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1063,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1058,
																"src": "8202:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 1073,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$683",
																					"typeString": "enum Math.Rounding"
																				},
																				"id": 1067,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1064,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1052,
																					"src": "8212:8:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$683",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 1065,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 683,
																						"src": "8224:8:7",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$683_$",
																							"typeString": "type(enum Math.Rounding)"
																						}
																					},
																					"id": 1066,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 681,
																					"src": "8224:11:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$683",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"src": "8212:23:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1072,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1070,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 1068,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1058,
																						"src": "8239:6:7",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 1069,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1058,
																						"src": "8248:6:7",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "8239:15:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 1071,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1049,
																					"src": "8257:1:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "8239:19:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "8212:46:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 1075,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8265:1:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 1076,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "8212:54:7",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 1074,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8261:1:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 1077,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "8211:56:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "8202:65:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1056,
														"id": 1079,
														"nodeType": "Return",
														"src": "8195:72:7"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1047,
										"nodeType": "StructuredDocumentation",
										"src": "7953:89:7",
										"text": " @notice Calculates sqrt(a), following the selected rounding direction."
									},
									"id": 1082,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "8056:4:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1053,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1049,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "8069:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 1082,
												"src": "8061:9:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1048,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8061:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1052,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "8081:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 1082,
												"src": "8072:17:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$683",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 1051,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1050,
														"name": "Rounding",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 683,
														"src": "8072:8:7"
													},
													"referencedDeclaration": 683,
													"src": "8072:8:7",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$683",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8060:30:7"
									},
									"returnParameters": {
										"id": 1056,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1055,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1082,
												"src": "8114:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1054,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8114:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8113:9:7"
									},
									"scope": 1542,
									"src": "8047:237:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1213,
										"nodeType": "Block",
										"src": "8469:922:7",
										"statements": [
											{
												"assignments": [
													1091
												],
												"declarations": [
													{
														"constant": false,
														"id": 1091,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "8487:6:7",
														"nodeType": "VariableDeclaration",
														"scope": 1213,
														"src": "8479:14:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1090,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8479:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1093,
												"initialValue": {
													"hexValue": "30",
													"id": 1092,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "8496:1:7",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8479:18:7"
											},
											{
												"id": 1210,
												"nodeType": "UncheckedBlock",
												"src": "8507:855:7",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1098,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1096,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1094,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1085,
																	"src": "8535:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 1095,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8544:3:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "8535:12:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1097,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8550:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8535:16:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1108,
														"nodeType": "IfStatement",
														"src": "8531:99:7",
														"trueBody": {
															"id": 1107,
															"nodeType": "Block",
															"src": "8553:77:7",
															"statements": [
																{
																	"expression": {
																		"id": 1101,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1099,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1085,
																			"src": "8571:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 1100,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8581:3:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "8571:13:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1102,
																	"nodeType": "ExpressionStatement",
																	"src": "8571:13:7"
																},
																{
																	"expression": {
																		"id": 1105,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1103,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1091,
																			"src": "8602:6:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 1104,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8612:3:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "8602:13:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1106,
																	"nodeType": "ExpressionStatement",
																	"src": "8602:13:7"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1113,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1111,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1109,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1085,
																	"src": "8647:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 1110,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8656:2:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "8647:11:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1112,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8661:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8647:15:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1123,
														"nodeType": "IfStatement",
														"src": "8643:96:7",
														"trueBody": {
															"id": 1122,
															"nodeType": "Block",
															"src": "8664:75:7",
															"statements": [
																{
																	"expression": {
																		"id": 1116,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1114,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1085,
																			"src": "8682:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 1115,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8692:2:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "8682:12:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1117,
																	"nodeType": "ExpressionStatement",
																	"src": "8682:12:7"
																},
																{
																	"expression": {
																		"id": 1120,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1118,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1091,
																			"src": "8712:6:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 1119,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8722:2:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "8712:12:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1121,
																	"nodeType": "ExpressionStatement",
																	"src": "8712:12:7"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1128,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1126,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1124,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1085,
																	"src": "8756:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 1125,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8765:2:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "8756:11:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1127,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8770:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8756:15:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1138,
														"nodeType": "IfStatement",
														"src": "8752:96:7",
														"trueBody": {
															"id": 1137,
															"nodeType": "Block",
															"src": "8773:75:7",
															"statements": [
																{
																	"expression": {
																		"id": 1131,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1129,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1085,
																			"src": "8791:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 1130,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8801:2:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "8791:12:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1132,
																	"nodeType": "ExpressionStatement",
																	"src": "8791:12:7"
																},
																{
																	"expression": {
																		"id": 1135,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1133,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1091,
																			"src": "8821:6:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 1134,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8831:2:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "8821:12:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1136,
																	"nodeType": "ExpressionStatement",
																	"src": "8821:12:7"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1143,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1141,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1139,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1085,
																	"src": "8865:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 1140,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8874:2:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "8865:11:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1142,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8879:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8865:15:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1153,
														"nodeType": "IfStatement",
														"src": "8861:96:7",
														"trueBody": {
															"id": 1152,
															"nodeType": "Block",
															"src": "8882:75:7",
															"statements": [
																{
																	"expression": {
																		"id": 1146,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1144,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1085,
																			"src": "8900:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 1145,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8910:2:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "8900:12:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1147,
																	"nodeType": "ExpressionStatement",
																	"src": "8900:12:7"
																},
																{
																	"expression": {
																		"id": 1150,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1148,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1091,
																			"src": "8930:6:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 1149,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8940:2:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "8930:12:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1151,
																	"nodeType": "ExpressionStatement",
																	"src": "8930:12:7"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1158,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1156,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1154,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1085,
																	"src": "8974:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 1155,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8983:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "8974:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1157,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8987:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8974:14:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1168,
														"nodeType": "IfStatement",
														"src": "8970:93:7",
														"trueBody": {
															"id": 1167,
															"nodeType": "Block",
															"src": "8990:73:7",
															"statements": [
																{
																	"expression": {
																		"id": 1161,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1159,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1085,
																			"src": "9008:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 1160,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9018:1:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "9008:11:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1162,
																	"nodeType": "ExpressionStatement",
																	"src": "9008:11:7"
																},
																{
																	"expression": {
																		"id": 1165,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1163,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1091,
																			"src": "9037:6:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 1164,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9047:1:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "9037:11:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1166,
																	"nodeType": "ExpressionStatement",
																	"src": "9037:11:7"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1173,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1171,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1169,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1085,
																	"src": "9080:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 1170,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9089:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "9080:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1172,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9093:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9080:14:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1183,
														"nodeType": "IfStatement",
														"src": "9076:93:7",
														"trueBody": {
															"id": 1182,
															"nodeType": "Block",
															"src": "9096:73:7",
															"statements": [
																{
																	"expression": {
																		"id": 1176,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1174,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1085,
																			"src": "9114:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 1175,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9124:1:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "9114:11:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1177,
																	"nodeType": "ExpressionStatement",
																	"src": "9114:11:7"
																},
																{
																	"expression": {
																		"id": 1180,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1178,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1091,
																			"src": "9143:6:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 1179,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9153:1:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "9143:11:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1181,
																	"nodeType": "ExpressionStatement",
																	"src": "9143:11:7"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1188,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1186,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1184,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1085,
																	"src": "9186:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 1185,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9195:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "9186:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1187,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9199:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9186:14:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1198,
														"nodeType": "IfStatement",
														"src": "9182:93:7",
														"trueBody": {
															"id": 1197,
															"nodeType": "Block",
															"src": "9202:73:7",
															"statements": [
																{
																	"expression": {
																		"id": 1191,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1189,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1085,
																			"src": "9220:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 1190,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9230:1:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "9220:11:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1192,
																	"nodeType": "ExpressionStatement",
																	"src": "9220:11:7"
																},
																{
																	"expression": {
																		"id": 1195,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1193,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1091,
																			"src": "9249:6:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 1194,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9259:1:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "9249:11:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1196,
																	"nodeType": "ExpressionStatement",
																	"src": "9249:11:7"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1203,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1201,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1199,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1085,
																	"src": "9292:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1200,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9301:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9292:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1202,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9305:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9292:14:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1209,
														"nodeType": "IfStatement",
														"src": "9288:64:7",
														"trueBody": {
															"id": 1208,
															"nodeType": "Block",
															"src": "9308:44:7",
															"statements": [
																{
																	"expression": {
																		"id": 1206,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1204,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1091,
																			"src": "9326:6:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 1205,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9336:1:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "9326:11:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1207,
																	"nodeType": "ExpressionStatement",
																	"src": "9326:11:7"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 1211,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1091,
													"src": "9378:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1089,
												"id": 1212,
												"nodeType": "Return",
												"src": "9371:13:7"
											}
										]
									},
									"documentation": {
										"id": 1083,
										"nodeType": "StructuredDocumentation",
										"src": "8290:113:7",
										"text": " @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."
									},
									"id": 1214,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "8417:4:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1086,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1085,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8430:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1214,
												"src": "8422:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1084,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8422:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8421:15:7"
									},
									"returnParameters": {
										"id": 1089,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1088,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1214,
												"src": "8460:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1087,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8460:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8459:9:7"
									},
									"scope": 1542,
									"src": "8408:983:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1249,
										"nodeType": "Block",
										"src": "9624:165:7",
										"statements": [
											{
												"id": 1248,
												"nodeType": "UncheckedBlock",
												"src": "9634:149:7",
												"statements": [
													{
														"assignments": [
															1226
														],
														"declarations": [
															{
																"constant": false,
																"id": 1226,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "9666:6:7",
																"nodeType": "VariableDeclaration",
																"scope": 1248,
																"src": "9658:14:7",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1225,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "9658:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1230,
														"initialValue": {
															"arguments": [
																{
																	"id": 1228,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1217,
																	"src": "9680:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1227,
																"name": "log2",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	1214,
																	1250
																],
																"referencedDeclaration": 1214,
																"src": "9675:4:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 1229,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9675:11:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "9658:28:7"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1246,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1231,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1226,
																"src": "9707:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 1241,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$683",
																					"typeString": "enum Math.Rounding"
																				},
																				"id": 1235,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1232,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1220,
																					"src": "9717:8:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$683",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 1233,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 683,
																						"src": "9729:8:7",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$683_$",
																							"typeString": "type(enum Math.Rounding)"
																						}
																					},
																					"id": 1234,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 681,
																					"src": "9729:11:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$683",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"src": "9717:23:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1240,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1238,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 1236,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "9744:1:7",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"id": 1237,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1226,
																						"src": "9749:6:7",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "9744:11:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 1239,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1217,
																					"src": "9758:5:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9744:19:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "9717:46:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 1243,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9770:1:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 1244,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "9717:54:7",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 1242,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9766:1:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 1245,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "9716:56:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "9707:65:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1224,
														"id": 1247,
														"nodeType": "Return",
														"src": "9700:72:7"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1215,
										"nodeType": "StructuredDocumentation",
										"src": "9397:142:7",
										"text": " @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 1250,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "9553:4:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1221,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1217,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9566:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1250,
												"src": "9558:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1216,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9558:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1220,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "9582:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 1250,
												"src": "9573:17:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$683",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 1219,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1218,
														"name": "Rounding",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 683,
														"src": "9573:8:7"
													},
													"referencedDeclaration": 683,
													"src": "9573:8:7",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$683",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9557:34:7"
									},
									"returnParameters": {
										"id": 1224,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1223,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1250,
												"src": "9615:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1222,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9615:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9614:9:7"
									},
									"scope": 1542,
									"src": "9544:245:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1378,
										"nodeType": "Block",
										"src": "9976:828:7",
										"statements": [
											{
												"assignments": [
													1259
												],
												"declarations": [
													{
														"constant": false,
														"id": 1259,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "9994:6:7",
														"nodeType": "VariableDeclaration",
														"scope": 1378,
														"src": "9986:14:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1258,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9986:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1261,
												"initialValue": {
													"hexValue": "30",
													"id": 1260,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "10003:1:7",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9986:18:7"
											},
											{
												"id": 1375,
												"nodeType": "UncheckedBlock",
												"src": "10014:761:7",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1266,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1262,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1253,
																"src": "10042:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																},
																"id": 1265,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 1263,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10051:2:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 1264,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10055:2:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "10051:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																}
															},
															"src": "10042:15:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1278,
														"nodeType": "IfStatement",
														"src": "10038:99:7",
														"trueBody": {
															"id": 1277,
															"nodeType": "Block",
															"src": "10059:78:7",
															"statements": [
																{
																	"expression": {
																		"id": 1271,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1267,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1253,
																			"src": "10077:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			},
																			"id": 1270,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 1268,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10086:2:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3634",
																				"id": 1269,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10090:2:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_64_by_1",
																					"typeString": "int_const 64"
																				},
																				"value": "64"
																			},
																			"src": "10086:6:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			}
																		},
																		"src": "10077:15:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1272,
																	"nodeType": "ExpressionStatement",
																	"src": "10077:15:7"
																},
																{
																	"expression": {
																		"id": 1275,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1273,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1259,
																			"src": "10110:6:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 1274,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10120:2:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "10110:12:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1276,
																	"nodeType": "ExpressionStatement",
																	"src": "10110:12:7"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1283,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1279,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1253,
																"src": "10154:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																},
																"id": 1282,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 1280,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10163:2:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 1281,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10167:2:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "10163:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																}
															},
															"src": "10154:15:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1295,
														"nodeType": "IfStatement",
														"src": "10150:99:7",
														"trueBody": {
															"id": 1294,
															"nodeType": "Block",
															"src": "10171:78:7",
															"statements": [
																{
																	"expression": {
																		"id": 1288,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1284,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1253,
																			"src": "10189:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			},
																			"id": 1287,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 1285,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10198:2:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3332",
																				"id": 1286,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10202:2:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_32_by_1",
																					"typeString": "int_const 32"
																				},
																				"value": "32"
																			},
																			"src": "10198:6:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			}
																		},
																		"src": "10189:15:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1289,
																	"nodeType": "ExpressionStatement",
																	"src": "10189:15:7"
																},
																{
																	"expression": {
																		"id": 1292,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1290,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1259,
																			"src": "10222:6:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 1291,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10232:2:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "10222:12:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1293,
																	"nodeType": "ExpressionStatement",
																	"src": "10222:12:7"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1300,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1296,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1253,
																"src": "10266:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																},
																"id": 1299,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 1297,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10275:2:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 1298,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10279:2:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "10275:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																}
															},
															"src": "10266:15:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1312,
														"nodeType": "IfStatement",
														"src": "10262:99:7",
														"trueBody": {
															"id": 1311,
															"nodeType": "Block",
															"src": "10283:78:7",
															"statements": [
																{
																	"expression": {
																		"id": 1305,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1301,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1253,
																			"src": "10301:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			},
																			"id": 1304,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 1302,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10310:2:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3136",
																				"id": 1303,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10314:2:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_16_by_1",
																					"typeString": "int_const 16"
																				},
																				"value": "16"
																			},
																			"src": "10310:6:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			}
																		},
																		"src": "10301:15:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1306,
																	"nodeType": "ExpressionStatement",
																	"src": "10301:15:7"
																},
																{
																	"expression": {
																		"id": 1309,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1307,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1259,
																			"src": "10334:6:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 1308,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10344:2:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "10334:12:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1310,
																	"nodeType": "ExpressionStatement",
																	"src": "10334:12:7"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1317,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1313,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1253,
																"src": "10378:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																},
																"id": 1316,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 1314,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10387:2:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 1315,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10391:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "10387:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																}
															},
															"src": "10378:14:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1329,
														"nodeType": "IfStatement",
														"src": "10374:96:7",
														"trueBody": {
															"id": 1328,
															"nodeType": "Block",
															"src": "10394:76:7",
															"statements": [
																{
																	"expression": {
																		"id": 1322,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1318,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1253,
																			"src": "10412:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			},
																			"id": 1321,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 1319,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10421:2:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "38",
																				"id": 1320,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10425:1:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_8_by_1",
																					"typeString": "int_const 8"
																				},
																				"value": "8"
																			},
																			"src": "10421:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			}
																		},
																		"src": "10412:14:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1323,
																	"nodeType": "ExpressionStatement",
																	"src": "10412:14:7"
																},
																{
																	"expression": {
																		"id": 1326,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1324,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1259,
																			"src": "10444:6:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 1325,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10454:1:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "10444:11:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1327,
																	"nodeType": "ExpressionStatement",
																	"src": "10444:11:7"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1334,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1330,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1253,
																"src": "10487:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																},
																"id": 1333,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 1331,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10496:2:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 1332,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10500:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "10496:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																}
															},
															"src": "10487:14:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1346,
														"nodeType": "IfStatement",
														"src": "10483:96:7",
														"trueBody": {
															"id": 1345,
															"nodeType": "Block",
															"src": "10503:76:7",
															"statements": [
																{
																	"expression": {
																		"id": 1339,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1335,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1253,
																			"src": "10521:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			},
																			"id": 1338,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 1336,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10530:2:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "34",
																				"id": 1337,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10534:1:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_4_by_1",
																					"typeString": "int_const 4"
																				},
																				"value": "4"
																			},
																			"src": "10530:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			}
																		},
																		"src": "10521:14:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1340,
																	"nodeType": "ExpressionStatement",
																	"src": "10521:14:7"
																},
																{
																	"expression": {
																		"id": 1343,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1341,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1259,
																			"src": "10553:6:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 1342,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10563:1:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "10553:11:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1344,
																	"nodeType": "ExpressionStatement",
																	"src": "10553:11:7"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1351,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1347,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1253,
																"src": "10596:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																},
																"id": 1350,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 1348,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10605:2:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 1349,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10609:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "10605:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																}
															},
															"src": "10596:14:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1363,
														"nodeType": "IfStatement",
														"src": "10592:96:7",
														"trueBody": {
															"id": 1362,
															"nodeType": "Block",
															"src": "10612:76:7",
															"statements": [
																{
																	"expression": {
																		"id": 1356,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1352,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1253,
																			"src": "10630:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			},
																			"id": 1355,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 1353,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10639:2:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "32",
																				"id": 1354,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10643:1:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_2_by_1",
																					"typeString": "int_const 2"
																				},
																				"value": "2"
																			},
																			"src": "10639:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			}
																		},
																		"src": "10630:14:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1357,
																	"nodeType": "ExpressionStatement",
																	"src": "10630:14:7"
																},
																{
																	"expression": {
																		"id": 1360,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1358,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1259,
																			"src": "10662:6:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 1359,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10672:1:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "10662:11:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1361,
																	"nodeType": "ExpressionStatement",
																	"src": "10662:11:7"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1368,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1364,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1253,
																"src": "10705:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																},
																"id": 1367,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 1365,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10714:2:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1366,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10718:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10714:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																}
															},
															"src": "10705:14:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1374,
														"nodeType": "IfStatement",
														"src": "10701:64:7",
														"trueBody": {
															"id": 1373,
															"nodeType": "Block",
															"src": "10721:44:7",
															"statements": [
																{
																	"expression": {
																		"id": 1371,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1369,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1259,
																			"src": "10739:6:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 1370,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10749:1:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "10739:11:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1372,
																	"nodeType": "ExpressionStatement",
																	"src": "10739:11:7"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 1376,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1259,
													"src": "10791:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1257,
												"id": 1377,
												"nodeType": "Return",
												"src": "10784:13:7"
											}
										]
									},
									"documentation": {
										"id": 1251,
										"nodeType": "StructuredDocumentation",
										"src": "9795:114:7",
										"text": " @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."
									},
									"id": 1379,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "9923:5:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1254,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1253,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9937:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1379,
												"src": "9929:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1252,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9929:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9928:15:7"
									},
									"returnParameters": {
										"id": 1257,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1256,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1379,
												"src": "9967:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1255,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9967:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9966:9:7"
									},
									"scope": 1542,
									"src": "9914:890:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1414,
										"nodeType": "Block",
										"src": "11039:165:7",
										"statements": [
											{
												"id": 1413,
												"nodeType": "UncheckedBlock",
												"src": "11049:149:7",
												"statements": [
													{
														"assignments": [
															1391
														],
														"declarations": [
															{
																"constant": false,
																"id": 1391,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "11081:6:7",
																"nodeType": "VariableDeclaration",
																"scope": 1413,
																"src": "11073:14:7",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1390,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "11073:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1395,
														"initialValue": {
															"arguments": [
																{
																	"id": 1393,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1382,
																	"src": "11096:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1392,
																"name": "log10",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	1379,
																	1415
																],
																"referencedDeclaration": 1379,
																"src": "11090:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 1394,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11090:12:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "11073:29:7"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1411,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1396,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1391,
																"src": "11123:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 1406,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$683",
																					"typeString": "enum Math.Rounding"
																				},
																				"id": 1400,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1397,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1385,
																					"src": "11133:8:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$683",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 1398,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 683,
																						"src": "11145:8:7",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$683_$",
																							"typeString": "type(enum Math.Rounding)"
																						}
																					},
																					"id": 1399,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 681,
																					"src": "11145:11:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$683",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"src": "11133:23:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1405,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1403,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "3130",
																						"id": 1401,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "11160:2:7",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_10_by_1",
																							"typeString": "int_const 10"
																						},
																						"value": "10"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "**",
																					"rightExpression": {
																						"id": 1402,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1391,
																						"src": "11164:6:7",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "11160:10:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 1404,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1382,
																					"src": "11173:5:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "11160:18:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "11133:45:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 1408,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11185:1:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 1409,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "11133:53:7",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 1407,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11181:1:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 1410,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "11132:55:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "11123:64:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1389,
														"id": 1412,
														"nodeType": "Return",
														"src": "11116:71:7"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1380,
										"nodeType": "StructuredDocumentation",
										"src": "10810:143:7",
										"text": " @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 1415,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "10967:5:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1386,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1382,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10981:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1415,
												"src": "10973:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1381,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10973:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1385,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "10997:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 1415,
												"src": "10988:17:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$683",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 1384,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1383,
														"name": "Rounding",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 683,
														"src": "10988:8:7"
													},
													"referencedDeclaration": 683,
													"src": "10988:8:7",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$683",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10972:34:7"
									},
									"returnParameters": {
										"id": 1389,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1388,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1415,
												"src": "11030:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1387,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11030:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11029:9:7"
									},
									"scope": 1542,
									"src": "10958:246:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1501,
										"nodeType": "Block",
										"src": "11518:600:7",
										"statements": [
											{
												"assignments": [
													1424
												],
												"declarations": [
													{
														"constant": false,
														"id": 1424,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "11536:6:7",
														"nodeType": "VariableDeclaration",
														"scope": 1501,
														"src": "11528:14:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1423,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11528:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1426,
												"initialValue": {
													"hexValue": "30",
													"id": 1425,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "11545:1:7",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11528:18:7"
											},
											{
												"id": 1498,
												"nodeType": "UncheckedBlock",
												"src": "11556:533:7",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1431,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1429,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1427,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1418,
																	"src": "11584:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 1428,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11593:3:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "11584:12:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1430,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11599:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11584:16:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1441,
														"nodeType": "IfStatement",
														"src": "11580:98:7",
														"trueBody": {
															"id": 1440,
															"nodeType": "Block",
															"src": "11602:76:7",
															"statements": [
																{
																	"expression": {
																		"id": 1434,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1432,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1418,
																			"src": "11620:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 1433,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11630:3:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "11620:13:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1435,
																	"nodeType": "ExpressionStatement",
																	"src": "11620:13:7"
																},
																{
																	"expression": {
																		"id": 1438,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1436,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1424,
																			"src": "11651:6:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 1437,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11661:2:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "11651:12:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1439,
																	"nodeType": "ExpressionStatement",
																	"src": "11651:12:7"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1446,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1444,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1442,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1418,
																	"src": "11695:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 1443,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11704:2:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "11695:11:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1445,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11709:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11695:15:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1456,
														"nodeType": "IfStatement",
														"src": "11691:95:7",
														"trueBody": {
															"id": 1455,
															"nodeType": "Block",
															"src": "11712:74:7",
															"statements": [
																{
																	"expression": {
																		"id": 1449,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1447,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1418,
																			"src": "11730:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 1448,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11740:2:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "11730:12:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1450,
																	"nodeType": "ExpressionStatement",
																	"src": "11730:12:7"
																},
																{
																	"expression": {
																		"id": 1453,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1451,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1424,
																			"src": "11760:6:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 1452,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11770:1:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "11760:11:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1454,
																	"nodeType": "ExpressionStatement",
																	"src": "11760:11:7"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1461,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1459,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1457,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1418,
																	"src": "11803:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 1458,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11812:2:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "11803:11:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1460,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11817:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11803:15:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1471,
														"nodeType": "IfStatement",
														"src": "11799:95:7",
														"trueBody": {
															"id": 1470,
															"nodeType": "Block",
															"src": "11820:74:7",
															"statements": [
																{
																	"expression": {
																		"id": 1464,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1462,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1418,
																			"src": "11838:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 1463,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11848:2:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "11838:12:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1465,
																	"nodeType": "ExpressionStatement",
																	"src": "11838:12:7"
																},
																{
																	"expression": {
																		"id": 1468,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1466,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1424,
																			"src": "11868:6:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 1467,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11878:1:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "11868:11:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1469,
																	"nodeType": "ExpressionStatement",
																	"src": "11868:11:7"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1476,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1474,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1472,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1418,
																	"src": "11911:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 1473,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11920:2:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "11911:11:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1475,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11925:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11911:15:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1486,
														"nodeType": "IfStatement",
														"src": "11907:95:7",
														"trueBody": {
															"id": 1485,
															"nodeType": "Block",
															"src": "11928:74:7",
															"statements": [
																{
																	"expression": {
																		"id": 1479,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1477,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1418,
																			"src": "11946:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 1478,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11956:2:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "11946:12:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1480,
																	"nodeType": "ExpressionStatement",
																	"src": "11946:12:7"
																},
																{
																	"expression": {
																		"id": 1483,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1481,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1424,
																			"src": "11976:6:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 1482,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11986:1:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "11976:11:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1484,
																	"nodeType": "ExpressionStatement",
																	"src": "11976:11:7"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1491,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1489,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1487,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1418,
																	"src": "12019:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 1488,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12028:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "12019:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1490,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "12032:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "12019:14:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1497,
														"nodeType": "IfStatement",
														"src": "12015:64:7",
														"trueBody": {
															"id": 1496,
															"nodeType": "Block",
															"src": "12035:44:7",
															"statements": [
																{
																	"expression": {
																		"id": 1494,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1492,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1424,
																			"src": "12053:6:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 1493,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12063:1:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "12053:11:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1495,
																	"nodeType": "ExpressionStatement",
																	"src": "12053:11:7"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 1499,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1424,
													"src": "12105:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1422,
												"id": 1500,
												"nodeType": "Return",
												"src": "12098:13:7"
											}
										]
									},
									"documentation": {
										"id": 1416,
										"nodeType": "StructuredDocumentation",
										"src": "11210:240:7",
										"text": " @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."
									},
									"id": 1502,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "11464:6:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1419,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1418,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "11479:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1502,
												"src": "11471:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1417,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11471:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11470:15:7"
									},
									"returnParameters": {
										"id": 1422,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1421,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1502,
												"src": "11509:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1420,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11509:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11508:9:7"
									},
									"scope": 1542,
									"src": "11455:663:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1540,
										"nodeType": "Block",
										"src": "12354:174:7",
										"statements": [
											{
												"id": 1539,
												"nodeType": "UncheckedBlock",
												"src": "12364:158:7",
												"statements": [
													{
														"assignments": [
															1514
														],
														"declarations": [
															{
																"constant": false,
																"id": 1514,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "12396:6:7",
																"nodeType": "VariableDeclaration",
																"scope": 1539,
																"src": "12388:14:7",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1513,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "12388:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1518,
														"initialValue": {
															"arguments": [
																{
																	"id": 1516,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1505,
																	"src": "12412:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1515,
																"name": "log256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	1502,
																	1541
																],
																"referencedDeclaration": 1502,
																"src": "12405:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 1517,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "12405:13:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "12388:30:7"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1537,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1519,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1514,
																"src": "12439:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 1532,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$683",
																					"typeString": "enum Math.Rounding"
																				},
																				"id": 1523,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1520,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1508,
																					"src": "12449:8:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$683",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 1521,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 683,
																						"src": "12461:8:7",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$683_$",
																							"typeString": "type(enum Math.Rounding)"
																						}
																					},
																					"id": 1522,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 681,
																					"src": "12461:11:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$683",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"src": "12449:23:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1531,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1529,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 1524,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "12476:1:7",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 1527,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 1525,
																									"name": "result",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1514,
																									"src": "12482:6:7",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "<<",
																								"rightExpression": {
																									"hexValue": "33",
																									"id": 1526,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "12492:1:7",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_3_by_1",
																										"typeString": "int_const 3"
																									},
																									"value": "3"
																								},
																								"src": "12482:11:7",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 1528,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "12481:13:7",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "12476:18:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 1530,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1505,
																					"src": "12497:5:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "12476:26:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "12449:53:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 1534,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12509:1:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 1535,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "12449:61:7",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 1533,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12505:1:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 1536,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "12448:63:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "12439:72:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1512,
														"id": 1538,
														"nodeType": "Return",
														"src": "12432:79:7"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1503,
										"nodeType": "StructuredDocumentation",
										"src": "12124:143:7",
										"text": " @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 1541,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "12281:6:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1509,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1505,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "12296:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1541,
												"src": "12288:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1504,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12288:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1508,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "12312:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 1541,
												"src": "12303:17:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$683",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 1507,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1506,
														"name": "Rounding",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 683,
														"src": "12303:8:7"
													},
													"referencedDeclaration": 683,
													"src": "12303:8:7",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$683",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12287:34:7"
									},
									"returnParameters": {
										"id": 1512,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1511,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1541,
												"src": "12345:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1510,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12345:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12344:9:7"
									},
									"scope": 1542,
									"src": "12272:256:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1543,
							"src": "202:12328:7",
							"usedErrors": []
						}
					],
					"src": "103:12428:7"
				},
				"id": 7
			}
		}
	}
}